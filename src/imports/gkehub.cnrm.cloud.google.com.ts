// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 *
 *
 * @schema GKEHubFeature
 */
export class GkeHubFeature extends ApiObject {
  /**
   * Returns the apiVersion and kind for "GKEHubFeature"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'gkehub.cnrm.cloud.google.com/v1beta1',
    kind: 'GKEHubFeature',
  }

  /**
   * Renders a Kubernetes manifest for "GKEHubFeature".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: GkeHubFeatureProps): any {
    return {
      ...GkeHubFeature.GVK,
      ...toJson_GkeHubFeatureProps(props),
    };
  }

  /**
   * Defines a "GKEHubFeature" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: GkeHubFeatureProps) {
    super(scope, id, {
      ...GkeHubFeature.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...GkeHubFeature.GVK,
      ...toJson_GkeHubFeatureProps(resolved),
    };
  }
}

/**
 * @schema GKEHubFeature
 */
export interface GkeHubFeatureProps {
  /**
   * @schema GKEHubFeature#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema GKEHubFeature#spec
   */
  readonly spec: GkeHubFeatureSpec;

}

/**
 * Converts an object of type 'GkeHubFeatureProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GkeHubFeatureProps(obj: GkeHubFeatureProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_GkeHubFeatureSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema GkeHubFeatureSpec
 */
export interface GkeHubFeatureSpec {
  /**
   * Immutable. The location for the resource
   *
   * @schema GkeHubFeatureSpec#location
   */
  readonly location: string;

  /**
   * Immutable. The Project that this resource belongs to.
   *
   * @schema GkeHubFeatureSpec#projectRef
   */
  readonly projectRef: GkeHubFeatureSpecProjectRef;

  /**
   * Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
   *
   * @schema GkeHubFeatureSpec#resourceID
   */
  readonly resourceId?: string;

  /**
   * Optional. Hub-wide Feature configuration. If this Feature does not support any Hub-wide configuration, this field may be unused.
   *
   * @schema GkeHubFeatureSpec#spec
   */
  readonly spec?: GkeHubFeatureSpecSpec;

}

/**
 * Converts an object of type 'GkeHubFeatureSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GkeHubFeatureSpec(obj: GkeHubFeatureSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'location': obj.location,
    'projectRef': toJson_GkeHubFeatureSpecProjectRef(obj.projectRef),
    'resourceID': obj.resourceId,
    'spec': toJson_GkeHubFeatureSpecSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. The Project that this resource belongs to.
 *
 * @schema GkeHubFeatureSpecProjectRef
 */
export interface GkeHubFeatureSpecProjectRef {
  /**
   * The project for the resource
   *
   * Allowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).
   *
   * @schema GkeHubFeatureSpecProjectRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema GkeHubFeatureSpecProjectRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema GkeHubFeatureSpecProjectRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'GkeHubFeatureSpecProjectRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GkeHubFeatureSpecProjectRef(obj: GkeHubFeatureSpecProjectRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional. Hub-wide Feature configuration. If this Feature does not support any Hub-wide configuration, this field may be unused.
 *
 * @schema GkeHubFeatureSpecSpec
 */
export interface GkeHubFeatureSpecSpec {
  /**
   * Fleet Observability spec.
   *
   * @schema GkeHubFeatureSpecSpec#fleetobservability
   */
  readonly fleetobservability?: GkeHubFeatureSpecSpecFleetobservability;

  /**
   * Multicluster Ingress-specific spec.
   *
   * @schema GkeHubFeatureSpecSpec#multiclusteringress
   */
  readonly multiclusteringress?: GkeHubFeatureSpecSpecMulticlusteringress;

}

/**
 * Converts an object of type 'GkeHubFeatureSpecSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GkeHubFeatureSpecSpec(obj: GkeHubFeatureSpecSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fleetobservability': toJson_GkeHubFeatureSpecSpecFleetobservability(obj.fleetobservability),
    'multiclusteringress': toJson_GkeHubFeatureSpecSpecMulticlusteringress(obj.multiclusteringress),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Fleet Observability spec.
 *
 * @schema GkeHubFeatureSpecSpecFleetobservability
 */
export interface GkeHubFeatureSpecSpecFleetobservability {
  /**
   * Fleet Observability Logging-specific spec.
   *
   * @schema GkeHubFeatureSpecSpecFleetobservability#loggingConfig
   */
  readonly loggingConfig?: GkeHubFeatureSpecSpecFleetobservabilityLoggingConfig;

}

/**
 * Converts an object of type 'GkeHubFeatureSpecSpecFleetobservability' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GkeHubFeatureSpecSpecFleetobservability(obj: GkeHubFeatureSpecSpecFleetobservability | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'loggingConfig': toJson_GkeHubFeatureSpecSpecFleetobservabilityLoggingConfig(obj.loggingConfig),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Multicluster Ingress-specific spec.
 *
 * @schema GkeHubFeatureSpecSpecMulticlusteringress
 */
export interface GkeHubFeatureSpecSpecMulticlusteringress {
  /**
   * @schema GkeHubFeatureSpecSpecMulticlusteringress#configMembershipRef
   */
  readonly configMembershipRef: GkeHubFeatureSpecSpecMulticlusteringressConfigMembershipRef;

}

/**
 * Converts an object of type 'GkeHubFeatureSpecSpecMulticlusteringress' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GkeHubFeatureSpecSpecMulticlusteringress(obj: GkeHubFeatureSpecSpecMulticlusteringress | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configMembershipRef': toJson_GkeHubFeatureSpecSpecMulticlusteringressConfigMembershipRef(obj.configMembershipRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Fleet Observability Logging-specific spec.
 *
 * @schema GkeHubFeatureSpecSpecFleetobservabilityLoggingConfig
 */
export interface GkeHubFeatureSpecSpecFleetobservabilityLoggingConfig {
  /**
   * Specified if applying the default routing config to logs not specified in other configs.
   *
   * @schema GkeHubFeatureSpecSpecFleetobservabilityLoggingConfig#defaultConfig
   */
  readonly defaultConfig?: GkeHubFeatureSpecSpecFleetobservabilityLoggingConfigDefaultConfig;

  /**
   * Specified if applying the routing config to all logs for all fleet scopes.
   *
   * @schema GkeHubFeatureSpecSpecFleetobservabilityLoggingConfig#fleetScopeLogsConfig
   */
  readonly fleetScopeLogsConfig?: GkeHubFeatureSpecSpecFleetobservabilityLoggingConfigFleetScopeLogsConfig;

}

/**
 * Converts an object of type 'GkeHubFeatureSpecSpecFleetobservabilityLoggingConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GkeHubFeatureSpecSpecFleetobservabilityLoggingConfig(obj: GkeHubFeatureSpecSpecFleetobservabilityLoggingConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'defaultConfig': toJson_GkeHubFeatureSpecSpecFleetobservabilityLoggingConfigDefaultConfig(obj.defaultConfig),
    'fleetScopeLogsConfig': toJson_GkeHubFeatureSpecSpecFleetobservabilityLoggingConfigFleetScopeLogsConfig(obj.fleetScopeLogsConfig),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema GkeHubFeatureSpecSpecMulticlusteringressConfigMembershipRef
 */
export interface GkeHubFeatureSpecSpecMulticlusteringressConfigMembershipRef {
  /**
   * Fully-qualified Membership name which hosts the MultiClusterIngress CRD. Example: `projects/foo-proj/locations/global/memberships/bar`
   *
   * Allowed value: The Google Cloud resource name of a `GKEHubMembership` resource (format: `projects/{{project}}/locations/{{location}}/memberships/{{name}}`).
   *
   * @schema GkeHubFeatureSpecSpecMulticlusteringressConfigMembershipRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema GkeHubFeatureSpecSpecMulticlusteringressConfigMembershipRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema GkeHubFeatureSpecSpecMulticlusteringressConfigMembershipRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'GkeHubFeatureSpecSpecMulticlusteringressConfigMembershipRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GkeHubFeatureSpecSpecMulticlusteringressConfigMembershipRef(obj: GkeHubFeatureSpecSpecMulticlusteringressConfigMembershipRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specified if applying the default routing config to logs not specified in other configs.
 *
 * @schema GkeHubFeatureSpecSpecFleetobservabilityLoggingConfigDefaultConfig
 */
export interface GkeHubFeatureSpecSpecFleetobservabilityLoggingConfigDefaultConfig {
  /**
   * The logs routing mode Possible values: MODE_UNSPECIFIED, COPY, MOVE
   *
   * @schema GkeHubFeatureSpecSpecFleetobservabilityLoggingConfigDefaultConfig#mode
   */
  readonly mode?: string;

}

/**
 * Converts an object of type 'GkeHubFeatureSpecSpecFleetobservabilityLoggingConfigDefaultConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GkeHubFeatureSpecSpecFleetobservabilityLoggingConfigDefaultConfig(obj: GkeHubFeatureSpecSpecFleetobservabilityLoggingConfigDefaultConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'mode': obj.mode,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specified if applying the routing config to all logs for all fleet scopes.
 *
 * @schema GkeHubFeatureSpecSpecFleetobservabilityLoggingConfigFleetScopeLogsConfig
 */
export interface GkeHubFeatureSpecSpecFleetobservabilityLoggingConfigFleetScopeLogsConfig {
  /**
   * The logs routing mode Possible values: MODE_UNSPECIFIED, COPY, MOVE
   *
   * @schema GkeHubFeatureSpecSpecFleetobservabilityLoggingConfigFleetScopeLogsConfig#mode
   */
  readonly mode?: string;

}

/**
 * Converts an object of type 'GkeHubFeatureSpecSpecFleetobservabilityLoggingConfigFleetScopeLogsConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GkeHubFeatureSpecSpecFleetobservabilityLoggingConfigFleetScopeLogsConfig(obj: GkeHubFeatureSpecSpecFleetobservabilityLoggingConfigFleetScopeLogsConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'mode': obj.mode,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema GKEHubFeatureMembership
 */
export class GkeHubFeatureMembership extends ApiObject {
  /**
   * Returns the apiVersion and kind for "GKEHubFeatureMembership"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'gkehub.cnrm.cloud.google.com/v1beta1',
    kind: 'GKEHubFeatureMembership',
  }

  /**
   * Renders a Kubernetes manifest for "GKEHubFeatureMembership".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: GkeHubFeatureMembershipProps): any {
    return {
      ...GkeHubFeatureMembership.GVK,
      ...toJson_GkeHubFeatureMembershipProps(props),
    };
  }

  /**
   * Defines a "GKEHubFeatureMembership" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: GkeHubFeatureMembershipProps) {
    super(scope, id, {
      ...GkeHubFeatureMembership.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...GkeHubFeatureMembership.GVK,
      ...toJson_GkeHubFeatureMembershipProps(resolved),
    };
  }
}

/**
 * @schema GKEHubFeatureMembership
 */
export interface GkeHubFeatureMembershipProps {
  /**
   * @schema GKEHubFeatureMembership#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema GKEHubFeatureMembership#spec
   */
  readonly spec: GkeHubFeatureMembershipSpec;

}

/**
 * Converts an object of type 'GkeHubFeatureMembershipProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GkeHubFeatureMembershipProps(obj: GkeHubFeatureMembershipProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_GkeHubFeatureMembershipSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema GkeHubFeatureMembershipSpec
 */
export interface GkeHubFeatureMembershipSpec {
  /**
   * Config Management-specific spec.
   *
   * @schema GkeHubFeatureMembershipSpec#configmanagement
   */
  readonly configmanagement?: GkeHubFeatureMembershipSpecConfigmanagement;

  /**
   * Immutable.
   *
   * @schema GkeHubFeatureMembershipSpec#featureRef
   */
  readonly featureRef: GkeHubFeatureMembershipSpecFeatureRef;

  /**
   * Immutable. The location of the feature
   *
   * @schema GkeHubFeatureMembershipSpec#location
   */
  readonly location: string;

  /**
   * Immutable.
   *
   * @schema GkeHubFeatureMembershipSpec#membershipRef
   */
  readonly membershipRef: GkeHubFeatureMembershipSpecMembershipRef;

  /**
   * Manage Mesh Features
   *
   * @schema GkeHubFeatureMembershipSpec#mesh
   */
  readonly mesh?: GkeHubFeatureMembershipSpecMesh;

  /**
   * Immutable. The Project that this resource belongs to.
   *
   * @schema GkeHubFeatureMembershipSpec#projectRef
   */
  readonly projectRef: GkeHubFeatureMembershipSpecProjectRef;

}

/**
 * Converts an object of type 'GkeHubFeatureMembershipSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GkeHubFeatureMembershipSpec(obj: GkeHubFeatureMembershipSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configmanagement': toJson_GkeHubFeatureMembershipSpecConfigmanagement(obj.configmanagement),
    'featureRef': toJson_GkeHubFeatureMembershipSpecFeatureRef(obj.featureRef),
    'location': obj.location,
    'membershipRef': toJson_GkeHubFeatureMembershipSpecMembershipRef(obj.membershipRef),
    'mesh': toJson_GkeHubFeatureMembershipSpecMesh(obj.mesh),
    'projectRef': toJson_GkeHubFeatureMembershipSpecProjectRef(obj.projectRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Config Management-specific spec.
 *
 * @schema GkeHubFeatureMembershipSpecConfigmanagement
 */
export interface GkeHubFeatureMembershipSpecConfigmanagement {
  /**
   * Binauthz configuration for the cluster.
   *
   * @schema GkeHubFeatureMembershipSpecConfigmanagement#binauthz
   */
  readonly binauthz?: GkeHubFeatureMembershipSpecConfigmanagementBinauthz;

  /**
   * Config Sync configuration for the cluster.
   *
   * @schema GkeHubFeatureMembershipSpecConfigmanagement#configSync
   */
  readonly configSync?: GkeHubFeatureMembershipSpecConfigmanagementConfigSync;

  /**
   * Hierarchy Controller configuration for the cluster.
   *
   * @schema GkeHubFeatureMembershipSpecConfigmanagement#hierarchyController
   */
  readonly hierarchyController?: GkeHubFeatureMembershipSpecConfigmanagementHierarchyController;

  /**
   * Policy Controller configuration for the cluster.
   *
   * @schema GkeHubFeatureMembershipSpecConfigmanagement#policyController
   */
  readonly policyController?: GkeHubFeatureMembershipSpecConfigmanagementPolicyController;

  /**
   * Optional. Version of ACM to install. Defaults to the latest version.
   *
   * @default the latest version.
   * @schema GkeHubFeatureMembershipSpecConfigmanagement#version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'GkeHubFeatureMembershipSpecConfigmanagement' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GkeHubFeatureMembershipSpecConfigmanagement(obj: GkeHubFeatureMembershipSpecConfigmanagement | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'binauthz': toJson_GkeHubFeatureMembershipSpecConfigmanagementBinauthz(obj.binauthz),
    'configSync': toJson_GkeHubFeatureMembershipSpecConfigmanagementConfigSync(obj.configSync),
    'hierarchyController': toJson_GkeHubFeatureMembershipSpecConfigmanagementHierarchyController(obj.hierarchyController),
    'policyController': toJson_GkeHubFeatureMembershipSpecConfigmanagementPolicyController(obj.policyController),
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable.
 *
 * @schema GkeHubFeatureMembershipSpecFeatureRef
 */
export interface GkeHubFeatureMembershipSpecFeatureRef {
  /**
   * The name of the feature
   *
   * Allowed value: The Google Cloud resource name of a `GKEHubFeature` resource (format: `projects/{{project}}/locations/{{location}}/features/{{name}}`).
   *
   * @schema GkeHubFeatureMembershipSpecFeatureRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema GkeHubFeatureMembershipSpecFeatureRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema GkeHubFeatureMembershipSpecFeatureRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'GkeHubFeatureMembershipSpecFeatureRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GkeHubFeatureMembershipSpecFeatureRef(obj: GkeHubFeatureMembershipSpecFeatureRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable.
 *
 * @schema GkeHubFeatureMembershipSpecMembershipRef
 */
export interface GkeHubFeatureMembershipSpecMembershipRef {
  /**
   * The name of the membership
   *
   * Allowed value: The Google Cloud resource name of a `GKEHubMembership` resource (format: `projects/{{project}}/locations/{{location}}/memberships/{{name}}`).
   *
   * @schema GkeHubFeatureMembershipSpecMembershipRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema GkeHubFeatureMembershipSpecMembershipRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema GkeHubFeatureMembershipSpecMembershipRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'GkeHubFeatureMembershipSpecMembershipRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GkeHubFeatureMembershipSpecMembershipRef(obj: GkeHubFeatureMembershipSpecMembershipRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Manage Mesh Features
 *
 * @schema GkeHubFeatureMembershipSpecMesh
 */
export interface GkeHubFeatureMembershipSpecMesh {
  /**
   * **DEPRECATED** Whether to automatically manage Service Mesh control planes. Possible values: CONTROL_PLANE_MANAGEMENT_UNSPECIFIED, AUTOMATIC, MANUAL
   *
   * @schema GkeHubFeatureMembershipSpecMesh#controlPlane
   */
  readonly controlPlane?: string;

  /**
   * Whether to automatically manage Service Mesh. Possible values: MANAGEMENT_UNSPECIFIED, MANAGEMENT_AUTOMATIC, MANAGEMENT_MANUAL
   *
   * @schema GkeHubFeatureMembershipSpecMesh#management
   */
  readonly management?: string;

}

/**
 * Converts an object of type 'GkeHubFeatureMembershipSpecMesh' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GkeHubFeatureMembershipSpecMesh(obj: GkeHubFeatureMembershipSpecMesh | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'controlPlane': obj.controlPlane,
    'management': obj.management,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. The Project that this resource belongs to.
 *
 * @schema GkeHubFeatureMembershipSpecProjectRef
 */
export interface GkeHubFeatureMembershipSpecProjectRef {
  /**
   * The project of the feature
   *
   * Allowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).
   *
   * @schema GkeHubFeatureMembershipSpecProjectRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema GkeHubFeatureMembershipSpecProjectRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema GkeHubFeatureMembershipSpecProjectRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'GkeHubFeatureMembershipSpecProjectRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GkeHubFeatureMembershipSpecProjectRef(obj: GkeHubFeatureMembershipSpecProjectRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Binauthz configuration for the cluster.
 *
 * @schema GkeHubFeatureMembershipSpecConfigmanagementBinauthz
 */
export interface GkeHubFeatureMembershipSpecConfigmanagementBinauthz {
  /**
   * Whether binauthz is enabled in this cluster.
   *
   * @schema GkeHubFeatureMembershipSpecConfigmanagementBinauthz#enabled
   */
  readonly enabled?: boolean;

}

/**
 * Converts an object of type 'GkeHubFeatureMembershipSpecConfigmanagementBinauthz' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GkeHubFeatureMembershipSpecConfigmanagementBinauthz(obj: GkeHubFeatureMembershipSpecConfigmanagementBinauthz | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Config Sync configuration for the cluster.
 *
 * @schema GkeHubFeatureMembershipSpecConfigmanagementConfigSync
 */
export interface GkeHubFeatureMembershipSpecConfigmanagementConfigSync {
  /**
   * @schema GkeHubFeatureMembershipSpecConfigmanagementConfigSync#git
   */
  readonly git?: GkeHubFeatureMembershipSpecConfigmanagementConfigSyncGit;

  /**
   * @schema GkeHubFeatureMembershipSpecConfigmanagementConfigSync#oci
   */
  readonly oci?: GkeHubFeatureMembershipSpecConfigmanagementConfigSyncOci;

  /**
   * Set to true to enable the Config Sync admission webhook to prevent drifts. If set to `false`, disables the Config Sync admission webhook and does not prevent drifts.
   *
   * @schema GkeHubFeatureMembershipSpecConfigmanagementConfigSync#preventDrift
   */
  readonly preventDrift?: boolean;

  /**
   * Specifies whether the Config Sync Repo is in "hierarchical" or "unstructured" mode.
   *
   * @schema GkeHubFeatureMembershipSpecConfigmanagementConfigSync#sourceFormat
   */
  readonly sourceFormat?: string;

}

/**
 * Converts an object of type 'GkeHubFeatureMembershipSpecConfigmanagementConfigSync' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GkeHubFeatureMembershipSpecConfigmanagementConfigSync(obj: GkeHubFeatureMembershipSpecConfigmanagementConfigSync | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'git': toJson_GkeHubFeatureMembershipSpecConfigmanagementConfigSyncGit(obj.git),
    'oci': toJson_GkeHubFeatureMembershipSpecConfigmanagementConfigSyncOci(obj.oci),
    'preventDrift': obj.preventDrift,
    'sourceFormat': obj.sourceFormat,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Hierarchy Controller configuration for the cluster.
 *
 * @schema GkeHubFeatureMembershipSpecConfigmanagementHierarchyController
 */
export interface GkeHubFeatureMembershipSpecConfigmanagementHierarchyController {
  /**
   * Whether hierarchical resource quota is enabled in this cluster.
   *
   * @schema GkeHubFeatureMembershipSpecConfigmanagementHierarchyController#enableHierarchicalResourceQuota
   */
  readonly enableHierarchicalResourceQuota?: boolean;

  /**
   * Whether pod tree labels are enabled in this cluster.
   *
   * @schema GkeHubFeatureMembershipSpecConfigmanagementHierarchyController#enablePodTreeLabels
   */
  readonly enablePodTreeLabels?: boolean;

  /**
   * Whether Hierarchy Controller is enabled in this cluster.
   *
   * @schema GkeHubFeatureMembershipSpecConfigmanagementHierarchyController#enabled
   */
  readonly enabled?: boolean;

}

/**
 * Converts an object of type 'GkeHubFeatureMembershipSpecConfigmanagementHierarchyController' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GkeHubFeatureMembershipSpecConfigmanagementHierarchyController(obj: GkeHubFeatureMembershipSpecConfigmanagementHierarchyController | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enableHierarchicalResourceQuota': obj.enableHierarchicalResourceQuota,
    'enablePodTreeLabels': obj.enablePodTreeLabels,
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policy Controller configuration for the cluster.
 *
 * @schema GkeHubFeatureMembershipSpecConfigmanagementPolicyController
 */
export interface GkeHubFeatureMembershipSpecConfigmanagementPolicyController {
  /**
   * Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.
   *
   * @schema GkeHubFeatureMembershipSpecConfigmanagementPolicyController#auditIntervalSeconds
   */
  readonly auditIntervalSeconds?: string;

  /**
   * Enables the installation of Policy Controller. If false, the rest of PolicyController fields take no effect.
   *
   * @schema GkeHubFeatureMembershipSpecConfigmanagementPolicyController#enabled
   */
  readonly enabled?: boolean;

  /**
   * The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
   *
   * @schema GkeHubFeatureMembershipSpecConfigmanagementPolicyController#exemptableNamespaces
   */
  readonly exemptableNamespaces?: string[];

  /**
   * Logs all denies and dry run failures.
   *
   * @schema GkeHubFeatureMembershipSpecConfigmanagementPolicyController#logDeniesEnabled
   */
  readonly logDeniesEnabled?: boolean;

  /**
   * Specifies the backends Policy Controller should export metrics to. For example, to specify metrics should be exported to Cloud Monitoring and Prometheus, specify backends: ["cloudmonitoring", "prometheus"]. Default: ["cloudmonitoring", "prometheus"]
   *
   * @schema GkeHubFeatureMembershipSpecConfigmanagementPolicyController#monitoring
   */
  readonly monitoring?: GkeHubFeatureMembershipSpecConfigmanagementPolicyControllerMonitoring;

  /**
   * Enable or disable mutation in policy controller. If true, mutation CRDs, webhook and controller deployment will be deployed to the cluster.
   *
   * @schema GkeHubFeatureMembershipSpecConfigmanagementPolicyController#mutationEnabled
   */
  readonly mutationEnabled?: boolean;

  /**
   * Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
   *
   * @schema GkeHubFeatureMembershipSpecConfigmanagementPolicyController#referentialRulesEnabled
   */
  readonly referentialRulesEnabled?: boolean;

  /**
   * Installs the default template library along with Policy Controller.
   *
   * @schema GkeHubFeatureMembershipSpecConfigmanagementPolicyController#templateLibraryInstalled
   */
  readonly templateLibraryInstalled?: boolean;

}

/**
 * Converts an object of type 'GkeHubFeatureMembershipSpecConfigmanagementPolicyController' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GkeHubFeatureMembershipSpecConfigmanagementPolicyController(obj: GkeHubFeatureMembershipSpecConfigmanagementPolicyController | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'auditIntervalSeconds': obj.auditIntervalSeconds,
    'enabled': obj.enabled,
    'exemptableNamespaces': obj.exemptableNamespaces?.map(y => y),
    'logDeniesEnabled': obj.logDeniesEnabled,
    'monitoring': toJson_GkeHubFeatureMembershipSpecConfigmanagementPolicyControllerMonitoring(obj.monitoring),
    'mutationEnabled': obj.mutationEnabled,
    'referentialRulesEnabled': obj.referentialRulesEnabled,
    'templateLibraryInstalled': obj.templateLibraryInstalled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema GkeHubFeatureMembershipSpecConfigmanagementConfigSyncGit
 */
export interface GkeHubFeatureMembershipSpecConfigmanagementConfigSyncGit {
  /**
   * @schema GkeHubFeatureMembershipSpecConfigmanagementConfigSyncGit#gcpServiceAccountRef
   */
  readonly gcpServiceAccountRef?: GkeHubFeatureMembershipSpecConfigmanagementConfigSyncGitGcpServiceAccountRef;

  /**
   * URL for the HTTPS proxy to be used when communicating with the Git repo.
   *
   * @schema GkeHubFeatureMembershipSpecConfigmanagementConfigSyncGit#httpsProxy
   */
  readonly httpsProxy?: string;

  /**
   * The path within the Git repository that represents the top level of the repo to sync. Default: the root directory of the repository.
   *
   * @schema GkeHubFeatureMembershipSpecConfigmanagementConfigSyncGit#policyDir
   */
  readonly policyDir?: string;

  /**
   * Type of secret configured for access to the Git repo. Must be one of ssh, cookiefile, gcenode, token, gcpserviceaccount or none. The validation of this is case-sensitive.
   *
   * @schema GkeHubFeatureMembershipSpecConfigmanagementConfigSyncGit#secretType
   */
  readonly secretType?: string;

  /**
   * The branch of the repository to sync from. Default: master.
   *
   * @schema GkeHubFeatureMembershipSpecConfigmanagementConfigSyncGit#syncBranch
   */
  readonly syncBranch?: string;

  /**
   * The URL of the Git repository to use as the source of truth.
   *
   * @schema GkeHubFeatureMembershipSpecConfigmanagementConfigSyncGit#syncRepo
   */
  readonly syncRepo?: string;

  /**
   * Git revision (tag or hash) to check out. Default HEAD.
   *
   * @schema GkeHubFeatureMembershipSpecConfigmanagementConfigSyncGit#syncRev
   */
  readonly syncRev?: string;

  /**
   * Period in seconds between consecutive syncs. Default: 15.
   *
   * @schema GkeHubFeatureMembershipSpecConfigmanagementConfigSyncGit#syncWaitSecs
   */
  readonly syncWaitSecs?: string;

}

/**
 * Converts an object of type 'GkeHubFeatureMembershipSpecConfigmanagementConfigSyncGit' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GkeHubFeatureMembershipSpecConfigmanagementConfigSyncGit(obj: GkeHubFeatureMembershipSpecConfigmanagementConfigSyncGit | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'gcpServiceAccountRef': toJson_GkeHubFeatureMembershipSpecConfigmanagementConfigSyncGitGcpServiceAccountRef(obj.gcpServiceAccountRef),
    'httpsProxy': obj.httpsProxy,
    'policyDir': obj.policyDir,
    'secretType': obj.secretType,
    'syncBranch': obj.syncBranch,
    'syncRepo': obj.syncRepo,
    'syncRev': obj.syncRev,
    'syncWaitSecs': obj.syncWaitSecs,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema GkeHubFeatureMembershipSpecConfigmanagementConfigSyncOci
 */
export interface GkeHubFeatureMembershipSpecConfigmanagementConfigSyncOci {
  /**
   * @schema GkeHubFeatureMembershipSpecConfigmanagementConfigSyncOci#gcpServiceAccountRef
   */
  readonly gcpServiceAccountRef?: GkeHubFeatureMembershipSpecConfigmanagementConfigSyncOciGcpServiceAccountRef;

  /**
   * The absolute path of the directory that contains the local resources. Default: the root directory of the image.
   *
   * @schema GkeHubFeatureMembershipSpecConfigmanagementConfigSyncOci#policyDir
   */
  readonly policyDir?: string;

  /**
   * Type of secret configured for access to the OCI Image. Must be one of gcenode, gcpserviceaccount or none. The validation of this is case-sensitive.
   *
   * @schema GkeHubFeatureMembershipSpecConfigmanagementConfigSyncOci#secretType
   */
  readonly secretType?: string;

  /**
   * The OCI image repository URL for the package to sync from. e.g. LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY_NAME/PACKAGE_NAME.
   *
   * @schema GkeHubFeatureMembershipSpecConfigmanagementConfigSyncOci#syncRepo
   */
  readonly syncRepo?: string;

  /**
   * Period in seconds(int64 format) between consecutive syncs. Default: 15.
   *
   * @schema GkeHubFeatureMembershipSpecConfigmanagementConfigSyncOci#syncWaitSecs
   */
  readonly syncWaitSecs?: string;

}

/**
 * Converts an object of type 'GkeHubFeatureMembershipSpecConfigmanagementConfigSyncOci' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GkeHubFeatureMembershipSpecConfigmanagementConfigSyncOci(obj: GkeHubFeatureMembershipSpecConfigmanagementConfigSyncOci | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'gcpServiceAccountRef': toJson_GkeHubFeatureMembershipSpecConfigmanagementConfigSyncOciGcpServiceAccountRef(obj.gcpServiceAccountRef),
    'policyDir': obj.policyDir,
    'secretType': obj.secretType,
    'syncRepo': obj.syncRepo,
    'syncWaitSecs': obj.syncWaitSecs,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specifies the backends Policy Controller should export metrics to. For example, to specify metrics should be exported to Cloud Monitoring and Prometheus, specify backends: ["cloudmonitoring", "prometheus"]. Default: ["cloudmonitoring", "prometheus"]
 *
 * @schema GkeHubFeatureMembershipSpecConfigmanagementPolicyControllerMonitoring
 */
export interface GkeHubFeatureMembershipSpecConfigmanagementPolicyControllerMonitoring {
  /**
   * Specifies the list of backends Policy Controller will export to. Specifying an empty value `[]` disables metrics export.
   *
   * @schema GkeHubFeatureMembershipSpecConfigmanagementPolicyControllerMonitoring#backends
   */
  readonly backends?: string[];

}

/**
 * Converts an object of type 'GkeHubFeatureMembershipSpecConfigmanagementPolicyControllerMonitoring' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GkeHubFeatureMembershipSpecConfigmanagementPolicyControllerMonitoring(obj: GkeHubFeatureMembershipSpecConfigmanagementPolicyControllerMonitoring | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'backends': obj.backends?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema GkeHubFeatureMembershipSpecConfigmanagementConfigSyncGitGcpServiceAccountRef
 */
export interface GkeHubFeatureMembershipSpecConfigmanagementConfigSyncGitGcpServiceAccountRef {
  /**
   * The GCP Service Account Email used for auth when secretType is gcpServiceAccount.
   *
   * Allowed value: The `email` field of an `IAMServiceAccount` resource.
   *
   * @schema GkeHubFeatureMembershipSpecConfigmanagementConfigSyncGitGcpServiceAccountRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema GkeHubFeatureMembershipSpecConfigmanagementConfigSyncGitGcpServiceAccountRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema GkeHubFeatureMembershipSpecConfigmanagementConfigSyncGitGcpServiceAccountRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'GkeHubFeatureMembershipSpecConfigmanagementConfigSyncGitGcpServiceAccountRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GkeHubFeatureMembershipSpecConfigmanagementConfigSyncGitGcpServiceAccountRef(obj: GkeHubFeatureMembershipSpecConfigmanagementConfigSyncGitGcpServiceAccountRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema GkeHubFeatureMembershipSpecConfigmanagementConfigSyncOciGcpServiceAccountRef
 */
export interface GkeHubFeatureMembershipSpecConfigmanagementConfigSyncOciGcpServiceAccountRef {
  /**
   * The GCP Service Account Email used for auth when secret_type is gcpserviceaccount.
   *
   * Allowed value: The `email` field of an `IAMServiceAccount` resource.
   *
   * @schema GkeHubFeatureMembershipSpecConfigmanagementConfigSyncOciGcpServiceAccountRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema GkeHubFeatureMembershipSpecConfigmanagementConfigSyncOciGcpServiceAccountRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema GkeHubFeatureMembershipSpecConfigmanagementConfigSyncOciGcpServiceAccountRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'GkeHubFeatureMembershipSpecConfigmanagementConfigSyncOciGcpServiceAccountRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GkeHubFeatureMembershipSpecConfigmanagementConfigSyncOciGcpServiceAccountRef(obj: GkeHubFeatureMembershipSpecConfigmanagementConfigSyncOciGcpServiceAccountRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema GKEHubMembership
 */
export class GkeHubMembership extends ApiObject {
  /**
   * Returns the apiVersion and kind for "GKEHubMembership"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'gkehub.cnrm.cloud.google.com/v1beta1',
    kind: 'GKEHubMembership',
  }

  /**
   * Renders a Kubernetes manifest for "GKEHubMembership".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: GkeHubMembershipProps): any {
    return {
      ...GkeHubMembership.GVK,
      ...toJson_GkeHubMembershipProps(props),
    };
  }

  /**
   * Defines a "GKEHubMembership" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: GkeHubMembershipProps) {
    super(scope, id, {
      ...GkeHubMembership.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...GkeHubMembership.GVK,
      ...toJson_GkeHubMembershipProps(resolved),
    };
  }
}

/**
 * @schema GKEHubMembership
 */
export interface GkeHubMembershipProps {
  /**
   * @schema GKEHubMembership#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema GKEHubMembership#spec
   */
  readonly spec: GkeHubMembershipSpec;

}

/**
 * Converts an object of type 'GkeHubMembershipProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GkeHubMembershipProps(obj: GkeHubMembershipProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_GkeHubMembershipSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema GkeHubMembershipSpec
 */
export interface GkeHubMembershipSpec {
  /**
   * Optional. How to identify workloads from this Membership. See the documentation on Workload Identity for more details: https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity
   *
   * @schema GkeHubMembershipSpec#authority
   */
  readonly authority?: GkeHubMembershipSpecAuthority;

  /**
   * Description of this membership, limited to 63 characters. Must match the regex: `*` This field is present for legacy purposes.
   *
   * @schema GkeHubMembershipSpec#description
   */
  readonly description?: string;

  /**
   * Optional. Endpoint information to reach this member.
   *
   * @schema GkeHubMembershipSpec#endpoint
   */
  readonly endpoint?: GkeHubMembershipSpecEndpoint;

  /**
   * Optional. An externally-generated and managed ID for this Membership. This ID may be modified after creation, but this is not recommended. The ID must match the regex: `*` If this Membership represents a Kubernetes cluster, this value should be set to the UID of the `kube-system` namespace object.
   *
   * @schema GkeHubMembershipSpec#externalId
   */
  readonly externalId?: string;

  /**
   * Optional. The infrastructure type this Membership is running on. Possible values: INFRASTRUCTURE_TYPE_UNSPECIFIED, ON_PREM, MULTI_CLOUD
   *
   * @schema GkeHubMembershipSpec#infrastructureType
   */
  readonly infrastructureType?: string;

  /**
   * Immutable. The location for the resource
   *
   * @schema GkeHubMembershipSpec#location
   */
  readonly location: string;

  /**
   * Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
   *
   * @schema GkeHubMembershipSpec#resourceID
   */
  readonly resourceId?: string;

}

/**
 * Converts an object of type 'GkeHubMembershipSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GkeHubMembershipSpec(obj: GkeHubMembershipSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'authority': toJson_GkeHubMembershipSpecAuthority(obj.authority),
    'description': obj.description,
    'endpoint': toJson_GkeHubMembershipSpecEndpoint(obj.endpoint),
    'externalId': obj.externalId,
    'infrastructureType': obj.infrastructureType,
    'location': obj.location,
    'resourceID': obj.resourceId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional. How to identify workloads from this Membership. See the documentation on Workload Identity for more details: https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity
 *
 * @schema GkeHubMembershipSpecAuthority
 */
export interface GkeHubMembershipSpecAuthority {
  /**
   * Optional. A JSON Web Token (JWT) issuer URI. `issuer` must start with `https://` and be a valid URL with length <2000 characters. If set, then Google will allow valid OIDC tokens from this issuer to authenticate within the workload_identity_pool. OIDC discovery will be performed on this URI to validate tokens from the issuer. Clearing `issuer` disables Workload Identity. `issuer` cannot be directly modified; it must be cleared (and Workload Identity disabled) before using a new issuer (and re-enabling Workload Identity).
   *
   * @schema GkeHubMembershipSpecAuthority#issuer
   */
  readonly issuer?: string;

}

/**
 * Converts an object of type 'GkeHubMembershipSpecAuthority' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GkeHubMembershipSpecAuthority(obj: GkeHubMembershipSpecAuthority | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'issuer': obj.issuer,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional. Endpoint information to reach this member.
 *
 * @schema GkeHubMembershipSpecEndpoint
 */
export interface GkeHubMembershipSpecEndpoint {
  /**
   * Optional. GKE-specific information. Only present if this Membership is a GKE cluster.
   *
   * @schema GkeHubMembershipSpecEndpoint#gkeCluster
   */
  readonly gkeCluster?: GkeHubMembershipSpecEndpointGkeCluster;

  /**
   * Optional. The in-cluster Kubernetes Resources that should be applied for a correctly registered cluster, in the steady state. These resources: * Ensure that the cluster is exclusively registered to one and only one Hub Membership. * Propagate Workload Pool Information available in the Membership Authority field. * Ensure proper initial configuration of default Hub Features.
   *
   * @schema GkeHubMembershipSpecEndpoint#kubernetesResource
   */
  readonly kubernetesResource?: GkeHubMembershipSpecEndpointKubernetesResource;

}

/**
 * Converts an object of type 'GkeHubMembershipSpecEndpoint' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GkeHubMembershipSpecEndpoint(obj: GkeHubMembershipSpecEndpoint | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'gkeCluster': toJson_GkeHubMembershipSpecEndpointGkeCluster(obj.gkeCluster),
    'kubernetesResource': toJson_GkeHubMembershipSpecEndpointKubernetesResource(obj.kubernetesResource),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional. GKE-specific information. Only present if this Membership is a GKE cluster.
 *
 * @schema GkeHubMembershipSpecEndpointGkeCluster
 */
export interface GkeHubMembershipSpecEndpointGkeCluster {
  /**
   * @schema GkeHubMembershipSpecEndpointGkeCluster#resourceRef
   */
  readonly resourceRef?: GkeHubMembershipSpecEndpointGkeClusterResourceRef;

}

/**
 * Converts an object of type 'GkeHubMembershipSpecEndpointGkeCluster' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GkeHubMembershipSpecEndpointGkeCluster(obj: GkeHubMembershipSpecEndpointGkeCluster | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resourceRef': toJson_GkeHubMembershipSpecEndpointGkeClusterResourceRef(obj.resourceRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional. The in-cluster Kubernetes Resources that should be applied for a correctly registered cluster, in the steady state. These resources: * Ensure that the cluster is exclusively registered to one and only one Hub Membership. * Propagate Workload Pool Information available in the Membership Authority field. * Ensure proper initial configuration of default Hub Features.
 *
 * @schema GkeHubMembershipSpecEndpointKubernetesResource
 */
export interface GkeHubMembershipSpecEndpointKubernetesResource {
  /**
   * Input only. The YAML representation of the Membership CR. This field is ignored for GKE clusters where Hub can read the CR directly. Callers should provide the CR that is currently present in the cluster during CreateMembership or UpdateMembership, or leave this field empty if none exists. The CR manifest is used to validate the cluster has not been registered with another Membership.
   *
   * @schema GkeHubMembershipSpecEndpointKubernetesResource#membershipCrManifest
   */
  readonly membershipCrManifest?: string;

  /**
   * Optional. Options for Kubernetes resource generation.
   *
   * @schema GkeHubMembershipSpecEndpointKubernetesResource#resourceOptions
   */
  readonly resourceOptions?: GkeHubMembershipSpecEndpointKubernetesResourceResourceOptions;

}

/**
 * Converts an object of type 'GkeHubMembershipSpecEndpointKubernetesResource' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GkeHubMembershipSpecEndpointKubernetesResource(obj: GkeHubMembershipSpecEndpointKubernetesResource | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'membershipCrManifest': obj.membershipCrManifest,
    'resourceOptions': toJson_GkeHubMembershipSpecEndpointKubernetesResourceResourceOptions(obj.resourceOptions),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema GkeHubMembershipSpecEndpointGkeClusterResourceRef
 */
export interface GkeHubMembershipSpecEndpointGkeClusterResourceRef {
  /**
   * Immutable. Self-link of the GCP resource for the GKE cluster. For example: //container.googleapis.com/projects/my-project/locations/us-west1-a/clusters/my-cluster Zonal clusters are also supported.
   *
   * Allowed value: The `selfLink` field of a `ContainerCluster` resource.
   *
   * @schema GkeHubMembershipSpecEndpointGkeClusterResourceRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema GkeHubMembershipSpecEndpointGkeClusterResourceRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema GkeHubMembershipSpecEndpointGkeClusterResourceRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'GkeHubMembershipSpecEndpointGkeClusterResourceRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GkeHubMembershipSpecEndpointGkeClusterResourceRef(obj: GkeHubMembershipSpecEndpointGkeClusterResourceRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional. Options for Kubernetes resource generation.
 *
 * @schema GkeHubMembershipSpecEndpointKubernetesResourceResourceOptions
 */
export interface GkeHubMembershipSpecEndpointKubernetesResourceResourceOptions {
  /**
   * Optional. The Connect agent version to use for connect_resources. Defaults to the latest GKE Connect version. The version must be a currently supported version, obsolete versions will be rejected.
   *
   * @default the latest GKE Connect version. The version must be a currently supported version, obsolete versions will be rejected.
   * @schema GkeHubMembershipSpecEndpointKubernetesResourceResourceOptions#connectVersion
   */
  readonly connectVersion?: string;

  /**
   * Optional. Use `apiextensions/v1beta1` instead of `apiextensions/v1` for CustomResourceDefinition resources. This option should be set for clusters with Kubernetes apiserver versions <1.16.
   *
   * @schema GkeHubMembershipSpecEndpointKubernetesResourceResourceOptions#v1beta1Crd
   */
  readonly v1Beta1Crd?: boolean;

}

/**
 * Converts an object of type 'GkeHubMembershipSpecEndpointKubernetesResourceResourceOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GkeHubMembershipSpecEndpointKubernetesResourceResourceOptions(obj: GkeHubMembershipSpecEndpointKubernetesResourceResourceOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'connectVersion': obj.connectVersion,
    'v1beta1Crd': obj.v1Beta1Crd,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

