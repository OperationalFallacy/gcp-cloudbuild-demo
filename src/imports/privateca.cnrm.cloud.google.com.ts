// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 *
 *
 * @schema PrivateCACAPool
 */
export class PrivateCacaPool extends ApiObject {
  /**
   * Returns the apiVersion and kind for "PrivateCACAPool"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'privateca.cnrm.cloud.google.com/v1beta1',
    kind: 'PrivateCACAPool',
  }

  /**
   * Renders a Kubernetes manifest for "PrivateCACAPool".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: PrivateCacaPoolProps): any {
    return {
      ...PrivateCacaPool.GVK,
      ...toJson_PrivateCacaPoolProps(props),
    };
  }

  /**
   * Defines a "PrivateCACAPool" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: PrivateCacaPoolProps) {
    super(scope, id, {
      ...PrivateCacaPool.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...PrivateCacaPool.GVK,
      ...toJson_PrivateCacaPoolProps(resolved),
    };
  }
}

/**
 * @schema PrivateCACAPool
 */
export interface PrivateCacaPoolProps {
  /**
   * @schema PrivateCACAPool#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema PrivateCACAPool#spec
   */
  readonly spec: PrivateCacaPoolSpec;

}

/**
 * Converts an object of type 'PrivateCacaPoolProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCacaPoolProps(obj: PrivateCacaPoolProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_PrivateCacaPoolSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PrivateCacaPoolSpec
 */
export interface PrivateCacaPoolSpec {
  /**
   * Optional. The IssuancePolicy to control how Certificates will be issued from this CaPool.
   *
   * @schema PrivateCacaPoolSpec#issuancePolicy
   */
  readonly issuancePolicy?: PrivateCacaPoolSpecIssuancePolicy;

  /**
   * Immutable. The location for the resource
   *
   * @schema PrivateCacaPoolSpec#location
   */
  readonly location: string;

  /**
   * Immutable. The Project that this resource belongs to.
   *
   * @schema PrivateCacaPoolSpec#projectRef
   */
  readonly projectRef: PrivateCacaPoolSpecProjectRef;

  /**
   * Optional. The PublishingOptions to follow when issuing Certificates from any CertificateAuthority in this CaPool.
   *
   * @schema PrivateCacaPoolSpec#publishingOptions
   */
  readonly publishingOptions?: PrivateCacaPoolSpecPublishingOptions;

  /**
   * Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
   *
   * @schema PrivateCacaPoolSpec#resourceID
   */
  readonly resourceId?: string;

  /**
   * Immutable. Required. Immutable. The Tier of this CaPool. Possible values: TIER_UNSPECIFIED, ENTERPRISE, DEVOPS
   *
   * @schema PrivateCacaPoolSpec#tier
   */
  readonly tier: string;

}

/**
 * Converts an object of type 'PrivateCacaPoolSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCacaPoolSpec(obj: PrivateCacaPoolSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'issuancePolicy': toJson_PrivateCacaPoolSpecIssuancePolicy(obj.issuancePolicy),
    'location': obj.location,
    'projectRef': toJson_PrivateCacaPoolSpecProjectRef(obj.projectRef),
    'publishingOptions': toJson_PrivateCacaPoolSpecPublishingOptions(obj.publishingOptions),
    'resourceID': obj.resourceId,
    'tier': obj.tier,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional. The IssuancePolicy to control how Certificates will be issued from this CaPool.
 *
 * @schema PrivateCacaPoolSpecIssuancePolicy
 */
export interface PrivateCacaPoolSpecIssuancePolicy {
  /**
   * Optional. If specified, then only methods allowed in the IssuanceModes may be used to issue Certificates.
   *
   * @schema PrivateCacaPoolSpecIssuancePolicy#allowedIssuanceModes
   */
  readonly allowedIssuanceModes?: PrivateCacaPoolSpecIssuancePolicyAllowedIssuanceModes;

  /**
   * Optional. If any AllowedKeyType is specified, then the certificate request's public key must match one of the key types listed here. Otherwise, any key may be used.
   *
   * @schema PrivateCacaPoolSpecIssuancePolicy#allowedKeyTypes
   */
  readonly allowedKeyTypes?: PrivateCacaPoolSpecIssuancePolicyAllowedKeyTypes[];

  /**
   * Optional. A set of X.509 values that will be applied to all certificates issued through this CaPool. If a certificate request includes conflicting values for the same properties, they will be overwritten by the values defined here. If a certificate request uses a CertificateTemplate that defines conflicting predefined_values for the same properties, the certificate issuance request will fail.
   *
   * @schema PrivateCacaPoolSpecIssuancePolicy#baselineValues
   */
  readonly baselineValues?: PrivateCacaPoolSpecIssuancePolicyBaselineValues;

  /**
   * Optional. Describes constraints on identities that may appear in Certificates issued through this CaPool. If this is omitted, then this CaPool will not add restrictions on a certificate's identity.
   *
   * @schema PrivateCacaPoolSpecIssuancePolicy#identityConstraints
   */
  readonly identityConstraints?: PrivateCacaPoolSpecIssuancePolicyIdentityConstraints;

  /**
   * Optional. The maximum lifetime allowed for issued Certificates. Note that if the issuing CertificateAuthority expires before a Certificate's requested maximum_lifetime, the effective lifetime will be explicitly truncated to match it.
   *
   * @schema PrivateCacaPoolSpecIssuancePolicy#maximumLifetime
   */
  readonly maximumLifetime?: string;

  /**
   * Optional. Describes the set of X.509 extensions that may appear in a Certificate issued through this CaPool. If a certificate request sets extensions that don't appear in the passthrough_extensions, those extensions will be dropped. If a certificate request uses a CertificateTemplate with predefined_values that don't appear here, the certificate issuance request will fail. If this is omitted, then this CaPool will not add restrictions on a certificate's X.509 extensions. These constraints do not apply to X.509 extensions set in this CaPool's baseline_values.
   *
   * @schema PrivateCacaPoolSpecIssuancePolicy#passthroughExtensions
   */
  readonly passthroughExtensions?: PrivateCacaPoolSpecIssuancePolicyPassthroughExtensions;

}

/**
 * Converts an object of type 'PrivateCacaPoolSpecIssuancePolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCacaPoolSpecIssuancePolicy(obj: PrivateCacaPoolSpecIssuancePolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'allowedIssuanceModes': toJson_PrivateCacaPoolSpecIssuancePolicyAllowedIssuanceModes(obj.allowedIssuanceModes),
    'allowedKeyTypes': obj.allowedKeyTypes?.map(y => toJson_PrivateCacaPoolSpecIssuancePolicyAllowedKeyTypes(y)),
    'baselineValues': toJson_PrivateCacaPoolSpecIssuancePolicyBaselineValues(obj.baselineValues),
    'identityConstraints': toJson_PrivateCacaPoolSpecIssuancePolicyIdentityConstraints(obj.identityConstraints),
    'maximumLifetime': obj.maximumLifetime,
    'passthroughExtensions': toJson_PrivateCacaPoolSpecIssuancePolicyPassthroughExtensions(obj.passthroughExtensions),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. The Project that this resource belongs to.
 *
 * @schema PrivateCacaPoolSpecProjectRef
 */
export interface PrivateCacaPoolSpecProjectRef {
  /**
   * The project for the resource
   *
   * Allowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).
   *
   * @schema PrivateCacaPoolSpecProjectRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema PrivateCacaPoolSpecProjectRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema PrivateCacaPoolSpecProjectRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'PrivateCacaPoolSpecProjectRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCacaPoolSpecProjectRef(obj: PrivateCacaPoolSpecProjectRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional. The PublishingOptions to follow when issuing Certificates from any CertificateAuthority in this CaPool.
 *
 * @schema PrivateCacaPoolSpecPublishingOptions
 */
export interface PrivateCacaPoolSpecPublishingOptions {
  /**
   * Optional. When true, publishes each CertificateAuthority's CA certificate and includes its URL in the "Authority Information Access" X.509 extension in all issued Certificates. If this is false, the CA certificate will not be published and the corresponding X.509 extension will not be written in issued certificates.
   *
   * @schema PrivateCacaPoolSpecPublishingOptions#publishCaCert
   */
  readonly publishCaCert?: boolean;

  /**
   * Optional. When true, publishes each CertificateAuthority's CRL and includes its URL in the "CRL Distribution Points" X.509 extension in all issued Certificates. If this is false, CRLs will not be published and the corresponding X.509 extension will not be written in issued certificates. CRLs will expire 7 days from their creation. However, we will rebuild daily. CRLs are also rebuilt shortly after a certificate is revoked.
   *
   * @schema PrivateCacaPoolSpecPublishingOptions#publishCrl
   */
  readonly publishCrl?: boolean;

}

/**
 * Converts an object of type 'PrivateCacaPoolSpecPublishingOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCacaPoolSpecPublishingOptions(obj: PrivateCacaPoolSpecPublishingOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'publishCaCert': obj.publishCaCert,
    'publishCrl': obj.publishCrl,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional. If specified, then only methods allowed in the IssuanceModes may be used to issue Certificates.
 *
 * @schema PrivateCacaPoolSpecIssuancePolicyAllowedIssuanceModes
 */
export interface PrivateCacaPoolSpecIssuancePolicyAllowedIssuanceModes {
  /**
   * Optional. When true, allows callers to create Certificates by specifying a CertificateConfig.
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyAllowedIssuanceModes#allowConfigBasedIssuance
   */
  readonly allowConfigBasedIssuance?: boolean;

  /**
   * Optional. When true, allows callers to create Certificates by specifying a CSR.
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyAllowedIssuanceModes#allowCsrBasedIssuance
   */
  readonly allowCsrBasedIssuance?: boolean;

}

/**
 * Converts an object of type 'PrivateCacaPoolSpecIssuancePolicyAllowedIssuanceModes' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCacaPoolSpecIssuancePolicyAllowedIssuanceModes(obj: PrivateCacaPoolSpecIssuancePolicyAllowedIssuanceModes | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'allowConfigBasedIssuance': obj.allowConfigBasedIssuance,
    'allowCsrBasedIssuance': obj.allowCsrBasedIssuance,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PrivateCacaPoolSpecIssuancePolicyAllowedKeyTypes
 */
export interface PrivateCacaPoolSpecIssuancePolicyAllowedKeyTypes {
  /**
   * Represents an allowed Elliptic Curve key type.
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyAllowedKeyTypes#ellipticCurve
   */
  readonly ellipticCurve?: PrivateCacaPoolSpecIssuancePolicyAllowedKeyTypesEllipticCurve;

  /**
   * Represents an allowed RSA key type.
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyAllowedKeyTypes#rsa
   */
  readonly rsa?: PrivateCacaPoolSpecIssuancePolicyAllowedKeyTypesRsa;

}

/**
 * Converts an object of type 'PrivateCacaPoolSpecIssuancePolicyAllowedKeyTypes' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCacaPoolSpecIssuancePolicyAllowedKeyTypes(obj: PrivateCacaPoolSpecIssuancePolicyAllowedKeyTypes | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ellipticCurve': toJson_PrivateCacaPoolSpecIssuancePolicyAllowedKeyTypesEllipticCurve(obj.ellipticCurve),
    'rsa': toJson_PrivateCacaPoolSpecIssuancePolicyAllowedKeyTypesRsa(obj.rsa),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional. A set of X.509 values that will be applied to all certificates issued through this CaPool. If a certificate request includes conflicting values for the same properties, they will be overwritten by the values defined here. If a certificate request uses a CertificateTemplate that defines conflicting predefined_values for the same properties, the certificate issuance request will fail.
 *
 * @schema PrivateCacaPoolSpecIssuancePolicyBaselineValues
 */
export interface PrivateCacaPoolSpecIssuancePolicyBaselineValues {
  /**
   * Optional. Describes custom X.509 extensions.
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyBaselineValues#additionalExtensions
   */
  readonly additionalExtensions?: PrivateCacaPoolSpecIssuancePolicyBaselineValuesAdditionalExtensions[];

  /**
   * Optional. Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the "Authority Information Access" extension in the certificate.
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyBaselineValues#aiaOcspServers
   */
  readonly aiaOcspServers?: string[];

  /**
   * Optional. Describes options in this X509Parameters that are relevant in a CA certificate.
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyBaselineValues#caOptions
   */
  readonly caOptions?: PrivateCacaPoolSpecIssuancePolicyBaselineValuesCaOptions;

  /**
   * Optional. Indicates the intended use for keys that correspond to a certificate.
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyBaselineValues#keyUsage
   */
  readonly keyUsage?: PrivateCacaPoolSpecIssuancePolicyBaselineValuesKeyUsage;

  /**
   * Optional. Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyBaselineValues#policyIds
   */
  readonly policyIds?: PrivateCacaPoolSpecIssuancePolicyBaselineValuesPolicyIds[];

}

/**
 * Converts an object of type 'PrivateCacaPoolSpecIssuancePolicyBaselineValues' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCacaPoolSpecIssuancePolicyBaselineValues(obj: PrivateCacaPoolSpecIssuancePolicyBaselineValues | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'additionalExtensions': obj.additionalExtensions?.map(y => toJson_PrivateCacaPoolSpecIssuancePolicyBaselineValuesAdditionalExtensions(y)),
    'aiaOcspServers': obj.aiaOcspServers?.map(y => y),
    'caOptions': toJson_PrivateCacaPoolSpecIssuancePolicyBaselineValuesCaOptions(obj.caOptions),
    'keyUsage': toJson_PrivateCacaPoolSpecIssuancePolicyBaselineValuesKeyUsage(obj.keyUsage),
    'policyIds': obj.policyIds?.map(y => toJson_PrivateCacaPoolSpecIssuancePolicyBaselineValuesPolicyIds(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional. Describes constraints on identities that may appear in Certificates issued through this CaPool. If this is omitted, then this CaPool will not add restrictions on a certificate's identity.
 *
 * @schema PrivateCacaPoolSpecIssuancePolicyIdentityConstraints
 */
export interface PrivateCacaPoolSpecIssuancePolicyIdentityConstraints {
  /**
   * Required. If this is true, the SubjectAltNames extension may be copied from a certificate request into the signed certificate. Otherwise, the requested SubjectAltNames will be discarded.
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyIdentityConstraints#allowSubjectAltNamesPassthrough
   */
  readonly allowSubjectAltNamesPassthrough: boolean;

  /**
   * Required. If this is true, the Subject field may be copied from a certificate request into the signed certificate. Otherwise, the requested Subject will be discarded.
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyIdentityConstraints#allowSubjectPassthrough
   */
  readonly allowSubjectPassthrough: boolean;

  /**
   * Optional. A CEL expression that may be used to validate the resolved X.509 Subject and/or Subject Alternative Name before a certificate is signed. To see the full allowed syntax and some examples, see https://cloud.google.com/certificate-authority-service/docs/using-cel
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyIdentityConstraints#celExpression
   */
  readonly celExpression?: PrivateCacaPoolSpecIssuancePolicyIdentityConstraintsCelExpression;

}

/**
 * Converts an object of type 'PrivateCacaPoolSpecIssuancePolicyIdentityConstraints' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCacaPoolSpecIssuancePolicyIdentityConstraints(obj: PrivateCacaPoolSpecIssuancePolicyIdentityConstraints | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'allowSubjectAltNamesPassthrough': obj.allowSubjectAltNamesPassthrough,
    'allowSubjectPassthrough': obj.allowSubjectPassthrough,
    'celExpression': toJson_PrivateCacaPoolSpecIssuancePolicyIdentityConstraintsCelExpression(obj.celExpression),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional. Describes the set of X.509 extensions that may appear in a Certificate issued through this CaPool. If a certificate request sets extensions that don't appear in the passthrough_extensions, those extensions will be dropped. If a certificate request uses a CertificateTemplate with predefined_values that don't appear here, the certificate issuance request will fail. If this is omitted, then this CaPool will not add restrictions on a certificate's X.509 extensions. These constraints do not apply to X.509 extensions set in this CaPool's baseline_values.
 *
 * @schema PrivateCacaPoolSpecIssuancePolicyPassthroughExtensions
 */
export interface PrivateCacaPoolSpecIssuancePolicyPassthroughExtensions {
  /**
   * Optional. A set of ObjectIds identifying custom X.509 extensions. Will be combined with known_extensions to determine the full set of X.509 extensions.
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyPassthroughExtensions#additionalExtensions
   */
  readonly additionalExtensions?: PrivateCacaPoolSpecIssuancePolicyPassthroughExtensionsAdditionalExtensions[];

  /**
   * Optional. A set of named X.509 extensions. Will be combined with additional_extensions to determine the full set of X.509 extensions.
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyPassthroughExtensions#knownExtensions
   */
  readonly knownExtensions?: string[];

}

/**
 * Converts an object of type 'PrivateCacaPoolSpecIssuancePolicyPassthroughExtensions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCacaPoolSpecIssuancePolicyPassthroughExtensions(obj: PrivateCacaPoolSpecIssuancePolicyPassthroughExtensions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'additionalExtensions': obj.additionalExtensions?.map(y => toJson_PrivateCacaPoolSpecIssuancePolicyPassthroughExtensionsAdditionalExtensions(y)),
    'knownExtensions': obj.knownExtensions?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Represents an allowed Elliptic Curve key type.
 *
 * @schema PrivateCacaPoolSpecIssuancePolicyAllowedKeyTypesEllipticCurve
 */
export interface PrivateCacaPoolSpecIssuancePolicyAllowedKeyTypesEllipticCurve {
  /**
   * Optional. A signature algorithm that must be used. If this is omitted, any EC-based signature algorithm will be allowed. Possible values: EC_SIGNATURE_ALGORITHM_UNSPECIFIED, ECDSA_P256, ECDSA_P384, EDDSA_25519
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyAllowedKeyTypesEllipticCurve#signatureAlgorithm
   */
  readonly signatureAlgorithm?: string;

}

/**
 * Converts an object of type 'PrivateCacaPoolSpecIssuancePolicyAllowedKeyTypesEllipticCurve' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCacaPoolSpecIssuancePolicyAllowedKeyTypesEllipticCurve(obj: PrivateCacaPoolSpecIssuancePolicyAllowedKeyTypesEllipticCurve | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'signatureAlgorithm': obj.signatureAlgorithm,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Represents an allowed RSA key type.
 *
 * @schema PrivateCacaPoolSpecIssuancePolicyAllowedKeyTypesRsa
 */
export interface PrivateCacaPoolSpecIssuancePolicyAllowedKeyTypesRsa {
  /**
   * Optional. The maximum allowed RSA modulus size, in bits. If this is not set, or if set to zero, the service will not enforce an explicit upper bound on RSA modulus sizes.
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyAllowedKeyTypesRsa#maxModulusSize
   */
  readonly maxModulusSize?: number;

  /**
   * Optional. The minimum allowed RSA modulus size, in bits. If this is not set, or if set to zero, the service-level min RSA modulus size will continue to apply.
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyAllowedKeyTypesRsa#minModulusSize
   */
  readonly minModulusSize?: number;

}

/**
 * Converts an object of type 'PrivateCacaPoolSpecIssuancePolicyAllowedKeyTypesRsa' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCacaPoolSpecIssuancePolicyAllowedKeyTypesRsa(obj: PrivateCacaPoolSpecIssuancePolicyAllowedKeyTypesRsa | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'maxModulusSize': obj.maxModulusSize,
    'minModulusSize': obj.minModulusSize,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PrivateCacaPoolSpecIssuancePolicyBaselineValuesAdditionalExtensions
 */
export interface PrivateCacaPoolSpecIssuancePolicyBaselineValuesAdditionalExtensions {
  /**
   * Optional. Indicates whether or not this extension is critical (i.e., if the client does not know how to handle this extension, the client should consider this to be an error).
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyBaselineValuesAdditionalExtensions#critical
   */
  readonly critical?: boolean;

  /**
   * Required. The OID for this X.509 extension.
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyBaselineValuesAdditionalExtensions#objectId
   */
  readonly objectId: PrivateCacaPoolSpecIssuancePolicyBaselineValuesAdditionalExtensionsObjectId;

  /**
   * Required. The value of this X.509 extension.
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyBaselineValuesAdditionalExtensions#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'PrivateCacaPoolSpecIssuancePolicyBaselineValuesAdditionalExtensions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCacaPoolSpecIssuancePolicyBaselineValuesAdditionalExtensions(obj: PrivateCacaPoolSpecIssuancePolicyBaselineValuesAdditionalExtensions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'critical': obj.critical,
    'objectId': toJson_PrivateCacaPoolSpecIssuancePolicyBaselineValuesAdditionalExtensionsObjectId(obj.objectId),
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional. Describes options in this X509Parameters that are relevant in a CA certificate.
 *
 * @schema PrivateCacaPoolSpecIssuancePolicyBaselineValuesCaOptions
 */
export interface PrivateCacaPoolSpecIssuancePolicyBaselineValuesCaOptions {
  /**
   * Optional. Refers to the "CA" X.509 extension, which is a boolean value. When this value is missing, the extension will be omitted from the CA certificate.
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyBaselineValuesCaOptions#isCa
   */
  readonly isCa?: boolean;

  /**
   * Optional. Refers to the path length restriction X.509 extension. For a CA certificate, this value describes the depth of subordinate CA certificates that are allowed. If this value is less than 0, the request will fail. If this value is missing, the max path length will be omitted from the CA certificate.
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyBaselineValuesCaOptions#maxIssuerPathLength
   */
  readonly maxIssuerPathLength?: number;

  /**
   * Optional. When true, the "path length constraint" in Basic Constraints extension will be set to 0. if both max_issuer_path_length and zero_max_issuer_path_length are unset, the max path length will be omitted from the CA certificate.
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyBaselineValuesCaOptions#zeroMaxIssuerPathLength
   */
  readonly zeroMaxIssuerPathLength?: boolean;

}

/**
 * Converts an object of type 'PrivateCacaPoolSpecIssuancePolicyBaselineValuesCaOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCacaPoolSpecIssuancePolicyBaselineValuesCaOptions(obj: PrivateCacaPoolSpecIssuancePolicyBaselineValuesCaOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'isCa': obj.isCa,
    'maxIssuerPathLength': obj.maxIssuerPathLength,
    'zeroMaxIssuerPathLength': obj.zeroMaxIssuerPathLength,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional. Indicates the intended use for keys that correspond to a certificate.
 *
 * @schema PrivateCacaPoolSpecIssuancePolicyBaselineValuesKeyUsage
 */
export interface PrivateCacaPoolSpecIssuancePolicyBaselineValuesKeyUsage {
  /**
   * Describes high-level ways in which a key may be used.
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyBaselineValuesKeyUsage#baseKeyUsage
   */
  readonly baseKeyUsage?: PrivateCacaPoolSpecIssuancePolicyBaselineValuesKeyUsageBaseKeyUsage;

  /**
   * Detailed scenarios in which a key may be used.
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyBaselineValuesKeyUsage#extendedKeyUsage
   */
  readonly extendedKeyUsage?: PrivateCacaPoolSpecIssuancePolicyBaselineValuesKeyUsageExtendedKeyUsage;

  /**
   * Used to describe extended key usages that are not listed in the KeyUsage.ExtendedKeyUsageOptions message.
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyBaselineValuesKeyUsage#unknownExtendedKeyUsages
   */
  readonly unknownExtendedKeyUsages?: PrivateCacaPoolSpecIssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsages[];

}

/**
 * Converts an object of type 'PrivateCacaPoolSpecIssuancePolicyBaselineValuesKeyUsage' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCacaPoolSpecIssuancePolicyBaselineValuesKeyUsage(obj: PrivateCacaPoolSpecIssuancePolicyBaselineValuesKeyUsage | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'baseKeyUsage': toJson_PrivateCacaPoolSpecIssuancePolicyBaselineValuesKeyUsageBaseKeyUsage(obj.baseKeyUsage),
    'extendedKeyUsage': toJson_PrivateCacaPoolSpecIssuancePolicyBaselineValuesKeyUsageExtendedKeyUsage(obj.extendedKeyUsage),
    'unknownExtendedKeyUsages': obj.unknownExtendedKeyUsages?.map(y => toJson_PrivateCacaPoolSpecIssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsages(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PrivateCacaPoolSpecIssuancePolicyBaselineValuesPolicyIds
 */
export interface PrivateCacaPoolSpecIssuancePolicyBaselineValuesPolicyIds {
  /**
   * Required. The parts of an OID path. The most significant parts of the path come first.
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyBaselineValuesPolicyIds#objectIdPath
   */
  readonly objectIdPath: number[];

}

/**
 * Converts an object of type 'PrivateCacaPoolSpecIssuancePolicyBaselineValuesPolicyIds' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCacaPoolSpecIssuancePolicyBaselineValuesPolicyIds(obj: PrivateCacaPoolSpecIssuancePolicyBaselineValuesPolicyIds | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'objectIdPath': obj.objectIdPath?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional. A CEL expression that may be used to validate the resolved X.509 Subject and/or Subject Alternative Name before a certificate is signed. To see the full allowed syntax and some examples, see https://cloud.google.com/certificate-authority-service/docs/using-cel
 *
 * @schema PrivateCacaPoolSpecIssuancePolicyIdentityConstraintsCelExpression
 */
export interface PrivateCacaPoolSpecIssuancePolicyIdentityConstraintsCelExpression {
  /**
   * Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyIdentityConstraintsCelExpression#description
   */
  readonly description?: string;

  /**
   * Textual representation of an expression in Common Expression Language syntax.
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyIdentityConstraintsCelExpression#expression
   */
  readonly expression?: string;

  /**
   * Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyIdentityConstraintsCelExpression#location
   */
  readonly location?: string;

  /**
   * Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyIdentityConstraintsCelExpression#title
   */
  readonly title?: string;

}

/**
 * Converts an object of type 'PrivateCacaPoolSpecIssuancePolicyIdentityConstraintsCelExpression' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCacaPoolSpecIssuancePolicyIdentityConstraintsCelExpression(obj: PrivateCacaPoolSpecIssuancePolicyIdentityConstraintsCelExpression | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'description': obj.description,
    'expression': obj.expression,
    'location': obj.location,
    'title': obj.title,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PrivateCacaPoolSpecIssuancePolicyPassthroughExtensionsAdditionalExtensions
 */
export interface PrivateCacaPoolSpecIssuancePolicyPassthroughExtensionsAdditionalExtensions {
  /**
   * Required. The parts of an OID path. The most significant parts of the path come first.
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyPassthroughExtensionsAdditionalExtensions#objectIdPath
   */
  readonly objectIdPath: number[];

}

/**
 * Converts an object of type 'PrivateCacaPoolSpecIssuancePolicyPassthroughExtensionsAdditionalExtensions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCacaPoolSpecIssuancePolicyPassthroughExtensionsAdditionalExtensions(obj: PrivateCacaPoolSpecIssuancePolicyPassthroughExtensionsAdditionalExtensions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'objectIdPath': obj.objectIdPath?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Required. The OID for this X.509 extension.
 *
 * @schema PrivateCacaPoolSpecIssuancePolicyBaselineValuesAdditionalExtensionsObjectId
 */
export interface PrivateCacaPoolSpecIssuancePolicyBaselineValuesAdditionalExtensionsObjectId {
  /**
   * Required. The parts of an OID path. The most significant parts of the path come first.
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyBaselineValuesAdditionalExtensionsObjectId#objectIdPath
   */
  readonly objectIdPath: number[];

}

/**
 * Converts an object of type 'PrivateCacaPoolSpecIssuancePolicyBaselineValuesAdditionalExtensionsObjectId' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCacaPoolSpecIssuancePolicyBaselineValuesAdditionalExtensionsObjectId(obj: PrivateCacaPoolSpecIssuancePolicyBaselineValuesAdditionalExtensionsObjectId | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'objectIdPath': obj.objectIdPath?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes high-level ways in which a key may be used.
 *
 * @schema PrivateCacaPoolSpecIssuancePolicyBaselineValuesKeyUsageBaseKeyUsage
 */
export interface PrivateCacaPoolSpecIssuancePolicyBaselineValuesKeyUsageBaseKeyUsage {
  /**
   * The key may be used to sign certificates.
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyBaselineValuesKeyUsageBaseKeyUsage#certSign
   */
  readonly certSign?: boolean;

  /**
   * The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyBaselineValuesKeyUsageBaseKeyUsage#contentCommitment
   */
  readonly contentCommitment?: boolean;

  /**
   * The key may be used sign certificate revocation lists.
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyBaselineValuesKeyUsageBaseKeyUsage#crlSign
   */
  readonly crlSign?: boolean;

  /**
   * The key may be used to encipher data.
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyBaselineValuesKeyUsageBaseKeyUsage#dataEncipherment
   */
  readonly dataEncipherment?: boolean;

  /**
   * The key may be used to decipher only.
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyBaselineValuesKeyUsageBaseKeyUsage#decipherOnly
   */
  readonly decipherOnly?: boolean;

  /**
   * The key may be used for digital signatures.
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyBaselineValuesKeyUsageBaseKeyUsage#digitalSignature
   */
  readonly digitalSignature?: boolean;

  /**
   * The key may be used to encipher only.
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyBaselineValuesKeyUsageBaseKeyUsage#encipherOnly
   */
  readonly encipherOnly?: boolean;

  /**
   * The key may be used in a key agreement protocol.
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyBaselineValuesKeyUsageBaseKeyUsage#keyAgreement
   */
  readonly keyAgreement?: boolean;

  /**
   * The key may be used to encipher other keys.
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyBaselineValuesKeyUsageBaseKeyUsage#keyEncipherment
   */
  readonly keyEncipherment?: boolean;

}

/**
 * Converts an object of type 'PrivateCacaPoolSpecIssuancePolicyBaselineValuesKeyUsageBaseKeyUsage' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCacaPoolSpecIssuancePolicyBaselineValuesKeyUsageBaseKeyUsage(obj: PrivateCacaPoolSpecIssuancePolicyBaselineValuesKeyUsageBaseKeyUsage | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'certSign': obj.certSign,
    'contentCommitment': obj.contentCommitment,
    'crlSign': obj.crlSign,
    'dataEncipherment': obj.dataEncipherment,
    'decipherOnly': obj.decipherOnly,
    'digitalSignature': obj.digitalSignature,
    'encipherOnly': obj.encipherOnly,
    'keyAgreement': obj.keyAgreement,
    'keyEncipherment': obj.keyEncipherment,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Detailed scenarios in which a key may be used.
 *
 * @schema PrivateCacaPoolSpecIssuancePolicyBaselineValuesKeyUsageExtendedKeyUsage
 */
export interface PrivateCacaPoolSpecIssuancePolicyBaselineValuesKeyUsageExtendedKeyUsage {
  /**
   * Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyBaselineValuesKeyUsageExtendedKeyUsage#clientAuth
   */
  readonly clientAuth?: boolean;

  /**
   * Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyBaselineValuesKeyUsageExtendedKeyUsage#codeSigning
   */
  readonly codeSigning?: boolean;

  /**
   * Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyBaselineValuesKeyUsageExtendedKeyUsage#emailProtection
   */
  readonly emailProtection?: boolean;

  /**
   * Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyBaselineValuesKeyUsageExtendedKeyUsage#ocspSigning
   */
  readonly ocspSigning?: boolean;

  /**
   * Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyBaselineValuesKeyUsageExtendedKeyUsage#serverAuth
   */
  readonly serverAuth?: boolean;

  /**
   * Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyBaselineValuesKeyUsageExtendedKeyUsage#timeStamping
   */
  readonly timeStamping?: boolean;

}

/**
 * Converts an object of type 'PrivateCacaPoolSpecIssuancePolicyBaselineValuesKeyUsageExtendedKeyUsage' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCacaPoolSpecIssuancePolicyBaselineValuesKeyUsageExtendedKeyUsage(obj: PrivateCacaPoolSpecIssuancePolicyBaselineValuesKeyUsageExtendedKeyUsage | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'clientAuth': obj.clientAuth,
    'codeSigning': obj.codeSigning,
    'emailProtection': obj.emailProtection,
    'ocspSigning': obj.ocspSigning,
    'serverAuth': obj.serverAuth,
    'timeStamping': obj.timeStamping,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PrivateCacaPoolSpecIssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsages
 */
export interface PrivateCacaPoolSpecIssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsages {
  /**
   * Required. The parts of an OID path. The most significant parts of the path come first.
   *
   * @schema PrivateCacaPoolSpecIssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsages#objectIdPath
   */
  readonly objectIdPath: number[];

}

/**
 * Converts an object of type 'PrivateCacaPoolSpecIssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsages' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCacaPoolSpecIssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsages(obj: PrivateCacaPoolSpecIssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsages | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'objectIdPath': obj.objectIdPath?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema PrivateCACertificate
 */
export class PrivateCaCertificate extends ApiObject {
  /**
   * Returns the apiVersion and kind for "PrivateCACertificate"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'privateca.cnrm.cloud.google.com/v1beta1',
    kind: 'PrivateCACertificate',
  }

  /**
   * Renders a Kubernetes manifest for "PrivateCACertificate".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: PrivateCaCertificateProps): any {
    return {
      ...PrivateCaCertificate.GVK,
      ...toJson_PrivateCaCertificateProps(props),
    };
  }

  /**
   * Defines a "PrivateCACertificate" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: PrivateCaCertificateProps) {
    super(scope, id, {
      ...PrivateCaCertificate.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...PrivateCaCertificate.GVK,
      ...toJson_PrivateCaCertificateProps(resolved),
    };
  }
}

/**
 * @schema PrivateCACertificate
 */
export interface PrivateCaCertificateProps {
  /**
   * @schema PrivateCACertificate#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema PrivateCACertificate#spec
   */
  readonly spec: PrivateCaCertificateSpec;

}

/**
 * Converts an object of type 'PrivateCaCertificateProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateProps(obj: PrivateCaCertificateProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_PrivateCaCertificateSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PrivateCaCertificateSpec
 */
export interface PrivateCaCertificateSpec {
  /**
   * Immutable.
   *
   * @schema PrivateCaCertificateSpec#caPoolRef
   */
  readonly caPoolRef: PrivateCaCertificateSpecCaPoolRef;

  /**
   * Immutable.
   *
   * @schema PrivateCaCertificateSpec#certificateAuthorityRef
   */
  readonly certificateAuthorityRef?: PrivateCaCertificateSpecCertificateAuthorityRef;

  /**
   * Immutable.
   *
   * @schema PrivateCaCertificateSpec#certificateTemplateRef
   */
  readonly certificateTemplateRef?: PrivateCaCertificateSpecCertificateTemplateRef;

  /**
   * Immutable. Immutable. A description of the certificate and key that does not require X.509 or ASN.1.
   *
   * @schema PrivateCaCertificateSpec#config
   */
  readonly config?: PrivateCaCertificateSpecConfig;

  /**
   * Immutable. Required. Immutable. The desired lifetime of a certificate. Used to create the "not_before_time" and "not_after_time" fields inside an X.509 certificate. Note that the lifetime may be truncated if it would extend past the life of any certificate authority in the issuing chain.
   *
   * @schema PrivateCaCertificateSpec#lifetime
   */
  readonly lifetime: string;

  /**
   * Immutable. The location for the resource
   *
   * @schema PrivateCaCertificateSpec#location
   */
  readonly location: string;

  /**
   * Immutable. Immutable. A pem-encoded X.509 certificate signing request (CSR).
   *
   * @schema PrivateCaCertificateSpec#pemCsr
   */
  readonly pemCsr?: string;

  /**
   * Immutable. The Project that this resource belongs to.
   *
   * @schema PrivateCaCertificateSpec#projectRef
   */
  readonly projectRef: PrivateCaCertificateSpecProjectRef;

  /**
   * Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
   *
   * @schema PrivateCaCertificateSpec#resourceID
   */
  readonly resourceId?: string;

  /**
   * Immutable. Immutable. Specifies how the Certificate's identity fields are to be decided. If this is omitted, the `DEFAULT` subject mode will be used. Possible values: SUBJECT_REQUEST_MODE_UNSPECIFIED, DEFAULT, REFLECTED_SPIFFE
   *
   * @schema PrivateCaCertificateSpec#subjectMode
   */
  readonly subjectMode?: string;

}

/**
 * Converts an object of type 'PrivateCaCertificateSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateSpec(obj: PrivateCaCertificateSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'caPoolRef': toJson_PrivateCaCertificateSpecCaPoolRef(obj.caPoolRef),
    'certificateAuthorityRef': toJson_PrivateCaCertificateSpecCertificateAuthorityRef(obj.certificateAuthorityRef),
    'certificateTemplateRef': toJson_PrivateCaCertificateSpecCertificateTemplateRef(obj.certificateTemplateRef),
    'config': toJson_PrivateCaCertificateSpecConfig(obj.config),
    'lifetime': obj.lifetime,
    'location': obj.location,
    'pemCsr': obj.pemCsr,
    'projectRef': toJson_PrivateCaCertificateSpecProjectRef(obj.projectRef),
    'resourceID': obj.resourceId,
    'subjectMode': obj.subjectMode,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable.
 *
 * @schema PrivateCaCertificateSpecCaPoolRef
 */
export interface PrivateCaCertificateSpecCaPoolRef {
  /**
   * The ca_pool for the resource
   *
   * Allowed value: The Google Cloud resource name of a `PrivateCACAPool` resource (format: `projects/{{project}}/locations/{{location}}/caPools/{{name}}`).
   *
   * @schema PrivateCaCertificateSpecCaPoolRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema PrivateCaCertificateSpecCaPoolRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema PrivateCaCertificateSpecCaPoolRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'PrivateCaCertificateSpecCaPoolRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateSpecCaPoolRef(obj: PrivateCaCertificateSpecCaPoolRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable.
 *
 * @schema PrivateCaCertificateSpecCertificateAuthorityRef
 */
export interface PrivateCaCertificateSpecCertificateAuthorityRef {
  /**
   * The certificate authority for the resource
   *
   * Allowed value: The Google Cloud resource name of a `PrivateCACertificateAuthority` resource (format: `projects/{{project}}/locations/{{location}}/caPools/{{ca_pool}}/certificateAuthorities/{{name}}`).
   *
   * @schema PrivateCaCertificateSpecCertificateAuthorityRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema PrivateCaCertificateSpecCertificateAuthorityRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema PrivateCaCertificateSpecCertificateAuthorityRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'PrivateCaCertificateSpecCertificateAuthorityRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateSpecCertificateAuthorityRef(obj: PrivateCaCertificateSpecCertificateAuthorityRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable.
 *
 * @schema PrivateCaCertificateSpecCertificateTemplateRef
 */
export interface PrivateCaCertificateSpecCertificateTemplateRef {
  /**
   * Immutable. The resource name for a CertificateTemplate used to issue this certificate, in the format `projects/_/locations/_/certificateTemplates/*`. If this is specified, the caller must have the necessary permission to use this template. If this is omitted, no template will be used. This template must be in the same location as the Certificate.
   *
   * Allowed value: The `selfLink` field of a `PrivateCACertificateTemplate` resource.
   *
   * @schema PrivateCaCertificateSpecCertificateTemplateRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema PrivateCaCertificateSpecCertificateTemplateRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema PrivateCaCertificateSpecCertificateTemplateRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'PrivateCaCertificateSpecCertificateTemplateRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateSpecCertificateTemplateRef(obj: PrivateCaCertificateSpecCertificateTemplateRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Immutable. A description of the certificate and key that does not require X.509 or ASN.1.
 *
 * @schema PrivateCaCertificateSpecConfig
 */
export interface PrivateCaCertificateSpecConfig {
  /**
   * Immutable. Optional. The public key that corresponds to this config. This is, for example, used when issuing Certificates, but not when creating a self-signed CertificateAuthority or CertificateAuthority CSR.
   *
   * @schema PrivateCaCertificateSpecConfig#publicKey
   */
  readonly publicKey?: PrivateCaCertificateSpecConfigPublicKey;

  /**
   * Immutable. Required. Specifies some of the values in a certificate that are related to the subject.
   *
   * @schema PrivateCaCertificateSpecConfig#subjectConfig
   */
  readonly subjectConfig: PrivateCaCertificateSpecConfigSubjectConfig;

  /**
   * Immutable. Required. Describes how some of the technical X.509 fields in a certificate should be populated.
   *
   * @schema PrivateCaCertificateSpecConfig#x509Config
   */
  readonly x509Config: PrivateCaCertificateSpecConfigX509Config;

}

/**
 * Converts an object of type 'PrivateCaCertificateSpecConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateSpecConfig(obj: PrivateCaCertificateSpecConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'publicKey': toJson_PrivateCaCertificateSpecConfigPublicKey(obj.publicKey),
    'subjectConfig': toJson_PrivateCaCertificateSpecConfigSubjectConfig(obj.subjectConfig),
    'x509Config': toJson_PrivateCaCertificateSpecConfigX509Config(obj.x509Config),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. The Project that this resource belongs to.
 *
 * @schema PrivateCaCertificateSpecProjectRef
 */
export interface PrivateCaCertificateSpecProjectRef {
  /**
   * The project for the resource
   *
   * Allowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).
   *
   * @schema PrivateCaCertificateSpecProjectRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema PrivateCaCertificateSpecProjectRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema PrivateCaCertificateSpecProjectRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'PrivateCaCertificateSpecProjectRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateSpecProjectRef(obj: PrivateCaCertificateSpecProjectRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Optional. The public key that corresponds to this config. This is, for example, used when issuing Certificates, but not when creating a self-signed CertificateAuthority or CertificateAuthority CSR.
 *
 * @schema PrivateCaCertificateSpecConfigPublicKey
 */
export interface PrivateCaCertificateSpecConfigPublicKey {
  /**
   * Immutable. Required. The format of the public key. Possible values: KEY_FORMAT_UNSPECIFIED, PEM
   *
   * @schema PrivateCaCertificateSpecConfigPublicKey#format
   */
  readonly format: string;

  /**
   * Immutable. Required. A public key. The padding and encoding must match with the `KeyFormat` value specified for the `format` field.
   *
   * @schema PrivateCaCertificateSpecConfigPublicKey#key
   */
  readonly key: string;

}

/**
 * Converts an object of type 'PrivateCaCertificateSpecConfigPublicKey' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateSpecConfigPublicKey(obj: PrivateCaCertificateSpecConfigPublicKey | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'format': obj.format,
    'key': obj.key,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Required. Specifies some of the values in a certificate that are related to the subject.
 *
 * @schema PrivateCaCertificateSpecConfigSubjectConfig
 */
export interface PrivateCaCertificateSpecConfigSubjectConfig {
  /**
   * Immutable. Required. Contains distinguished name fields such as the common name, location and organization.
   *
   * @schema PrivateCaCertificateSpecConfigSubjectConfig#subject
   */
  readonly subject: PrivateCaCertificateSpecConfigSubjectConfigSubject;

  /**
   * Immutable. Optional. The subject alternative name fields.
   *
   * @schema PrivateCaCertificateSpecConfigSubjectConfig#subjectAltName
   */
  readonly subjectAltName?: PrivateCaCertificateSpecConfigSubjectConfigSubjectAltName;

}

/**
 * Converts an object of type 'PrivateCaCertificateSpecConfigSubjectConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateSpecConfigSubjectConfig(obj: PrivateCaCertificateSpecConfigSubjectConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'subject': toJson_PrivateCaCertificateSpecConfigSubjectConfigSubject(obj.subject),
    'subjectAltName': toJson_PrivateCaCertificateSpecConfigSubjectConfigSubjectAltName(obj.subjectAltName),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Required. Describes how some of the technical X.509 fields in a certificate should be populated.
 *
 * @schema PrivateCaCertificateSpecConfigX509Config
 */
export interface PrivateCaCertificateSpecConfigX509Config {
  /**
   * Immutable. Optional. Describes custom X.509 extensions.
   *
   * @schema PrivateCaCertificateSpecConfigX509Config#additionalExtensions
   */
  readonly additionalExtensions?: PrivateCaCertificateSpecConfigX509ConfigAdditionalExtensions[];

  /**
   * Immutable. Optional. Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the "Authority Information Access" extension in the certificate.
   *
   * @schema PrivateCaCertificateSpecConfigX509Config#aiaOcspServers
   */
  readonly aiaOcspServers?: string[];

  /**
   * Immutable. Optional. Describes options in this X509Parameters that are relevant in a CA certificate.
   *
   * @schema PrivateCaCertificateSpecConfigX509Config#caOptions
   */
  readonly caOptions?: PrivateCaCertificateSpecConfigX509ConfigCaOptions;

  /**
   * Immutable. Optional. Indicates the intended use for keys that correspond to a certificate.
   *
   * @schema PrivateCaCertificateSpecConfigX509Config#keyUsage
   */
  readonly keyUsage?: PrivateCaCertificateSpecConfigX509ConfigKeyUsage;

  /**
   * Immutable. Optional. Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
   *
   * @schema PrivateCaCertificateSpecConfigX509Config#policyIds
   */
  readonly policyIds?: PrivateCaCertificateSpecConfigX509ConfigPolicyIds[];

}

/**
 * Converts an object of type 'PrivateCaCertificateSpecConfigX509Config' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateSpecConfigX509Config(obj: PrivateCaCertificateSpecConfigX509Config | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'additionalExtensions': obj.additionalExtensions?.map(y => toJson_PrivateCaCertificateSpecConfigX509ConfigAdditionalExtensions(y)),
    'aiaOcspServers': obj.aiaOcspServers?.map(y => y),
    'caOptions': toJson_PrivateCaCertificateSpecConfigX509ConfigCaOptions(obj.caOptions),
    'keyUsage': toJson_PrivateCaCertificateSpecConfigX509ConfigKeyUsage(obj.keyUsage),
    'policyIds': obj.policyIds?.map(y => toJson_PrivateCaCertificateSpecConfigX509ConfigPolicyIds(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Required. Contains distinguished name fields such as the common name, location and organization.
 *
 * @schema PrivateCaCertificateSpecConfigSubjectConfigSubject
 */
export interface PrivateCaCertificateSpecConfigSubjectConfigSubject {
  /**
   * Immutable. The "common name" of the subject.
   *
   * @schema PrivateCaCertificateSpecConfigSubjectConfigSubject#commonName
   */
  readonly commonName?: string;

  /**
   * Immutable. The country code of the subject.
   *
   * @schema PrivateCaCertificateSpecConfigSubjectConfigSubject#countryCode
   */
  readonly countryCode?: string;

  /**
   * Immutable. The locality or city of the subject.
   *
   * @schema PrivateCaCertificateSpecConfigSubjectConfigSubject#locality
   */
  readonly locality?: string;

  /**
   * Immutable. The organization of the subject.
   *
   * @schema PrivateCaCertificateSpecConfigSubjectConfigSubject#organization
   */
  readonly organization?: string;

  /**
   * Immutable. The organizational_unit of the subject.
   *
   * @schema PrivateCaCertificateSpecConfigSubjectConfigSubject#organizationalUnit
   */
  readonly organizationalUnit?: string;

  /**
   * Immutable. The postal code of the subject.
   *
   * @schema PrivateCaCertificateSpecConfigSubjectConfigSubject#postalCode
   */
  readonly postalCode?: string;

  /**
   * Immutable. The province, territory, or regional state of the subject.
   *
   * @schema PrivateCaCertificateSpecConfigSubjectConfigSubject#province
   */
  readonly province?: string;

  /**
   * Immutable. The street address of the subject.
   *
   * @schema PrivateCaCertificateSpecConfigSubjectConfigSubject#streetAddress
   */
  readonly streetAddress?: string;

}

/**
 * Converts an object of type 'PrivateCaCertificateSpecConfigSubjectConfigSubject' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateSpecConfigSubjectConfigSubject(obj: PrivateCaCertificateSpecConfigSubjectConfigSubject | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'commonName': obj.commonName,
    'countryCode': obj.countryCode,
    'locality': obj.locality,
    'organization': obj.organization,
    'organizationalUnit': obj.organizationalUnit,
    'postalCode': obj.postalCode,
    'province': obj.province,
    'streetAddress': obj.streetAddress,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Optional. The subject alternative name fields.
 *
 * @schema PrivateCaCertificateSpecConfigSubjectConfigSubjectAltName
 */
export interface PrivateCaCertificateSpecConfigSubjectConfigSubjectAltName {
  /**
   * Immutable. Contains only valid, fully-qualified host names.
   *
   * @schema PrivateCaCertificateSpecConfigSubjectConfigSubjectAltName#dnsNames
   */
  readonly dnsNames?: string[];

  /**
   * Immutable. Contains only valid RFC 2822 E-mail addresses.
   *
   * @schema PrivateCaCertificateSpecConfigSubjectConfigSubjectAltName#emailAddresses
   */
  readonly emailAddresses?: string[];

  /**
   * Immutable. Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.
   *
   * @schema PrivateCaCertificateSpecConfigSubjectConfigSubjectAltName#ipAddresses
   */
  readonly ipAddresses?: string[];

  /**
   * Immutable. Contains only valid RFC 3986 URIs.
   *
   * @schema PrivateCaCertificateSpecConfigSubjectConfigSubjectAltName#uris
   */
  readonly uris?: string[];

}

/**
 * Converts an object of type 'PrivateCaCertificateSpecConfigSubjectConfigSubjectAltName' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateSpecConfigSubjectConfigSubjectAltName(obj: PrivateCaCertificateSpecConfigSubjectConfigSubjectAltName | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'dnsNames': obj.dnsNames?.map(y => y),
    'emailAddresses': obj.emailAddresses?.map(y => y),
    'ipAddresses': obj.ipAddresses?.map(y => y),
    'uris': obj.uris?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PrivateCaCertificateSpecConfigX509ConfigAdditionalExtensions
 */
export interface PrivateCaCertificateSpecConfigX509ConfigAdditionalExtensions {
  /**
   * Immutable. Optional. Indicates whether or not this extension is critical (i.e., if the client does not know how to handle this extension, the client should consider this to be an error).
   *
   * @schema PrivateCaCertificateSpecConfigX509ConfigAdditionalExtensions#critical
   */
  readonly critical?: boolean;

  /**
   * Immutable. Required. The OID for this X.509 extension.
   *
   * @schema PrivateCaCertificateSpecConfigX509ConfigAdditionalExtensions#objectId
   */
  readonly objectId: PrivateCaCertificateSpecConfigX509ConfigAdditionalExtensionsObjectId;

  /**
   * Immutable. Required. The value of this X.509 extension.
   *
   * @schema PrivateCaCertificateSpecConfigX509ConfigAdditionalExtensions#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'PrivateCaCertificateSpecConfigX509ConfigAdditionalExtensions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateSpecConfigX509ConfigAdditionalExtensions(obj: PrivateCaCertificateSpecConfigX509ConfigAdditionalExtensions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'critical': obj.critical,
    'objectId': toJson_PrivateCaCertificateSpecConfigX509ConfigAdditionalExtensionsObjectId(obj.objectId),
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Optional. Describes options in this X509Parameters that are relevant in a CA certificate.
 *
 * @schema PrivateCaCertificateSpecConfigX509ConfigCaOptions
 */
export interface PrivateCaCertificateSpecConfigX509ConfigCaOptions {
  /**
   * Immutable. Optional. When true, the "CA" in Basic Constraints extension will be set to true.
   *
   * @schema PrivateCaCertificateSpecConfigX509ConfigCaOptions#isCa
   */
  readonly isCa?: boolean;

  /**
   * Immutable. Optional. Refers to the "path length constraint" in Basic Constraints extension. For a CA certificate, this value describes the depth of subordinate CA certificates that are allowed. If this value is less than 0, the request will fail.
   *
   * @schema PrivateCaCertificateSpecConfigX509ConfigCaOptions#maxIssuerPathLength
   */
  readonly maxIssuerPathLength?: number;

  /**
   * Immutable. Optional. When true, the "CA" in Basic Constraints extension will be set to false. If both `is_ca` and `non_ca` are unset, the extension will be omitted from the CA certificate.
   *
   * @schema PrivateCaCertificateSpecConfigX509ConfigCaOptions#nonCa
   */
  readonly nonCa?: boolean;

  /**
   * Immutable. Optional. When true, the "path length constraint" in Basic Constraints extension will be set to 0. if both max_issuer_path_length and zero_max_issuer_path_length are unset, the max path length will be omitted from the CA certificate.
   *
   * @schema PrivateCaCertificateSpecConfigX509ConfigCaOptions#zeroMaxIssuerPathLength
   */
  readonly zeroMaxIssuerPathLength?: boolean;

}

/**
 * Converts an object of type 'PrivateCaCertificateSpecConfigX509ConfigCaOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateSpecConfigX509ConfigCaOptions(obj: PrivateCaCertificateSpecConfigX509ConfigCaOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'isCa': obj.isCa,
    'maxIssuerPathLength': obj.maxIssuerPathLength,
    'nonCa': obj.nonCa,
    'zeroMaxIssuerPathLength': obj.zeroMaxIssuerPathLength,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Optional. Indicates the intended use for keys that correspond to a certificate.
 *
 * @schema PrivateCaCertificateSpecConfigX509ConfigKeyUsage
 */
export interface PrivateCaCertificateSpecConfigX509ConfigKeyUsage {
  /**
   * Immutable. Describes high-level ways in which a key may be used.
   *
   * @schema PrivateCaCertificateSpecConfigX509ConfigKeyUsage#baseKeyUsage
   */
  readonly baseKeyUsage?: PrivateCaCertificateSpecConfigX509ConfigKeyUsageBaseKeyUsage;

  /**
   * Immutable. Detailed scenarios in which a key may be used.
   *
   * @schema PrivateCaCertificateSpecConfigX509ConfigKeyUsage#extendedKeyUsage
   */
  readonly extendedKeyUsage?: PrivateCaCertificateSpecConfigX509ConfigKeyUsageExtendedKeyUsage;

  /**
   * Immutable. Used to describe extended key usages that are not listed in the KeyUsage.ExtendedKeyUsageOptions message.
   *
   * @schema PrivateCaCertificateSpecConfigX509ConfigKeyUsage#unknownExtendedKeyUsages
   */
  readonly unknownExtendedKeyUsages?: PrivateCaCertificateSpecConfigX509ConfigKeyUsageUnknownExtendedKeyUsages[];

}

/**
 * Converts an object of type 'PrivateCaCertificateSpecConfigX509ConfigKeyUsage' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateSpecConfigX509ConfigKeyUsage(obj: PrivateCaCertificateSpecConfigX509ConfigKeyUsage | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'baseKeyUsage': toJson_PrivateCaCertificateSpecConfigX509ConfigKeyUsageBaseKeyUsage(obj.baseKeyUsage),
    'extendedKeyUsage': toJson_PrivateCaCertificateSpecConfigX509ConfigKeyUsageExtendedKeyUsage(obj.extendedKeyUsage),
    'unknownExtendedKeyUsages': obj.unknownExtendedKeyUsages?.map(y => toJson_PrivateCaCertificateSpecConfigX509ConfigKeyUsageUnknownExtendedKeyUsages(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PrivateCaCertificateSpecConfigX509ConfigPolicyIds
 */
export interface PrivateCaCertificateSpecConfigX509ConfigPolicyIds {
  /**
   * Immutable. Required. The parts of an OID path. The most significant parts of the path come first.
   *
   * @schema PrivateCaCertificateSpecConfigX509ConfigPolicyIds#objectIdPath
   */
  readonly objectIdPath: number[];

}

/**
 * Converts an object of type 'PrivateCaCertificateSpecConfigX509ConfigPolicyIds' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateSpecConfigX509ConfigPolicyIds(obj: PrivateCaCertificateSpecConfigX509ConfigPolicyIds | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'objectIdPath': obj.objectIdPath?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Required. The OID for this X.509 extension.
 *
 * @schema PrivateCaCertificateSpecConfigX509ConfigAdditionalExtensionsObjectId
 */
export interface PrivateCaCertificateSpecConfigX509ConfigAdditionalExtensionsObjectId {
  /**
   * Immutable. Required. The parts of an OID path. The most significant parts of the path come first.
   *
   * @schema PrivateCaCertificateSpecConfigX509ConfigAdditionalExtensionsObjectId#objectIdPath
   */
  readonly objectIdPath: number[];

}

/**
 * Converts an object of type 'PrivateCaCertificateSpecConfigX509ConfigAdditionalExtensionsObjectId' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateSpecConfigX509ConfigAdditionalExtensionsObjectId(obj: PrivateCaCertificateSpecConfigX509ConfigAdditionalExtensionsObjectId | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'objectIdPath': obj.objectIdPath?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Describes high-level ways in which a key may be used.
 *
 * @schema PrivateCaCertificateSpecConfigX509ConfigKeyUsageBaseKeyUsage
 */
export interface PrivateCaCertificateSpecConfigX509ConfigKeyUsageBaseKeyUsage {
  /**
   * Immutable. The key may be used to sign certificates.
   *
   * @schema PrivateCaCertificateSpecConfigX509ConfigKeyUsageBaseKeyUsage#certSign
   */
  readonly certSign?: boolean;

  /**
   * Immutable. The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
   *
   * @schema PrivateCaCertificateSpecConfigX509ConfigKeyUsageBaseKeyUsage#contentCommitment
   */
  readonly contentCommitment?: boolean;

  /**
   * Immutable. The key may be used sign certificate revocation lists.
   *
   * @schema PrivateCaCertificateSpecConfigX509ConfigKeyUsageBaseKeyUsage#crlSign
   */
  readonly crlSign?: boolean;

  /**
   * Immutable. The key may be used to encipher data.
   *
   * @schema PrivateCaCertificateSpecConfigX509ConfigKeyUsageBaseKeyUsage#dataEncipherment
   */
  readonly dataEncipherment?: boolean;

  /**
   * Immutable. The key may be used to decipher only.
   *
   * @schema PrivateCaCertificateSpecConfigX509ConfigKeyUsageBaseKeyUsage#decipherOnly
   */
  readonly decipherOnly?: boolean;

  /**
   * Immutable. The key may be used for digital signatures.
   *
   * @schema PrivateCaCertificateSpecConfigX509ConfigKeyUsageBaseKeyUsage#digitalSignature
   */
  readonly digitalSignature?: boolean;

  /**
   * Immutable. The key may be used to encipher only.
   *
   * @schema PrivateCaCertificateSpecConfigX509ConfigKeyUsageBaseKeyUsage#encipherOnly
   */
  readonly encipherOnly?: boolean;

  /**
   * Immutable. The key may be used in a key agreement protocol.
   *
   * @schema PrivateCaCertificateSpecConfigX509ConfigKeyUsageBaseKeyUsage#keyAgreement
   */
  readonly keyAgreement?: boolean;

  /**
   * Immutable. The key may be used to encipher other keys.
   *
   * @schema PrivateCaCertificateSpecConfigX509ConfigKeyUsageBaseKeyUsage#keyEncipherment
   */
  readonly keyEncipherment?: boolean;

}

/**
 * Converts an object of type 'PrivateCaCertificateSpecConfigX509ConfigKeyUsageBaseKeyUsage' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateSpecConfigX509ConfigKeyUsageBaseKeyUsage(obj: PrivateCaCertificateSpecConfigX509ConfigKeyUsageBaseKeyUsage | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'certSign': obj.certSign,
    'contentCommitment': obj.contentCommitment,
    'crlSign': obj.crlSign,
    'dataEncipherment': obj.dataEncipherment,
    'decipherOnly': obj.decipherOnly,
    'digitalSignature': obj.digitalSignature,
    'encipherOnly': obj.encipherOnly,
    'keyAgreement': obj.keyAgreement,
    'keyEncipherment': obj.keyEncipherment,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Detailed scenarios in which a key may be used.
 *
 * @schema PrivateCaCertificateSpecConfigX509ConfigKeyUsageExtendedKeyUsage
 */
export interface PrivateCaCertificateSpecConfigX509ConfigKeyUsageExtendedKeyUsage {
  /**
   * Immutable. Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
   *
   * @schema PrivateCaCertificateSpecConfigX509ConfigKeyUsageExtendedKeyUsage#clientAuth
   */
  readonly clientAuth?: boolean;

  /**
   * Immutable. Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
   *
   * @schema PrivateCaCertificateSpecConfigX509ConfigKeyUsageExtendedKeyUsage#codeSigning
   */
  readonly codeSigning?: boolean;

  /**
   * Immutable. Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
   *
   * @schema PrivateCaCertificateSpecConfigX509ConfigKeyUsageExtendedKeyUsage#emailProtection
   */
  readonly emailProtection?: boolean;

  /**
   * Immutable. Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
   *
   * @schema PrivateCaCertificateSpecConfigX509ConfigKeyUsageExtendedKeyUsage#ocspSigning
   */
  readonly ocspSigning?: boolean;

  /**
   * Immutable. Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
   *
   * @schema PrivateCaCertificateSpecConfigX509ConfigKeyUsageExtendedKeyUsage#serverAuth
   */
  readonly serverAuth?: boolean;

  /**
   * Immutable. Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
   *
   * @schema PrivateCaCertificateSpecConfigX509ConfigKeyUsageExtendedKeyUsage#timeStamping
   */
  readonly timeStamping?: boolean;

}

/**
 * Converts an object of type 'PrivateCaCertificateSpecConfigX509ConfigKeyUsageExtendedKeyUsage' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateSpecConfigX509ConfigKeyUsageExtendedKeyUsage(obj: PrivateCaCertificateSpecConfigX509ConfigKeyUsageExtendedKeyUsage | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'clientAuth': obj.clientAuth,
    'codeSigning': obj.codeSigning,
    'emailProtection': obj.emailProtection,
    'ocspSigning': obj.ocspSigning,
    'serverAuth': obj.serverAuth,
    'timeStamping': obj.timeStamping,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PrivateCaCertificateSpecConfigX509ConfigKeyUsageUnknownExtendedKeyUsages
 */
export interface PrivateCaCertificateSpecConfigX509ConfigKeyUsageUnknownExtendedKeyUsages {
  /**
   * Immutable. Required. The parts of an OID path. The most significant parts of the path come first.
   *
   * @schema PrivateCaCertificateSpecConfigX509ConfigKeyUsageUnknownExtendedKeyUsages#objectIdPath
   */
  readonly objectIdPath: number[];

}

/**
 * Converts an object of type 'PrivateCaCertificateSpecConfigX509ConfigKeyUsageUnknownExtendedKeyUsages' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateSpecConfigX509ConfigKeyUsageUnknownExtendedKeyUsages(obj: PrivateCaCertificateSpecConfigX509ConfigKeyUsageUnknownExtendedKeyUsages | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'objectIdPath': obj.objectIdPath?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema PrivateCACertificateAuthority
 */
export class PrivateCaCertificateAuthority extends ApiObject {
  /**
   * Returns the apiVersion and kind for "PrivateCACertificateAuthority"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'privateca.cnrm.cloud.google.com/v1beta1',
    kind: 'PrivateCACertificateAuthority',
  }

  /**
   * Renders a Kubernetes manifest for "PrivateCACertificateAuthority".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: PrivateCaCertificateAuthorityProps): any {
    return {
      ...PrivateCaCertificateAuthority.GVK,
      ...toJson_PrivateCaCertificateAuthorityProps(props),
    };
  }

  /**
   * Defines a "PrivateCACertificateAuthority" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: PrivateCaCertificateAuthorityProps) {
    super(scope, id, {
      ...PrivateCaCertificateAuthority.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...PrivateCaCertificateAuthority.GVK,
      ...toJson_PrivateCaCertificateAuthorityProps(resolved),
    };
  }
}

/**
 * @schema PrivateCACertificateAuthority
 */
export interface PrivateCaCertificateAuthorityProps {
  /**
   * @schema PrivateCACertificateAuthority#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema PrivateCACertificateAuthority#spec
   */
  readonly spec: PrivateCaCertificateAuthoritySpec;

}

/**
 * Converts an object of type 'PrivateCaCertificateAuthorityProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateAuthorityProps(obj: PrivateCaCertificateAuthorityProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_PrivateCaCertificateAuthoritySpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PrivateCaCertificateAuthoritySpec
 */
export interface PrivateCaCertificateAuthoritySpec {
  /**
   * Immutable.
   *
   * @schema PrivateCaCertificateAuthoritySpec#caPoolRef
   */
  readonly caPoolRef: PrivateCaCertificateAuthoritySpecCaPoolRef;

  /**
   * Immutable. Required. Immutable. The config used to create a self-signed X.509 certificate or CSR.
   *
   * @schema PrivateCaCertificateAuthoritySpec#config
   */
  readonly config: PrivateCaCertificateAuthoritySpecConfig;

  /**
   * Immutable.
   *
   * @schema PrivateCaCertificateAuthoritySpec#gcsBucketRef
   */
  readonly gcsBucketRef?: PrivateCaCertificateAuthoritySpecGcsBucketRef;

  /**
   * Immutable. Required. Immutable. Used when issuing certificates for this CertificateAuthority. If this CertificateAuthority is a self-signed CertificateAuthority, this key is also used to sign the self-signed CA certificate. Otherwise, it is used to sign a CSR.
   *
   * @schema PrivateCaCertificateAuthoritySpec#keySpec
   */
  readonly keySpec: PrivateCaCertificateAuthoritySpecKeySpec;

  /**
   * Immutable. Required. The desired lifetime of the CA certificate. Used to create the "not_before_time" and "not_after_time" fields inside an X.509 certificate.
   *
   * @schema PrivateCaCertificateAuthoritySpec#lifetime
   */
  readonly lifetime: string;

  /**
   * Immutable. The location for the resource
   *
   * @schema PrivateCaCertificateAuthoritySpec#location
   */
  readonly location: string;

  /**
   * Immutable. The Project that this resource belongs to.
   *
   * @schema PrivateCaCertificateAuthoritySpec#projectRef
   */
  readonly projectRef: PrivateCaCertificateAuthoritySpecProjectRef;

  /**
   * Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
   *
   * @schema PrivateCaCertificateAuthoritySpec#resourceID
   */
  readonly resourceId?: string;

  /**
   * Immutable. Required. Immutable. The Type of this CertificateAuthority. Possible values: SELF_SIGNED, SUBORDINATE
   *
   * @schema PrivateCaCertificateAuthoritySpec#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'PrivateCaCertificateAuthoritySpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateAuthoritySpec(obj: PrivateCaCertificateAuthoritySpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'caPoolRef': toJson_PrivateCaCertificateAuthoritySpecCaPoolRef(obj.caPoolRef),
    'config': toJson_PrivateCaCertificateAuthoritySpecConfig(obj.config),
    'gcsBucketRef': toJson_PrivateCaCertificateAuthoritySpecGcsBucketRef(obj.gcsBucketRef),
    'keySpec': toJson_PrivateCaCertificateAuthoritySpecKeySpec(obj.keySpec),
    'lifetime': obj.lifetime,
    'location': obj.location,
    'projectRef': toJson_PrivateCaCertificateAuthoritySpecProjectRef(obj.projectRef),
    'resourceID': obj.resourceId,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable.
 *
 * @schema PrivateCaCertificateAuthoritySpecCaPoolRef
 */
export interface PrivateCaCertificateAuthoritySpecCaPoolRef {
  /**
   * The caPool for the resource
   *
   * Allowed value: The Google Cloud resource name of a `PrivateCACAPool` resource (format: `projects/{{project}}/locations/{{location}}/caPools/{{name}}`).
   *
   * @schema PrivateCaCertificateAuthoritySpecCaPoolRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema PrivateCaCertificateAuthoritySpecCaPoolRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema PrivateCaCertificateAuthoritySpecCaPoolRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'PrivateCaCertificateAuthoritySpecCaPoolRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateAuthoritySpecCaPoolRef(obj: PrivateCaCertificateAuthoritySpecCaPoolRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Required. Immutable. The config used to create a self-signed X.509 certificate or CSR.
 *
 * @schema PrivateCaCertificateAuthoritySpecConfig
 */
export interface PrivateCaCertificateAuthoritySpecConfig {
  /**
   * Immutable. Required. Specifies some of the values in a certificate that are related to the subject.
   *
   * @schema PrivateCaCertificateAuthoritySpecConfig#subjectConfig
   */
  readonly subjectConfig: PrivateCaCertificateAuthoritySpecConfigSubjectConfig;

  /**
   * Immutable. Required. Describes how some of the technical X.509 fields in a certificate should be populated.
   *
   * @schema PrivateCaCertificateAuthoritySpecConfig#x509Config
   */
  readonly x509Config: PrivateCaCertificateAuthoritySpecConfigX509Config;

}

/**
 * Converts an object of type 'PrivateCaCertificateAuthoritySpecConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateAuthoritySpecConfig(obj: PrivateCaCertificateAuthoritySpecConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'subjectConfig': toJson_PrivateCaCertificateAuthoritySpecConfigSubjectConfig(obj.subjectConfig),
    'x509Config': toJson_PrivateCaCertificateAuthoritySpecConfigX509Config(obj.x509Config),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable.
 *
 * @schema PrivateCaCertificateAuthoritySpecGcsBucketRef
 */
export interface PrivateCaCertificateAuthoritySpecGcsBucketRef {
  /**
   * Immutable. The name of a Cloud Storage bucket where this CertificateAuthority will publish content, such as the CA certificate and CRLs. This must be a bucket name, without any prefixes (such as `gs://`) or suffixes (such as `.googleapis.com`). For example, to use a bucket named `my-bucket`, you would simply specify `my-bucket`. If not specified, a managed bucket will be created.
   *
   * Allowed value: The Google Cloud resource name of a `StorageBucket` resource (format: `{{name}}`).
   *
   * @schema PrivateCaCertificateAuthoritySpecGcsBucketRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema PrivateCaCertificateAuthoritySpecGcsBucketRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema PrivateCaCertificateAuthoritySpecGcsBucketRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'PrivateCaCertificateAuthoritySpecGcsBucketRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateAuthoritySpecGcsBucketRef(obj: PrivateCaCertificateAuthoritySpecGcsBucketRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Required. Immutable. Used when issuing certificates for this CertificateAuthority. If this CertificateAuthority is a self-signed CertificateAuthority, this key is also used to sign the self-signed CA certificate. Otherwise, it is used to sign a CSR.
 *
 * @schema PrivateCaCertificateAuthoritySpecKeySpec
 */
export interface PrivateCaCertificateAuthoritySpecKeySpec {
  /**
   * Immutable. The algorithm to use for creating a managed Cloud KMS key for a for a simplified experience. All managed keys will be have their ProtectionLevel as `HSM`. Possible values: RSA_PSS_2048_SHA256, RSA_PSS_3072_SHA256, RSA_PSS_4096_SHA256, RSA_PKCS1_2048_SHA256, RSA_PKCS1_3072_SHA256, RSA_PKCS1_4096_SHA256, EC_P256_SHA256, EC_P384_SHA384
   *
   * @schema PrivateCaCertificateAuthoritySpecKeySpec#algorithm
   */
  readonly algorithm?: string;

  /**
   * Immutable.
   *
   * @schema PrivateCaCertificateAuthoritySpecKeySpec#cloudKmsKeyVersionRef
   */
  readonly cloudKmsKeyVersionRef?: PrivateCaCertificateAuthoritySpecKeySpecCloudKmsKeyVersionRef;

}

/**
 * Converts an object of type 'PrivateCaCertificateAuthoritySpecKeySpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateAuthoritySpecKeySpec(obj: PrivateCaCertificateAuthoritySpecKeySpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'algorithm': obj.algorithm,
    'cloudKmsKeyVersionRef': toJson_PrivateCaCertificateAuthoritySpecKeySpecCloudKmsKeyVersionRef(obj.cloudKmsKeyVersionRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. The Project that this resource belongs to.
 *
 * @schema PrivateCaCertificateAuthoritySpecProjectRef
 */
export interface PrivateCaCertificateAuthoritySpecProjectRef {
  /**
   * The project for the resource
   *
   * Allowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).
   *
   * @schema PrivateCaCertificateAuthoritySpecProjectRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema PrivateCaCertificateAuthoritySpecProjectRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema PrivateCaCertificateAuthoritySpecProjectRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'PrivateCaCertificateAuthoritySpecProjectRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateAuthoritySpecProjectRef(obj: PrivateCaCertificateAuthoritySpecProjectRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Required. Specifies some of the values in a certificate that are related to the subject.
 *
 * @schema PrivateCaCertificateAuthoritySpecConfigSubjectConfig
 */
export interface PrivateCaCertificateAuthoritySpecConfigSubjectConfig {
  /**
   * Immutable. Required. Contains distinguished name fields such as the common name, location and organization.
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigSubjectConfig#subject
   */
  readonly subject: PrivateCaCertificateAuthoritySpecConfigSubjectConfigSubject;

  /**
   * Immutable. Optional. The subject alternative name fields.
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigSubjectConfig#subjectAltName
   */
  readonly subjectAltName?: PrivateCaCertificateAuthoritySpecConfigSubjectConfigSubjectAltName;

}

/**
 * Converts an object of type 'PrivateCaCertificateAuthoritySpecConfigSubjectConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateAuthoritySpecConfigSubjectConfig(obj: PrivateCaCertificateAuthoritySpecConfigSubjectConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'subject': toJson_PrivateCaCertificateAuthoritySpecConfigSubjectConfigSubject(obj.subject),
    'subjectAltName': toJson_PrivateCaCertificateAuthoritySpecConfigSubjectConfigSubjectAltName(obj.subjectAltName),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Required. Describes how some of the technical X.509 fields in a certificate should be populated.
 *
 * @schema PrivateCaCertificateAuthoritySpecConfigX509Config
 */
export interface PrivateCaCertificateAuthoritySpecConfigX509Config {
  /**
   * Immutable. Optional. Describes custom X.509 extensions.
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigX509Config#additionalExtensions
   */
  readonly additionalExtensions?: PrivateCaCertificateAuthoritySpecConfigX509ConfigAdditionalExtensions[];

  /**
   * Immutable. Optional. Describes options in this X509Parameters that are relevant in a CA certificate.
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigX509Config#caOptions
   */
  readonly caOptions?: PrivateCaCertificateAuthoritySpecConfigX509ConfigCaOptions;

  /**
   * Immutable. Optional. Indicates the intended use for keys that correspond to a certificate.
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigX509Config#keyUsage
   */
  readonly keyUsage?: PrivateCaCertificateAuthoritySpecConfigX509ConfigKeyUsage;

  /**
   * Immutable. Optional. Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigX509Config#policyIds
   */
  readonly policyIds?: PrivateCaCertificateAuthoritySpecConfigX509ConfigPolicyIds[];

}

/**
 * Converts an object of type 'PrivateCaCertificateAuthoritySpecConfigX509Config' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateAuthoritySpecConfigX509Config(obj: PrivateCaCertificateAuthoritySpecConfigX509Config | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'additionalExtensions': obj.additionalExtensions?.map(y => toJson_PrivateCaCertificateAuthoritySpecConfigX509ConfigAdditionalExtensions(y)),
    'caOptions': toJson_PrivateCaCertificateAuthoritySpecConfigX509ConfigCaOptions(obj.caOptions),
    'keyUsage': toJson_PrivateCaCertificateAuthoritySpecConfigX509ConfigKeyUsage(obj.keyUsage),
    'policyIds': obj.policyIds?.map(y => toJson_PrivateCaCertificateAuthoritySpecConfigX509ConfigPolicyIds(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable.
 *
 * @schema PrivateCaCertificateAuthoritySpecKeySpecCloudKmsKeyVersionRef
 */
export interface PrivateCaCertificateAuthoritySpecKeySpecCloudKmsKeyVersionRef {
  /**
   * The resource name for an existing Cloud KMS CryptoKeyVersion in the format `projects/_/locations/_/keyRings/_/cryptoKeys/_/cryptoKeyVersions/*`. This option enables full flexibility in the key's capabilities and properties.
   *
   * @schema PrivateCaCertificateAuthoritySpecKeySpecCloudKmsKeyVersionRef#external
   */
  readonly external?: string;

  /**
   * [WARNING] KMSCryptoKeyVersion not yet supported in Config Connector, use 'external' field to reference existing resources.
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema PrivateCaCertificateAuthoritySpecKeySpecCloudKmsKeyVersionRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema PrivateCaCertificateAuthoritySpecKeySpecCloudKmsKeyVersionRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'PrivateCaCertificateAuthoritySpecKeySpecCloudKmsKeyVersionRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateAuthoritySpecKeySpecCloudKmsKeyVersionRef(obj: PrivateCaCertificateAuthoritySpecKeySpecCloudKmsKeyVersionRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Required. Contains distinguished name fields such as the common name, location and organization.
 *
 * @schema PrivateCaCertificateAuthoritySpecConfigSubjectConfigSubject
 */
export interface PrivateCaCertificateAuthoritySpecConfigSubjectConfigSubject {
  /**
   * Immutable. The "common name" of the subject.
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigSubjectConfigSubject#commonName
   */
  readonly commonName?: string;

  /**
   * Immutable. The country code of the subject.
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigSubjectConfigSubject#countryCode
   */
  readonly countryCode?: string;

  /**
   * Immutable. The locality or city of the subject.
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigSubjectConfigSubject#locality
   */
  readonly locality?: string;

  /**
   * Immutable. The organization of the subject.
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigSubjectConfigSubject#organization
   */
  readonly organization?: string;

  /**
   * Immutable. The organizational_unit of the subject.
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigSubjectConfigSubject#organizationalUnit
   */
  readonly organizationalUnit?: string;

  /**
   * Immutable. The postal code of the subject.
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigSubjectConfigSubject#postalCode
   */
  readonly postalCode?: string;

  /**
   * Immutable. The province, territory, or regional state of the subject.
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigSubjectConfigSubject#province
   */
  readonly province?: string;

  /**
   * Immutable. The street address of the subject.
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigSubjectConfigSubject#streetAddress
   */
  readonly streetAddress?: string;

}

/**
 * Converts an object of type 'PrivateCaCertificateAuthoritySpecConfigSubjectConfigSubject' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateAuthoritySpecConfigSubjectConfigSubject(obj: PrivateCaCertificateAuthoritySpecConfigSubjectConfigSubject | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'commonName': obj.commonName,
    'countryCode': obj.countryCode,
    'locality': obj.locality,
    'organization': obj.organization,
    'organizationalUnit': obj.organizationalUnit,
    'postalCode': obj.postalCode,
    'province': obj.province,
    'streetAddress': obj.streetAddress,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Optional. The subject alternative name fields.
 *
 * @schema PrivateCaCertificateAuthoritySpecConfigSubjectConfigSubjectAltName
 */
export interface PrivateCaCertificateAuthoritySpecConfigSubjectConfigSubjectAltName {
  /**
   * Immutable. Contains additional subject alternative name values.
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigSubjectConfigSubjectAltName#customSans
   */
  readonly customSans?: PrivateCaCertificateAuthoritySpecConfigSubjectConfigSubjectAltNameCustomSans[];

  /**
   * Immutable. Contains only valid, fully-qualified host names.
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigSubjectConfigSubjectAltName#dnsNames
   */
  readonly dnsNames?: string[];

  /**
   * Immutable. Contains only valid RFC 2822 E-mail addresses.
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigSubjectConfigSubjectAltName#emailAddresses
   */
  readonly emailAddresses?: string[];

  /**
   * Immutable. Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigSubjectConfigSubjectAltName#ipAddresses
   */
  readonly ipAddresses?: string[];

  /**
   * Immutable. Contains only valid RFC 3986 URIs.
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigSubjectConfigSubjectAltName#uris
   */
  readonly uris?: string[];

}

/**
 * Converts an object of type 'PrivateCaCertificateAuthoritySpecConfigSubjectConfigSubjectAltName' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateAuthoritySpecConfigSubjectConfigSubjectAltName(obj: PrivateCaCertificateAuthoritySpecConfigSubjectConfigSubjectAltName | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'customSans': obj.customSans?.map(y => toJson_PrivateCaCertificateAuthoritySpecConfigSubjectConfigSubjectAltNameCustomSans(y)),
    'dnsNames': obj.dnsNames?.map(y => y),
    'emailAddresses': obj.emailAddresses?.map(y => y),
    'ipAddresses': obj.ipAddresses?.map(y => y),
    'uris': obj.uris?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PrivateCaCertificateAuthoritySpecConfigX509ConfigAdditionalExtensions
 */
export interface PrivateCaCertificateAuthoritySpecConfigX509ConfigAdditionalExtensions {
  /**
   * Immutable. Optional. Indicates whether or not this extension is critical (i.e., if the client does not know how to handle this extension, the client should consider this to be an error).
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigX509ConfigAdditionalExtensions#critical
   */
  readonly critical?: boolean;

  /**
   * Immutable. Required. The OID for this X.509 extension.
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigX509ConfigAdditionalExtensions#objectId
   */
  readonly objectId: PrivateCaCertificateAuthoritySpecConfigX509ConfigAdditionalExtensionsObjectId;

  /**
   * Immutable. Required. The value of this X.509 extension.
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigX509ConfigAdditionalExtensions#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'PrivateCaCertificateAuthoritySpecConfigX509ConfigAdditionalExtensions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateAuthoritySpecConfigX509ConfigAdditionalExtensions(obj: PrivateCaCertificateAuthoritySpecConfigX509ConfigAdditionalExtensions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'critical': obj.critical,
    'objectId': toJson_PrivateCaCertificateAuthoritySpecConfigX509ConfigAdditionalExtensionsObjectId(obj.objectId),
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Optional. Describes options in this X509Parameters that are relevant in a CA certificate.
 *
 * @schema PrivateCaCertificateAuthoritySpecConfigX509ConfigCaOptions
 */
export interface PrivateCaCertificateAuthoritySpecConfigX509ConfigCaOptions {
  /**
   * Immutable. Optional. Refers to the "CA" X.509 extension, which is a boolean value. When this value is missing, the extension will be omitted from the CA certificate.
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigX509ConfigCaOptions#isCa
   */
  readonly isCa?: boolean;

  /**
   * Immutable. Optional. Refers to the path length restriction X.509 extension. For a CA certificate, this value describes the depth of subordinate CA certificates that are allowed. If this value is less than 0, the request will fail. If this value is missing, the max path length will be omitted from the CA certificate.
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigX509ConfigCaOptions#maxIssuerPathLength
   */
  readonly maxIssuerPathLength?: number;

  /**
   * Immutable. Optional. When true, the "path length constraint" in Basic Constraints extension will be set to 0. if both max_issuer_path_length and zero_max_issuer_path_length are unset, the max path length will be omitted from the CA certificate.
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigX509ConfigCaOptions#zeroMaxIssuerPathLength
   */
  readonly zeroMaxIssuerPathLength?: boolean;

}

/**
 * Converts an object of type 'PrivateCaCertificateAuthoritySpecConfigX509ConfigCaOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateAuthoritySpecConfigX509ConfigCaOptions(obj: PrivateCaCertificateAuthoritySpecConfigX509ConfigCaOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'isCa': obj.isCa,
    'maxIssuerPathLength': obj.maxIssuerPathLength,
    'zeroMaxIssuerPathLength': obj.zeroMaxIssuerPathLength,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Optional. Indicates the intended use for keys that correspond to a certificate.
 *
 * @schema PrivateCaCertificateAuthoritySpecConfigX509ConfigKeyUsage
 */
export interface PrivateCaCertificateAuthoritySpecConfigX509ConfigKeyUsage {
  /**
   * Immutable. Describes high-level ways in which a key may be used.
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigX509ConfigKeyUsage#baseKeyUsage
   */
  readonly baseKeyUsage?: PrivateCaCertificateAuthoritySpecConfigX509ConfigKeyUsageBaseKeyUsage;

  /**
   * Immutable. Detailed scenarios in which a key may be used.
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigX509ConfigKeyUsage#extendedKeyUsage
   */
  readonly extendedKeyUsage?: PrivateCaCertificateAuthoritySpecConfigX509ConfigKeyUsageExtendedKeyUsage;

  /**
   * Immutable. Used to describe extended key usages that are not listed in the KeyUsage.ExtendedKeyUsageOptions message.
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigX509ConfigKeyUsage#unknownExtendedKeyUsages
   */
  readonly unknownExtendedKeyUsages?: PrivateCaCertificateAuthoritySpecConfigX509ConfigKeyUsageUnknownExtendedKeyUsages[];

}

/**
 * Converts an object of type 'PrivateCaCertificateAuthoritySpecConfigX509ConfigKeyUsage' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateAuthoritySpecConfigX509ConfigKeyUsage(obj: PrivateCaCertificateAuthoritySpecConfigX509ConfigKeyUsage | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'baseKeyUsage': toJson_PrivateCaCertificateAuthoritySpecConfigX509ConfigKeyUsageBaseKeyUsage(obj.baseKeyUsage),
    'extendedKeyUsage': toJson_PrivateCaCertificateAuthoritySpecConfigX509ConfigKeyUsageExtendedKeyUsage(obj.extendedKeyUsage),
    'unknownExtendedKeyUsages': obj.unknownExtendedKeyUsages?.map(y => toJson_PrivateCaCertificateAuthoritySpecConfigX509ConfigKeyUsageUnknownExtendedKeyUsages(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PrivateCaCertificateAuthoritySpecConfigX509ConfigPolicyIds
 */
export interface PrivateCaCertificateAuthoritySpecConfigX509ConfigPolicyIds {
  /**
   * Immutable. Required. The parts of an OID path. The most significant parts of the path come first.
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigX509ConfigPolicyIds#objectIdPath
   */
  readonly objectIdPath: number[];

}

/**
 * Converts an object of type 'PrivateCaCertificateAuthoritySpecConfigX509ConfigPolicyIds' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateAuthoritySpecConfigX509ConfigPolicyIds(obj: PrivateCaCertificateAuthoritySpecConfigX509ConfigPolicyIds | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'objectIdPath': obj.objectIdPath?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PrivateCaCertificateAuthoritySpecConfigSubjectConfigSubjectAltNameCustomSans
 */
export interface PrivateCaCertificateAuthoritySpecConfigSubjectConfigSubjectAltNameCustomSans {
  /**
   * Immutable. Optional. Indicates whether or not this extension is critical (i.e., if the client does not know how to handle this extension, the client should consider this to be an error).
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigSubjectConfigSubjectAltNameCustomSans#critical
   */
  readonly critical?: boolean;

  /**
   * Immutable. Required. The OID for this X.509 extension.
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigSubjectConfigSubjectAltNameCustomSans#objectId
   */
  readonly objectId: PrivateCaCertificateAuthoritySpecConfigSubjectConfigSubjectAltNameCustomSansObjectId;

  /**
   * Immutable. Required. The value of this X.509 extension.
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigSubjectConfigSubjectAltNameCustomSans#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'PrivateCaCertificateAuthoritySpecConfigSubjectConfigSubjectAltNameCustomSans' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateAuthoritySpecConfigSubjectConfigSubjectAltNameCustomSans(obj: PrivateCaCertificateAuthoritySpecConfigSubjectConfigSubjectAltNameCustomSans | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'critical': obj.critical,
    'objectId': toJson_PrivateCaCertificateAuthoritySpecConfigSubjectConfigSubjectAltNameCustomSansObjectId(obj.objectId),
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Required. The OID for this X.509 extension.
 *
 * @schema PrivateCaCertificateAuthoritySpecConfigX509ConfigAdditionalExtensionsObjectId
 */
export interface PrivateCaCertificateAuthoritySpecConfigX509ConfigAdditionalExtensionsObjectId {
  /**
   * Immutable. Required. The parts of an OID path. The most significant parts of the path come first.
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigX509ConfigAdditionalExtensionsObjectId#objectIdPath
   */
  readonly objectIdPath: number[];

}

/**
 * Converts an object of type 'PrivateCaCertificateAuthoritySpecConfigX509ConfigAdditionalExtensionsObjectId' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateAuthoritySpecConfigX509ConfigAdditionalExtensionsObjectId(obj: PrivateCaCertificateAuthoritySpecConfigX509ConfigAdditionalExtensionsObjectId | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'objectIdPath': obj.objectIdPath?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Describes high-level ways in which a key may be used.
 *
 * @schema PrivateCaCertificateAuthoritySpecConfigX509ConfigKeyUsageBaseKeyUsage
 */
export interface PrivateCaCertificateAuthoritySpecConfigX509ConfigKeyUsageBaseKeyUsage {
  /**
   * Immutable. The key may be used to sign certificates.
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigX509ConfigKeyUsageBaseKeyUsage#certSign
   */
  readonly certSign?: boolean;

  /**
   * Immutable. The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigX509ConfigKeyUsageBaseKeyUsage#contentCommitment
   */
  readonly contentCommitment?: boolean;

  /**
   * Immutable. The key may be used sign certificate revocation lists.
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigX509ConfigKeyUsageBaseKeyUsage#crlSign
   */
  readonly crlSign?: boolean;

  /**
   * Immutable. The key may be used to encipher data.
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigX509ConfigKeyUsageBaseKeyUsage#dataEncipherment
   */
  readonly dataEncipherment?: boolean;

  /**
   * Immutable. The key may be used to decipher only.
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigX509ConfigKeyUsageBaseKeyUsage#decipherOnly
   */
  readonly decipherOnly?: boolean;

  /**
   * Immutable. The key may be used for digital signatures.
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigX509ConfigKeyUsageBaseKeyUsage#digitalSignature
   */
  readonly digitalSignature?: boolean;

  /**
   * Immutable. The key may be used to encipher only.
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigX509ConfigKeyUsageBaseKeyUsage#encipherOnly
   */
  readonly encipherOnly?: boolean;

  /**
   * Immutable. The key may be used in a key agreement protocol.
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigX509ConfigKeyUsageBaseKeyUsage#keyAgreement
   */
  readonly keyAgreement?: boolean;

  /**
   * Immutable. The key may be used to encipher other keys.
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigX509ConfigKeyUsageBaseKeyUsage#keyEncipherment
   */
  readonly keyEncipherment?: boolean;

}

/**
 * Converts an object of type 'PrivateCaCertificateAuthoritySpecConfigX509ConfigKeyUsageBaseKeyUsage' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateAuthoritySpecConfigX509ConfigKeyUsageBaseKeyUsage(obj: PrivateCaCertificateAuthoritySpecConfigX509ConfigKeyUsageBaseKeyUsage | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'certSign': obj.certSign,
    'contentCommitment': obj.contentCommitment,
    'crlSign': obj.crlSign,
    'dataEncipherment': obj.dataEncipherment,
    'decipherOnly': obj.decipherOnly,
    'digitalSignature': obj.digitalSignature,
    'encipherOnly': obj.encipherOnly,
    'keyAgreement': obj.keyAgreement,
    'keyEncipherment': obj.keyEncipherment,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Detailed scenarios in which a key may be used.
 *
 * @schema PrivateCaCertificateAuthoritySpecConfigX509ConfigKeyUsageExtendedKeyUsage
 */
export interface PrivateCaCertificateAuthoritySpecConfigX509ConfigKeyUsageExtendedKeyUsage {
  /**
   * Immutable. Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigX509ConfigKeyUsageExtendedKeyUsage#clientAuth
   */
  readonly clientAuth?: boolean;

  /**
   * Immutable. Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigX509ConfigKeyUsageExtendedKeyUsage#codeSigning
   */
  readonly codeSigning?: boolean;

  /**
   * Immutable. Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigX509ConfigKeyUsageExtendedKeyUsage#emailProtection
   */
  readonly emailProtection?: boolean;

  /**
   * Immutable. Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigX509ConfigKeyUsageExtendedKeyUsage#ocspSigning
   */
  readonly ocspSigning?: boolean;

  /**
   * Immutable. Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigX509ConfigKeyUsageExtendedKeyUsage#serverAuth
   */
  readonly serverAuth?: boolean;

  /**
   * Immutable. Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigX509ConfigKeyUsageExtendedKeyUsage#timeStamping
   */
  readonly timeStamping?: boolean;

}

/**
 * Converts an object of type 'PrivateCaCertificateAuthoritySpecConfigX509ConfigKeyUsageExtendedKeyUsage' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateAuthoritySpecConfigX509ConfigKeyUsageExtendedKeyUsage(obj: PrivateCaCertificateAuthoritySpecConfigX509ConfigKeyUsageExtendedKeyUsage | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'clientAuth': obj.clientAuth,
    'codeSigning': obj.codeSigning,
    'emailProtection': obj.emailProtection,
    'ocspSigning': obj.ocspSigning,
    'serverAuth': obj.serverAuth,
    'timeStamping': obj.timeStamping,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PrivateCaCertificateAuthoritySpecConfigX509ConfigKeyUsageUnknownExtendedKeyUsages
 */
export interface PrivateCaCertificateAuthoritySpecConfigX509ConfigKeyUsageUnknownExtendedKeyUsages {
  /**
   * Immutable. Required. The parts of an OID path. The most significant parts of the path come first.
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigX509ConfigKeyUsageUnknownExtendedKeyUsages#objectIdPath
   */
  readonly objectIdPath: number[];

}

/**
 * Converts an object of type 'PrivateCaCertificateAuthoritySpecConfigX509ConfigKeyUsageUnknownExtendedKeyUsages' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateAuthoritySpecConfigX509ConfigKeyUsageUnknownExtendedKeyUsages(obj: PrivateCaCertificateAuthoritySpecConfigX509ConfigKeyUsageUnknownExtendedKeyUsages | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'objectIdPath': obj.objectIdPath?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Required. The OID for this X.509 extension.
 *
 * @schema PrivateCaCertificateAuthoritySpecConfigSubjectConfigSubjectAltNameCustomSansObjectId
 */
export interface PrivateCaCertificateAuthoritySpecConfigSubjectConfigSubjectAltNameCustomSansObjectId {
  /**
   * Immutable. Required. The parts of an OID path. The most significant parts of the path come first.
   *
   * @schema PrivateCaCertificateAuthoritySpecConfigSubjectConfigSubjectAltNameCustomSansObjectId#objectIdPath
   */
  readonly objectIdPath: number[];

}

/**
 * Converts an object of type 'PrivateCaCertificateAuthoritySpecConfigSubjectConfigSubjectAltNameCustomSansObjectId' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateAuthoritySpecConfigSubjectConfigSubjectAltNameCustomSansObjectId(obj: PrivateCaCertificateAuthoritySpecConfigSubjectConfigSubjectAltNameCustomSansObjectId | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'objectIdPath': obj.objectIdPath?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema PrivateCACertificateTemplate
 */
export class PrivateCaCertificateTemplate extends ApiObject {
  /**
   * Returns the apiVersion and kind for "PrivateCACertificateTemplate"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'privateca.cnrm.cloud.google.com/v1beta1',
    kind: 'PrivateCACertificateTemplate',
  }

  /**
   * Renders a Kubernetes manifest for "PrivateCACertificateTemplate".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: PrivateCaCertificateTemplateProps): any {
    return {
      ...PrivateCaCertificateTemplate.GVK,
      ...toJson_PrivateCaCertificateTemplateProps(props),
    };
  }

  /**
   * Defines a "PrivateCACertificateTemplate" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: PrivateCaCertificateTemplateProps) {
    super(scope, id, {
      ...PrivateCaCertificateTemplate.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...PrivateCaCertificateTemplate.GVK,
      ...toJson_PrivateCaCertificateTemplateProps(resolved),
    };
  }
}

/**
 * @schema PrivateCACertificateTemplate
 */
export interface PrivateCaCertificateTemplateProps {
  /**
   * @schema PrivateCACertificateTemplate#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema PrivateCACertificateTemplate#spec
   */
  readonly spec: PrivateCaCertificateTemplateSpec;

}

/**
 * Converts an object of type 'PrivateCaCertificateTemplateProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateTemplateProps(obj: PrivateCaCertificateTemplateProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_PrivateCaCertificateTemplateSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PrivateCaCertificateTemplateSpec
 */
export interface PrivateCaCertificateTemplateSpec {
  /**
   * Optional. A human-readable description of scenarios this template is intended for.
   *
   * @schema PrivateCaCertificateTemplateSpec#description
   */
  readonly description?: string;

  /**
   * Optional. Describes constraints on identities that may be appear in Certificates issued using this template. If this is omitted, then this template will not add restrictions on a certificate's identity.
   *
   * @schema PrivateCaCertificateTemplateSpec#identityConstraints
   */
  readonly identityConstraints?: PrivateCaCertificateTemplateSpecIdentityConstraints;

  /**
   * Immutable. The location for the resource
   *
   * @schema PrivateCaCertificateTemplateSpec#location
   */
  readonly location: string;

  /**
   * Optional. Describes the set of X.509 extensions that may appear in a Certificate issued using this CertificateTemplate. If a certificate request sets extensions that don't appear in the passthrough_extensions, those extensions will be dropped. If the issuing CaPool's IssuancePolicy defines baseline_values that don't appear here, the certificate issuance request will fail. If this is omitted, then this template will not add restrictions on a certificate's X.509 extensions. These constraints do not apply to X.509 extensions set in this CertificateTemplate's predefined_values.
   *
   * @schema PrivateCaCertificateTemplateSpec#passthroughExtensions
   */
  readonly passthroughExtensions?: PrivateCaCertificateTemplateSpecPassthroughExtensions;

  /**
   * Optional. A set of X.509 values that will be applied to all issued certificates that use this template. If the certificate request includes conflicting values for the same properties, they will be overwritten by the values defined here. If the issuing CaPool's IssuancePolicy defines conflicting baseline_values for the same properties, the certificate issuance request will fail.
   *
   * @schema PrivateCaCertificateTemplateSpec#predefinedValues
   */
  readonly predefinedValues?: PrivateCaCertificateTemplateSpecPredefinedValues;

  /**
   * Immutable. The Project that this resource belongs to.
   *
   * @schema PrivateCaCertificateTemplateSpec#projectRef
   */
  readonly projectRef: PrivateCaCertificateTemplateSpecProjectRef;

  /**
   * Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
   *
   * @schema PrivateCaCertificateTemplateSpec#resourceID
   */
  readonly resourceId?: string;

}

/**
 * Converts an object of type 'PrivateCaCertificateTemplateSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateTemplateSpec(obj: PrivateCaCertificateTemplateSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'description': obj.description,
    'identityConstraints': toJson_PrivateCaCertificateTemplateSpecIdentityConstraints(obj.identityConstraints),
    'location': obj.location,
    'passthroughExtensions': toJson_PrivateCaCertificateTemplateSpecPassthroughExtensions(obj.passthroughExtensions),
    'predefinedValues': toJson_PrivateCaCertificateTemplateSpecPredefinedValues(obj.predefinedValues),
    'projectRef': toJson_PrivateCaCertificateTemplateSpecProjectRef(obj.projectRef),
    'resourceID': obj.resourceId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional. Describes constraints on identities that may be appear in Certificates issued using this template. If this is omitted, then this template will not add restrictions on a certificate's identity.
 *
 * @schema PrivateCaCertificateTemplateSpecIdentityConstraints
 */
export interface PrivateCaCertificateTemplateSpecIdentityConstraints {
  /**
   * Required. If this is true, the SubjectAltNames extension may be copied from a certificate request into the signed certificate. Otherwise, the requested SubjectAltNames will be discarded.
   *
   * @schema PrivateCaCertificateTemplateSpecIdentityConstraints#allowSubjectAltNamesPassthrough
   */
  readonly allowSubjectAltNamesPassthrough: boolean;

  /**
   * Required. If this is true, the Subject field may be copied from a certificate request into the signed certificate. Otherwise, the requested Subject will be discarded.
   *
   * @schema PrivateCaCertificateTemplateSpecIdentityConstraints#allowSubjectPassthrough
   */
  readonly allowSubjectPassthrough: boolean;

  /**
   * Optional. A CEL expression that may be used to validate the resolved X.509 Subject and/or Subject Alternative Name before a certificate is signed. To see the full allowed syntax and some examples, see https://cloud.google.com/certificate-authority-service/docs/using-cel
   *
   * @schema PrivateCaCertificateTemplateSpecIdentityConstraints#celExpression
   */
  readonly celExpression?: PrivateCaCertificateTemplateSpecIdentityConstraintsCelExpression;

}

/**
 * Converts an object of type 'PrivateCaCertificateTemplateSpecIdentityConstraints' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateTemplateSpecIdentityConstraints(obj: PrivateCaCertificateTemplateSpecIdentityConstraints | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'allowSubjectAltNamesPassthrough': obj.allowSubjectAltNamesPassthrough,
    'allowSubjectPassthrough': obj.allowSubjectPassthrough,
    'celExpression': toJson_PrivateCaCertificateTemplateSpecIdentityConstraintsCelExpression(obj.celExpression),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional. Describes the set of X.509 extensions that may appear in a Certificate issued using this CertificateTemplate. If a certificate request sets extensions that don't appear in the passthrough_extensions, those extensions will be dropped. If the issuing CaPool's IssuancePolicy defines baseline_values that don't appear here, the certificate issuance request will fail. If this is omitted, then this template will not add restrictions on a certificate's X.509 extensions. These constraints do not apply to X.509 extensions set in this CertificateTemplate's predefined_values.
 *
 * @schema PrivateCaCertificateTemplateSpecPassthroughExtensions
 */
export interface PrivateCaCertificateTemplateSpecPassthroughExtensions {
  /**
   * Optional. A set of ObjectIds identifying custom X.509 extensions. Will be combined with known_extensions to determine the full set of X.509 extensions.
   *
   * @schema PrivateCaCertificateTemplateSpecPassthroughExtensions#additionalExtensions
   */
  readonly additionalExtensions?: PrivateCaCertificateTemplateSpecPassthroughExtensionsAdditionalExtensions[];

  /**
   * Optional. A set of named X.509 extensions. Will be combined with additional_extensions to determine the full set of X.509 extensions.
   *
   * @schema PrivateCaCertificateTemplateSpecPassthroughExtensions#knownExtensions
   */
  readonly knownExtensions?: string[];

}

/**
 * Converts an object of type 'PrivateCaCertificateTemplateSpecPassthroughExtensions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateTemplateSpecPassthroughExtensions(obj: PrivateCaCertificateTemplateSpecPassthroughExtensions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'additionalExtensions': obj.additionalExtensions?.map(y => toJson_PrivateCaCertificateTemplateSpecPassthroughExtensionsAdditionalExtensions(y)),
    'knownExtensions': obj.knownExtensions?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional. A set of X.509 values that will be applied to all issued certificates that use this template. If the certificate request includes conflicting values for the same properties, they will be overwritten by the values defined here. If the issuing CaPool's IssuancePolicy defines conflicting baseline_values for the same properties, the certificate issuance request will fail.
 *
 * @schema PrivateCaCertificateTemplateSpecPredefinedValues
 */
export interface PrivateCaCertificateTemplateSpecPredefinedValues {
  /**
   * Optional. Describes custom X.509 extensions.
   *
   * @schema PrivateCaCertificateTemplateSpecPredefinedValues#additionalExtensions
   */
  readonly additionalExtensions?: PrivateCaCertificateTemplateSpecPredefinedValuesAdditionalExtensions[];

  /**
   * Optional. Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the "Authority Information Access" extension in the certificate.
   *
   * @schema PrivateCaCertificateTemplateSpecPredefinedValues#aiaOcspServers
   */
  readonly aiaOcspServers?: string[];

  /**
   * Optional. Describes options in this X509Parameters that are relevant in a CA certificate.
   *
   * @schema PrivateCaCertificateTemplateSpecPredefinedValues#caOptions
   */
  readonly caOptions?: PrivateCaCertificateTemplateSpecPredefinedValuesCaOptions;

  /**
   * Optional. Indicates the intended use for keys that correspond to a certificate.
   *
   * @schema PrivateCaCertificateTemplateSpecPredefinedValues#keyUsage
   */
  readonly keyUsage?: PrivateCaCertificateTemplateSpecPredefinedValuesKeyUsage;

  /**
   * Optional. Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
   *
   * @schema PrivateCaCertificateTemplateSpecPredefinedValues#policyIds
   */
  readonly policyIds?: PrivateCaCertificateTemplateSpecPredefinedValuesPolicyIds[];

}

/**
 * Converts an object of type 'PrivateCaCertificateTemplateSpecPredefinedValues' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateTemplateSpecPredefinedValues(obj: PrivateCaCertificateTemplateSpecPredefinedValues | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'additionalExtensions': obj.additionalExtensions?.map(y => toJson_PrivateCaCertificateTemplateSpecPredefinedValuesAdditionalExtensions(y)),
    'aiaOcspServers': obj.aiaOcspServers?.map(y => y),
    'caOptions': toJson_PrivateCaCertificateTemplateSpecPredefinedValuesCaOptions(obj.caOptions),
    'keyUsage': toJson_PrivateCaCertificateTemplateSpecPredefinedValuesKeyUsage(obj.keyUsage),
    'policyIds': obj.policyIds?.map(y => toJson_PrivateCaCertificateTemplateSpecPredefinedValuesPolicyIds(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. The Project that this resource belongs to.
 *
 * @schema PrivateCaCertificateTemplateSpecProjectRef
 */
export interface PrivateCaCertificateTemplateSpecProjectRef {
  /**
   * The project for the resource
   *
   * Allowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).
   *
   * @schema PrivateCaCertificateTemplateSpecProjectRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema PrivateCaCertificateTemplateSpecProjectRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema PrivateCaCertificateTemplateSpecProjectRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'PrivateCaCertificateTemplateSpecProjectRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateTemplateSpecProjectRef(obj: PrivateCaCertificateTemplateSpecProjectRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional. A CEL expression that may be used to validate the resolved X.509 Subject and/or Subject Alternative Name before a certificate is signed. To see the full allowed syntax and some examples, see https://cloud.google.com/certificate-authority-service/docs/using-cel
 *
 * @schema PrivateCaCertificateTemplateSpecIdentityConstraintsCelExpression
 */
export interface PrivateCaCertificateTemplateSpecIdentityConstraintsCelExpression {
  /**
   * Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
   *
   * @schema PrivateCaCertificateTemplateSpecIdentityConstraintsCelExpression#description
   */
  readonly description?: string;

  /**
   * Textual representation of an expression in Common Expression Language syntax.
   *
   * @schema PrivateCaCertificateTemplateSpecIdentityConstraintsCelExpression#expression
   */
  readonly expression?: string;

  /**
   * Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
   *
   * @schema PrivateCaCertificateTemplateSpecIdentityConstraintsCelExpression#location
   */
  readonly location?: string;

  /**
   * Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
   *
   * @schema PrivateCaCertificateTemplateSpecIdentityConstraintsCelExpression#title
   */
  readonly title?: string;

}

/**
 * Converts an object of type 'PrivateCaCertificateTemplateSpecIdentityConstraintsCelExpression' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateTemplateSpecIdentityConstraintsCelExpression(obj: PrivateCaCertificateTemplateSpecIdentityConstraintsCelExpression | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'description': obj.description,
    'expression': obj.expression,
    'location': obj.location,
    'title': obj.title,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PrivateCaCertificateTemplateSpecPassthroughExtensionsAdditionalExtensions
 */
export interface PrivateCaCertificateTemplateSpecPassthroughExtensionsAdditionalExtensions {
  /**
   * Required. The parts of an OID path. The most significant parts of the path come first.
   *
   * @schema PrivateCaCertificateTemplateSpecPassthroughExtensionsAdditionalExtensions#objectIdPath
   */
  readonly objectIdPath: number[];

}

/**
 * Converts an object of type 'PrivateCaCertificateTemplateSpecPassthroughExtensionsAdditionalExtensions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateTemplateSpecPassthroughExtensionsAdditionalExtensions(obj: PrivateCaCertificateTemplateSpecPassthroughExtensionsAdditionalExtensions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'objectIdPath': obj.objectIdPath?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PrivateCaCertificateTemplateSpecPredefinedValuesAdditionalExtensions
 */
export interface PrivateCaCertificateTemplateSpecPredefinedValuesAdditionalExtensions {
  /**
   * Optional. Indicates whether or not this extension is critical (i.e., if the client does not know how to handle this extension, the client should consider this to be an error).
   *
   * @schema PrivateCaCertificateTemplateSpecPredefinedValuesAdditionalExtensions#critical
   */
  readonly critical?: boolean;

  /**
   * Required. The OID for this X.509 extension.
   *
   * @schema PrivateCaCertificateTemplateSpecPredefinedValuesAdditionalExtensions#objectId
   */
  readonly objectId: PrivateCaCertificateTemplateSpecPredefinedValuesAdditionalExtensionsObjectId;

  /**
   * Required. The value of this X.509 extension.
   *
   * @schema PrivateCaCertificateTemplateSpecPredefinedValuesAdditionalExtensions#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'PrivateCaCertificateTemplateSpecPredefinedValuesAdditionalExtensions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateTemplateSpecPredefinedValuesAdditionalExtensions(obj: PrivateCaCertificateTemplateSpecPredefinedValuesAdditionalExtensions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'critical': obj.critical,
    'objectId': toJson_PrivateCaCertificateTemplateSpecPredefinedValuesAdditionalExtensionsObjectId(obj.objectId),
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional. Describes options in this X509Parameters that are relevant in a CA certificate.
 *
 * @schema PrivateCaCertificateTemplateSpecPredefinedValuesCaOptions
 */
export interface PrivateCaCertificateTemplateSpecPredefinedValuesCaOptions {
  /**
   * Optional. Refers to the "CA" X.509 extension, which is a boolean value. When this value is missing, the extension will be omitted from the CA certificate.
   *
   * @schema PrivateCaCertificateTemplateSpecPredefinedValuesCaOptions#isCa
   */
  readonly isCa?: boolean;

  /**
   * Optional. Refers to the path length restriction X.509 extension. For a CA certificate, this value describes the depth of subordinate CA certificates that are allowed. If this value is less than 0, the request will fail. If this value is missing, the max path length will be omitted from the CA certificate.
   *
   * @schema PrivateCaCertificateTemplateSpecPredefinedValuesCaOptions#maxIssuerPathLength
   */
  readonly maxIssuerPathLength?: number;

}

/**
 * Converts an object of type 'PrivateCaCertificateTemplateSpecPredefinedValuesCaOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateTemplateSpecPredefinedValuesCaOptions(obj: PrivateCaCertificateTemplateSpecPredefinedValuesCaOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'isCa': obj.isCa,
    'maxIssuerPathLength': obj.maxIssuerPathLength,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional. Indicates the intended use for keys that correspond to a certificate.
 *
 * @schema PrivateCaCertificateTemplateSpecPredefinedValuesKeyUsage
 */
export interface PrivateCaCertificateTemplateSpecPredefinedValuesKeyUsage {
  /**
   * Describes high-level ways in which a key may be used.
   *
   * @schema PrivateCaCertificateTemplateSpecPredefinedValuesKeyUsage#baseKeyUsage
   */
  readonly baseKeyUsage?: PrivateCaCertificateTemplateSpecPredefinedValuesKeyUsageBaseKeyUsage;

  /**
   * Detailed scenarios in which a key may be used.
   *
   * @schema PrivateCaCertificateTemplateSpecPredefinedValuesKeyUsage#extendedKeyUsage
   */
  readonly extendedKeyUsage?: PrivateCaCertificateTemplateSpecPredefinedValuesKeyUsageExtendedKeyUsage;

  /**
   * Used to describe extended key usages that are not listed in the KeyUsage.ExtendedKeyUsageOptions message.
   *
   * @schema PrivateCaCertificateTemplateSpecPredefinedValuesKeyUsage#unknownExtendedKeyUsages
   */
  readonly unknownExtendedKeyUsages?: PrivateCaCertificateTemplateSpecPredefinedValuesKeyUsageUnknownExtendedKeyUsages[];

}

/**
 * Converts an object of type 'PrivateCaCertificateTemplateSpecPredefinedValuesKeyUsage' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateTemplateSpecPredefinedValuesKeyUsage(obj: PrivateCaCertificateTemplateSpecPredefinedValuesKeyUsage | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'baseKeyUsage': toJson_PrivateCaCertificateTemplateSpecPredefinedValuesKeyUsageBaseKeyUsage(obj.baseKeyUsage),
    'extendedKeyUsage': toJson_PrivateCaCertificateTemplateSpecPredefinedValuesKeyUsageExtendedKeyUsage(obj.extendedKeyUsage),
    'unknownExtendedKeyUsages': obj.unknownExtendedKeyUsages?.map(y => toJson_PrivateCaCertificateTemplateSpecPredefinedValuesKeyUsageUnknownExtendedKeyUsages(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PrivateCaCertificateTemplateSpecPredefinedValuesPolicyIds
 */
export interface PrivateCaCertificateTemplateSpecPredefinedValuesPolicyIds {
  /**
   * Required. The parts of an OID path. The most significant parts of the path come first.
   *
   * @schema PrivateCaCertificateTemplateSpecPredefinedValuesPolicyIds#objectIdPath
   */
  readonly objectIdPath: number[];

}

/**
 * Converts an object of type 'PrivateCaCertificateTemplateSpecPredefinedValuesPolicyIds' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateTemplateSpecPredefinedValuesPolicyIds(obj: PrivateCaCertificateTemplateSpecPredefinedValuesPolicyIds | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'objectIdPath': obj.objectIdPath?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Required. The OID for this X.509 extension.
 *
 * @schema PrivateCaCertificateTemplateSpecPredefinedValuesAdditionalExtensionsObjectId
 */
export interface PrivateCaCertificateTemplateSpecPredefinedValuesAdditionalExtensionsObjectId {
  /**
   * Required. The parts of an OID path. The most significant parts of the path come first.
   *
   * @schema PrivateCaCertificateTemplateSpecPredefinedValuesAdditionalExtensionsObjectId#objectIdPath
   */
  readonly objectIdPath: number[];

}

/**
 * Converts an object of type 'PrivateCaCertificateTemplateSpecPredefinedValuesAdditionalExtensionsObjectId' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateTemplateSpecPredefinedValuesAdditionalExtensionsObjectId(obj: PrivateCaCertificateTemplateSpecPredefinedValuesAdditionalExtensionsObjectId | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'objectIdPath': obj.objectIdPath?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes high-level ways in which a key may be used.
 *
 * @schema PrivateCaCertificateTemplateSpecPredefinedValuesKeyUsageBaseKeyUsage
 */
export interface PrivateCaCertificateTemplateSpecPredefinedValuesKeyUsageBaseKeyUsage {
  /**
   * The key may be used to sign certificates.
   *
   * @schema PrivateCaCertificateTemplateSpecPredefinedValuesKeyUsageBaseKeyUsage#certSign
   */
  readonly certSign?: boolean;

  /**
   * The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
   *
   * @schema PrivateCaCertificateTemplateSpecPredefinedValuesKeyUsageBaseKeyUsage#contentCommitment
   */
  readonly contentCommitment?: boolean;

  /**
   * The key may be used sign certificate revocation lists.
   *
   * @schema PrivateCaCertificateTemplateSpecPredefinedValuesKeyUsageBaseKeyUsage#crlSign
   */
  readonly crlSign?: boolean;

  /**
   * The key may be used to encipher data.
   *
   * @schema PrivateCaCertificateTemplateSpecPredefinedValuesKeyUsageBaseKeyUsage#dataEncipherment
   */
  readonly dataEncipherment?: boolean;

  /**
   * The key may be used to decipher only.
   *
   * @schema PrivateCaCertificateTemplateSpecPredefinedValuesKeyUsageBaseKeyUsage#decipherOnly
   */
  readonly decipherOnly?: boolean;

  /**
   * The key may be used for digital signatures.
   *
   * @schema PrivateCaCertificateTemplateSpecPredefinedValuesKeyUsageBaseKeyUsage#digitalSignature
   */
  readonly digitalSignature?: boolean;

  /**
   * The key may be used to encipher only.
   *
   * @schema PrivateCaCertificateTemplateSpecPredefinedValuesKeyUsageBaseKeyUsage#encipherOnly
   */
  readonly encipherOnly?: boolean;

  /**
   * The key may be used in a key agreement protocol.
   *
   * @schema PrivateCaCertificateTemplateSpecPredefinedValuesKeyUsageBaseKeyUsage#keyAgreement
   */
  readonly keyAgreement?: boolean;

  /**
   * The key may be used to encipher other keys.
   *
   * @schema PrivateCaCertificateTemplateSpecPredefinedValuesKeyUsageBaseKeyUsage#keyEncipherment
   */
  readonly keyEncipherment?: boolean;

}

/**
 * Converts an object of type 'PrivateCaCertificateTemplateSpecPredefinedValuesKeyUsageBaseKeyUsage' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateTemplateSpecPredefinedValuesKeyUsageBaseKeyUsage(obj: PrivateCaCertificateTemplateSpecPredefinedValuesKeyUsageBaseKeyUsage | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'certSign': obj.certSign,
    'contentCommitment': obj.contentCommitment,
    'crlSign': obj.crlSign,
    'dataEncipherment': obj.dataEncipherment,
    'decipherOnly': obj.decipherOnly,
    'digitalSignature': obj.digitalSignature,
    'encipherOnly': obj.encipherOnly,
    'keyAgreement': obj.keyAgreement,
    'keyEncipherment': obj.keyEncipherment,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Detailed scenarios in which a key may be used.
 *
 * @schema PrivateCaCertificateTemplateSpecPredefinedValuesKeyUsageExtendedKeyUsage
 */
export interface PrivateCaCertificateTemplateSpecPredefinedValuesKeyUsageExtendedKeyUsage {
  /**
   * Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
   *
   * @schema PrivateCaCertificateTemplateSpecPredefinedValuesKeyUsageExtendedKeyUsage#clientAuth
   */
  readonly clientAuth?: boolean;

  /**
   * Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
   *
   * @schema PrivateCaCertificateTemplateSpecPredefinedValuesKeyUsageExtendedKeyUsage#codeSigning
   */
  readonly codeSigning?: boolean;

  /**
   * Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
   *
   * @schema PrivateCaCertificateTemplateSpecPredefinedValuesKeyUsageExtendedKeyUsage#emailProtection
   */
  readonly emailProtection?: boolean;

  /**
   * Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
   *
   * @schema PrivateCaCertificateTemplateSpecPredefinedValuesKeyUsageExtendedKeyUsage#ocspSigning
   */
  readonly ocspSigning?: boolean;

  /**
   * Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
   *
   * @schema PrivateCaCertificateTemplateSpecPredefinedValuesKeyUsageExtendedKeyUsage#serverAuth
   */
  readonly serverAuth?: boolean;

  /**
   * Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
   *
   * @schema PrivateCaCertificateTemplateSpecPredefinedValuesKeyUsageExtendedKeyUsage#timeStamping
   */
  readonly timeStamping?: boolean;

}

/**
 * Converts an object of type 'PrivateCaCertificateTemplateSpecPredefinedValuesKeyUsageExtendedKeyUsage' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateTemplateSpecPredefinedValuesKeyUsageExtendedKeyUsage(obj: PrivateCaCertificateTemplateSpecPredefinedValuesKeyUsageExtendedKeyUsage | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'clientAuth': obj.clientAuth,
    'codeSigning': obj.codeSigning,
    'emailProtection': obj.emailProtection,
    'ocspSigning': obj.ocspSigning,
    'serverAuth': obj.serverAuth,
    'timeStamping': obj.timeStamping,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PrivateCaCertificateTemplateSpecPredefinedValuesKeyUsageUnknownExtendedKeyUsages
 */
export interface PrivateCaCertificateTemplateSpecPredefinedValuesKeyUsageUnknownExtendedKeyUsages {
  /**
   * Required. The parts of an OID path. The most significant parts of the path come first.
   *
   * @schema PrivateCaCertificateTemplateSpecPredefinedValuesKeyUsageUnknownExtendedKeyUsages#objectIdPath
   */
  readonly objectIdPath: number[];

}

/**
 * Converts an object of type 'PrivateCaCertificateTemplateSpecPredefinedValuesKeyUsageUnknownExtendedKeyUsages' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrivateCaCertificateTemplateSpecPredefinedValuesKeyUsageUnknownExtendedKeyUsages(obj: PrivateCaCertificateTemplateSpecPredefinedValuesKeyUsageUnknownExtendedKeyUsages | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'objectIdPath': obj.objectIdPath?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

