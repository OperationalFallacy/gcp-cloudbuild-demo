// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 *
 *
 * @schema VPCAccessConnector
 */
export class VpcAccessConnector extends ApiObject {
  /**
   * Returns the apiVersion and kind for "VPCAccessConnector"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'vpcaccess.cnrm.cloud.google.com/v1beta1',
    kind: 'VPCAccessConnector',
  }

  /**
   * Renders a Kubernetes manifest for "VPCAccessConnector".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: VpcAccessConnectorProps): any {
    return {
      ...VpcAccessConnector.GVK,
      ...toJson_VpcAccessConnectorProps(props),
    };
  }

  /**
   * Defines a "VPCAccessConnector" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: VpcAccessConnectorProps) {
    super(scope, id, {
      ...VpcAccessConnector.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...VpcAccessConnector.GVK,
      ...toJson_VpcAccessConnectorProps(resolved),
    };
  }
}

/**
 * @schema VPCAccessConnector
 */
export interface VpcAccessConnectorProps {
  /**
   * @schema VPCAccessConnector#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema VPCAccessConnector#spec
   */
  readonly spec: VpcAccessConnectorSpec;

}

/**
 * Converts an object of type 'VpcAccessConnectorProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VpcAccessConnectorProps(obj: VpcAccessConnectorProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_VpcAccessConnectorSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VpcAccessConnectorSpec
 */
export interface VpcAccessConnectorSpec {
  /**
   * Immutable. The range of internal addresses that follows RFC 4632 notation. Example: '10.132.0.0/28'.
   *
   * @schema VpcAccessConnectorSpec#ipCidrRange
   */
  readonly ipCidrRange?: string;

  /**
   * Location represents the geographical location of the VPCAccessConnector. Specify a region name. Reference: GCP definition of regions/zones (https://cloud.google.com/compute/docs/regions-zones/)
   *
   * @schema VpcAccessConnectorSpec#location
   */
  readonly location: string;

  /**
   * Immutable. Machine type of VM Instance underlying connector. Default is e2-micro.
   *
   * @default e2-micro.
   * @schema VpcAccessConnectorSpec#machineType
   */
  readonly machineType?: string;

  /**
   * Immutable. Maximum value of instances in autoscaling group underlying the connector.
   *
   * @schema VpcAccessConnectorSpec#maxInstances
   */
  readonly maxInstances?: number;

  /**
   * Immutable. Maximum throughput of the connector in Mbps, must be greater than 'min_throughput'. Default is 300.
   *
   * @default 300.
   * @schema VpcAccessConnectorSpec#maxThroughput
   */
  readonly maxThroughput?: number;

  /**
   * Immutable. Minimum value of instances in autoscaling group underlying the connector.
   *
   * @schema VpcAccessConnectorSpec#minInstances
   */
  readonly minInstances?: number;

  /**
   * Immutable. Minimum throughput of the connector in Mbps. Default and min is 200.
   *
   * @schema VpcAccessConnectorSpec#minThroughput
   */
  readonly minThroughput?: number;

  /**
   * Immutable. Name or self_link of the VPC network. Required if 'ip_cidr_range' is set.
   *
   * @schema VpcAccessConnectorSpec#networkRef
   */
  readonly networkRef?: VpcAccessConnectorSpecNetworkRef;

  /**
   * Immutable. The project that this resource belongs to.
   *
   * @schema VpcAccessConnectorSpec#projectRef
   */
  readonly projectRef: VpcAccessConnectorSpecProjectRef;

  /**
   * Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
   *
   * @schema VpcAccessConnectorSpec#resourceID
   */
  readonly resourceId?: string;

  /**
   * Immutable. The subnet in which to house the connector.
   *
   * @schema VpcAccessConnectorSpec#subnet
   */
  readonly subnet?: VpcAccessConnectorSpecSubnet;

}

/**
 * Converts an object of type 'VpcAccessConnectorSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VpcAccessConnectorSpec(obj: VpcAccessConnectorSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ipCidrRange': obj.ipCidrRange,
    'location': obj.location,
    'machineType': obj.machineType,
    'maxInstances': obj.maxInstances,
    'maxThroughput': obj.maxThroughput,
    'minInstances': obj.minInstances,
    'minThroughput': obj.minThroughput,
    'networkRef': toJson_VpcAccessConnectorSpecNetworkRef(obj.networkRef),
    'projectRef': toJson_VpcAccessConnectorSpecProjectRef(obj.projectRef),
    'resourceID': obj.resourceId,
    'subnet': toJson_VpcAccessConnectorSpecSubnet(obj.subnet),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Name or self_link of the VPC network. Required if 'ip_cidr_range' is set.
 *
 * @schema VpcAccessConnectorSpecNetworkRef
 */
export interface VpcAccessConnectorSpecNetworkRef {
  /**
   * Allowed value: The `selfLink` field of a `ComputeNetwork` resource.
   *
   * @schema VpcAccessConnectorSpecNetworkRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema VpcAccessConnectorSpecNetworkRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema VpcAccessConnectorSpecNetworkRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'VpcAccessConnectorSpecNetworkRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VpcAccessConnectorSpecNetworkRef(obj: VpcAccessConnectorSpecNetworkRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. The project that this resource belongs to.
 *
 * @schema VpcAccessConnectorSpecProjectRef
 */
export interface VpcAccessConnectorSpecProjectRef {
  /**
   * Allowed value: The `name` field of a `Project` resource.
   *
   * @schema VpcAccessConnectorSpecProjectRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema VpcAccessConnectorSpecProjectRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema VpcAccessConnectorSpecProjectRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'VpcAccessConnectorSpecProjectRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VpcAccessConnectorSpecProjectRef(obj: VpcAccessConnectorSpecProjectRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. The subnet in which to house the connector.
 *
 * @schema VpcAccessConnectorSpecSubnet
 */
export interface VpcAccessConnectorSpecSubnet {
  /**
   * Immutable. Subnet name (relative, not fully qualified). E.g. if the full subnet selfLink is
   * https://compute.googleapis.com/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetName} the correct input for this field would be {subnetName}"
   *
   * @schema VpcAccessConnectorSpecSubnet#nameRef
   */
  readonly nameRef?: VpcAccessConnectorSpecSubnetNameRef;

  /**
   * Immutable. Project in which the subnet exists. If not set, this project is assumed to be the project for which the connector create request was issued.
   *
   * @schema VpcAccessConnectorSpecSubnet#projectRef
   */
  readonly projectRef?: VpcAccessConnectorSpecSubnetProjectRef;

}

/**
 * Converts an object of type 'VpcAccessConnectorSpecSubnet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VpcAccessConnectorSpecSubnet(obj: VpcAccessConnectorSpecSubnet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'nameRef': toJson_VpcAccessConnectorSpecSubnetNameRef(obj.nameRef),
    'projectRef': toJson_VpcAccessConnectorSpecSubnetProjectRef(obj.projectRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Subnet name (relative, not fully qualified). E.g. if the full subnet selfLink is
 * https://compute.googleapis.com/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetName} the correct input for this field would be {subnetName}"
 *
 * @schema VpcAccessConnectorSpecSubnetNameRef
 */
export interface VpcAccessConnectorSpecSubnetNameRef {
  /**
   * Allowed value: The `name` field of a `ComputeSubnetwork` resource.
   *
   * @schema VpcAccessConnectorSpecSubnetNameRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema VpcAccessConnectorSpecSubnetNameRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema VpcAccessConnectorSpecSubnetNameRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'VpcAccessConnectorSpecSubnetNameRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VpcAccessConnectorSpecSubnetNameRef(obj: VpcAccessConnectorSpecSubnetNameRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Project in which the subnet exists. If not set, this project is assumed to be the project for which the connector create request was issued.
 *
 * @schema VpcAccessConnectorSpecSubnetProjectRef
 */
export interface VpcAccessConnectorSpecSubnetProjectRef {
  /**
   * Allowed value: The `name` field of a `Project` resource.
   *
   * @schema VpcAccessConnectorSpecSubnetProjectRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema VpcAccessConnectorSpecSubnetProjectRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema VpcAccessConnectorSpecSubnetProjectRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'VpcAccessConnectorSpecSubnetProjectRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VpcAccessConnectorSpecSubnetProjectRef(obj: VpcAccessConnectorSpecSubnetProjectRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

