// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 *
 *
 * @schema BigQueryDataset
 */
export class BigQueryDataset extends ApiObject {
  /**
   * Returns the apiVersion and kind for "BigQueryDataset"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'bigquery.cnrm.cloud.google.com/v1beta1',
    kind: 'BigQueryDataset',
  }

  /**
   * Renders a Kubernetes manifest for "BigQueryDataset".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: BigQueryDatasetProps = {}): any {
    return {
      ...BigQueryDataset.GVK,
      ...toJson_BigQueryDatasetProps(props),
    };
  }

  /**
   * Defines a "BigQueryDataset" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: BigQueryDatasetProps = {}) {
    super(scope, id, {
      ...BigQueryDataset.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...BigQueryDataset.GVK,
      ...toJson_BigQueryDatasetProps(resolved),
    };
  }
}

/**
 * @schema BigQueryDataset
 */
export interface BigQueryDatasetProps {
  /**
   * @schema BigQueryDataset#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema BigQueryDataset#spec
   */
  readonly spec?: BigQueryDatasetSpec;

}

/**
 * Converts an object of type 'BigQueryDatasetProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryDatasetProps(obj: BigQueryDatasetProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_BigQueryDatasetSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema BigQueryDatasetSpec
 */
export interface BigQueryDatasetSpec {
  /**
   * An array of objects that define dataset access for one or more entities.
   *
   * @schema BigQueryDatasetSpec#access
   */
  readonly access?: BigQueryDatasetSpecAccess[];

  /**
   * Defines the default collation specification of future tables created
   * in the dataset. If a table is created in this dataset without table-level
   * default collation, then the table inherits the dataset default collation,
   * which is applied to the string fields that do not have explicit collation
   * specified. A change to this field affects only tables created afterwards,
   * and does not alter the existing tables.
   *
   * The following values are supported:
   * - 'und:ci': undetermined locale, case insensitive.
   * - '': empty string. Default to case-sensitive behavior.
   *
   * @default case-sensitive behavior.
   * @schema BigQueryDatasetSpec#defaultCollation
   */
  readonly defaultCollation?: string;

  /**
   * The default encryption key for all tables in the dataset. Once this property is set,
   * all newly-created partitioned tables in the dataset will have encryption key set to
   * this value, unless table creation request (or query) overrides the key.
   *
   * @schema BigQueryDatasetSpec#defaultEncryptionConfiguration
   */
  readonly defaultEncryptionConfiguration?: BigQueryDatasetSpecDefaultEncryptionConfiguration;

  /**
   * The default partition expiration for all partitioned tables in
   * the dataset, in milliseconds.
   *
   *
   * Once this property is set, all newly-created partitioned tables in
   * the dataset will have an 'expirationMs' property in the 'timePartitioning'
   * settings set to this value, and changing the value will only
   * affect new tables, not existing ones. The storage in a partition will
   * have an expiration time of its partition time plus this value.
   * Setting this property overrides the use of 'defaultTableExpirationMs'
   * for partitioned tables: only one of 'defaultTableExpirationMs' and
   * 'defaultPartitionExpirationMs' will be used for any new partitioned
   * table. If you provide an explicit 'timePartitioning.expirationMs' when
   * creating or updating a partitioned table, that value takes precedence
   * over the default partition expiration time indicated by this property.
   *
   * @schema BigQueryDatasetSpec#defaultPartitionExpirationMs
   */
  readonly defaultPartitionExpirationMs?: number;

  /**
   * The default lifetime of all tables in the dataset, in milliseconds.
   * The minimum value is 3600000 milliseconds (one hour).
   *
   *
   * Once this property is set, all newly-created tables in the dataset
   * will have an 'expirationTime' property set to the creation time plus
   * the value in this property, and changing the value will only affect
   * new tables, not existing ones. When the 'expirationTime' for a given
   * table is reached, that table will be deleted automatically.
   * If a table's 'expirationTime' is modified or removed before the
   * table expires, or if you provide an explicit 'expirationTime' when
   * creating a table, that value takes precedence over the default
   * expiration time indicated by this property.
   *
   * @schema BigQueryDatasetSpec#defaultTableExpirationMs
   */
  readonly defaultTableExpirationMs?: number;

  /**
   * A user-friendly description of the dataset.
   *
   * @schema BigQueryDatasetSpec#description
   */
  readonly description?: string;

  /**
   * A descriptive name for the dataset.
   *
   * @schema BigQueryDatasetSpec#friendlyName
   */
  readonly friendlyName?: string;

  /**
   * TRUE if the dataset and its table names are case-insensitive, otherwise FALSE.
   * By default, this is FALSE, which means the dataset and its table names are
   * case-sensitive. This field does not affect routine references.
   *
   * @schema BigQueryDatasetSpec#isCaseInsensitive
   */
  readonly isCaseInsensitive?: boolean;

  /**
   * Immutable. The geographic location where the dataset should reside.
   * See [official docs](https://cloud.google.com/bigquery/docs/dataset-locations).
   *
   *
   * There are two types of locations, regional or multi-regional. A regional
   * location is a specific geographic place, such as Tokyo, and a multi-regional
   * location is a large geographic area, such as the United States, that
   * contains at least two geographic places.
   *
   *
   * The default value is multi-regional location 'US'.
   * Changing this forces a new resource to be created.
   *
   * @schema BigQueryDatasetSpec#location
   */
  readonly location?: string;

  /**
   * Defines the time travel window in hours. The value can be from 48 to 168 hours (2 to 7 days).
   *
   * @schema BigQueryDatasetSpec#maxTimeTravelHours
   */
  readonly maxTimeTravelHours?: string;

  /**
   * The project that this resource belongs to.
   *
   * @schema BigQueryDatasetSpec#projectRef
   */
  readonly projectRef?: BigQueryDatasetSpecProjectRef;

  /**
   * Immutable. Optional. The datasetId of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
   *
   * @schema BigQueryDatasetSpec#resourceID
   */
  readonly resourceId?: string;

  /**
   * Specifies the storage billing model for the dataset.
   * Set this flag value to LOGICAL to use logical bytes for storage billing,
   * or to PHYSICAL to use physical bytes instead.
   *
   * LOGICAL is the default if this flag isn't specified.
   *
   * @schema BigQueryDatasetSpec#storageBillingModel
   */
  readonly storageBillingModel?: string;

}

/**
 * Converts an object of type 'BigQueryDatasetSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryDatasetSpec(obj: BigQueryDatasetSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'access': obj.access?.map(y => toJson_BigQueryDatasetSpecAccess(y)),
    'defaultCollation': obj.defaultCollation,
    'defaultEncryptionConfiguration': toJson_BigQueryDatasetSpecDefaultEncryptionConfiguration(obj.defaultEncryptionConfiguration),
    'defaultPartitionExpirationMs': obj.defaultPartitionExpirationMs,
    'defaultTableExpirationMs': obj.defaultTableExpirationMs,
    'description': obj.description,
    'friendlyName': obj.friendlyName,
    'isCaseInsensitive': obj.isCaseInsensitive,
    'location': obj.location,
    'maxTimeTravelHours': obj.maxTimeTravelHours,
    'projectRef': toJson_BigQueryDatasetSpecProjectRef(obj.projectRef),
    'resourceID': obj.resourceId,
    'storageBillingModel': obj.storageBillingModel,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema BigQueryDatasetSpecAccess
 */
export interface BigQueryDatasetSpecAccess {
  /**
   * Grants all resources of particular types in a particular dataset read access to the current dataset.
   *
   * @schema BigQueryDatasetSpecAccess#dataset
   */
  readonly dataset?: BigQueryDatasetSpecAccessDataset;

  /**
   * A domain to grant access to. Any users signed in with the
   * domain specified will be granted the specified access.
   *
   * @schema BigQueryDatasetSpecAccess#domain
   */
  readonly domain?: string;

  /**
   * An email address of a Google Group to grant access to.
   *
   * @schema BigQueryDatasetSpecAccess#groupByEmail
   */
  readonly groupByEmail?: string;

  /**
   * Describes the rights granted to the user specified by the other
   * member of the access object. Basic, predefined, and custom roles
   * are supported. Predefined roles that have equivalent basic roles
   * are swapped by the API to their basic counterparts. See
   * [official docs](https://cloud.google.com/bigquery/docs/access-control).
   *
   * @schema BigQueryDatasetSpecAccess#role
   */
  readonly role?: string;

  /**
   * A routine from a different dataset to grant access to. Queries
   * executed against that routine will have read access to tables in
   * this dataset. The role field is not required when this field is
   * set. If that routine is updated by any user, access to the routine
   * needs to be granted again via an update operation.
   *
   * @schema BigQueryDatasetSpecAccess#routine
   */
  readonly routine?: BigQueryDatasetSpecAccessRoutine;

  /**
   * A special group to grant access to. Possible values include:
   *
   *
   * * 'projectOwners': Owners of the enclosing project.
   *
   *
   * * 'projectReaders': Readers of the enclosing project.
   *
   *
   * * 'projectWriters': Writers of the enclosing project.
   *
   *
   * * 'allAuthenticatedUsers': All authenticated BigQuery users.
   *
   * @schema BigQueryDatasetSpecAccess#specialGroup
   */
  readonly specialGroup?: string;

  /**
   * An email address of a user to grant access to. For example:
   * fred@example.com.
   *
   * @schema BigQueryDatasetSpecAccess#userByEmail
   */
  readonly userByEmail?: string;

  /**
   * A view from a different dataset to grant access to. Queries
   * executed against that view will have read access to tables in
   * this dataset. The role field is not required when this field is
   * set. If that view is updated by any user, access to the view
   * needs to be granted again via an update operation.
   *
   * @schema BigQueryDatasetSpecAccess#view
   */
  readonly view?: BigQueryDatasetSpecAccessView;

}

/**
 * Converts an object of type 'BigQueryDatasetSpecAccess' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryDatasetSpecAccess(obj: BigQueryDatasetSpecAccess | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'dataset': toJson_BigQueryDatasetSpecAccessDataset(obj.dataset),
    'domain': obj.domain,
    'groupByEmail': obj.groupByEmail,
    'role': obj.role,
    'routine': toJson_BigQueryDatasetSpecAccessRoutine(obj.routine),
    'specialGroup': obj.specialGroup,
    'userByEmail': obj.userByEmail,
    'view': toJson_BigQueryDatasetSpecAccessView(obj.view),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The default encryption key for all tables in the dataset. Once this property is set,
 * all newly-created partitioned tables in the dataset will have encryption key set to
 * this value, unless table creation request (or query) overrides the key.
 *
 * @schema BigQueryDatasetSpecDefaultEncryptionConfiguration
 */
export interface BigQueryDatasetSpecDefaultEncryptionConfiguration {
  /**
   * Describes the Cloud KMS encryption key that will be used to protect destination
   * BigQuery table. The BigQuery Service Account associated with your project requires
   * access to this encryption key.
   *
   * @schema BigQueryDatasetSpecDefaultEncryptionConfiguration#kmsKeyRef
   */
  readonly kmsKeyRef: BigQueryDatasetSpecDefaultEncryptionConfigurationKmsKeyRef;

}

/**
 * Converts an object of type 'BigQueryDatasetSpecDefaultEncryptionConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryDatasetSpecDefaultEncryptionConfiguration(obj: BigQueryDatasetSpecDefaultEncryptionConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'kmsKeyRef': toJson_BigQueryDatasetSpecDefaultEncryptionConfigurationKmsKeyRef(obj.kmsKeyRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The project that this resource belongs to.
 *
 * @schema BigQueryDatasetSpecProjectRef
 */
export interface BigQueryDatasetSpecProjectRef {
  /**
   * Allowed value: The `name` field of a `Project` resource.
   *
   * @schema BigQueryDatasetSpecProjectRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema BigQueryDatasetSpecProjectRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema BigQueryDatasetSpecProjectRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'BigQueryDatasetSpecProjectRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryDatasetSpecProjectRef(obj: BigQueryDatasetSpecProjectRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Grants all resources of particular types in a particular dataset read access to the current dataset.
 *
 * @schema BigQueryDatasetSpecAccessDataset
 */
export interface BigQueryDatasetSpecAccessDataset {
  /**
   * The dataset this entry applies to.
   *
   * @schema BigQueryDatasetSpecAccessDataset#dataset
   */
  readonly dataset: BigQueryDatasetSpecAccessDatasetDataset;

  /**
   * Which resources in the dataset this entry applies to. Currently, only views are supported,
   * but additional target types may be added in the future. Possible values: VIEWS.
   *
   * @schema BigQueryDatasetSpecAccessDataset#targetTypes
   */
  readonly targetTypes: string[];

}

/**
 * Converts an object of type 'BigQueryDatasetSpecAccessDataset' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryDatasetSpecAccessDataset(obj: BigQueryDatasetSpecAccessDataset | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'dataset': toJson_BigQueryDatasetSpecAccessDatasetDataset(obj.dataset),
    'targetTypes': obj.targetTypes?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A routine from a different dataset to grant access to. Queries
 * executed against that routine will have read access to tables in
 * this dataset. The role field is not required when this field is
 * set. If that routine is updated by any user, access to the routine
 * needs to be granted again via an update operation.
 *
 * @schema BigQueryDatasetSpecAccessRoutine
 */
export interface BigQueryDatasetSpecAccessRoutine {
  /**
   * The ID of the dataset containing this table.
   *
   * @schema BigQueryDatasetSpecAccessRoutine#datasetId
   */
  readonly datasetId: string;

  /**
   * The ID of the project containing this table.
   *
   * @schema BigQueryDatasetSpecAccessRoutine#projectId
   */
  readonly projectId: string;

  /**
   * The ID of the routine. The ID must contain only letters (a-z,
   * A-Z), numbers (0-9), or underscores (_). The maximum length
   * is 256 characters.
   *
   * @schema BigQueryDatasetSpecAccessRoutine#routineId
   */
  readonly routineId: string;

}

/**
 * Converts an object of type 'BigQueryDatasetSpecAccessRoutine' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryDatasetSpecAccessRoutine(obj: BigQueryDatasetSpecAccessRoutine | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'datasetId': obj.datasetId,
    'projectId': obj.projectId,
    'routineId': obj.routineId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A view from a different dataset to grant access to. Queries
 * executed against that view will have read access to tables in
 * this dataset. The role field is not required when this field is
 * set. If that view is updated by any user, access to the view
 * needs to be granted again via an update operation.
 *
 * @schema BigQueryDatasetSpecAccessView
 */
export interface BigQueryDatasetSpecAccessView {
  /**
   * The ID of the dataset containing this table.
   *
   * @schema BigQueryDatasetSpecAccessView#datasetId
   */
  readonly datasetId: string;

  /**
   * The ID of the project containing this table.
   *
   * @schema BigQueryDatasetSpecAccessView#projectId
   */
  readonly projectId: string;

  /**
   * The ID of the table. The ID must contain only letters (a-z,
   * A-Z), numbers (0-9), or underscores (_). The maximum length
   * is 1,024 characters.
   *
   * @schema BigQueryDatasetSpecAccessView#tableId
   */
  readonly tableId: string;

}

/**
 * Converts an object of type 'BigQueryDatasetSpecAccessView' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryDatasetSpecAccessView(obj: BigQueryDatasetSpecAccessView | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'datasetId': obj.datasetId,
    'projectId': obj.projectId,
    'tableId': obj.tableId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes the Cloud KMS encryption key that will be used to protect destination
 * BigQuery table. The BigQuery Service Account associated with your project requires
 * access to this encryption key.
 *
 * @schema BigQueryDatasetSpecDefaultEncryptionConfigurationKmsKeyRef
 */
export interface BigQueryDatasetSpecDefaultEncryptionConfigurationKmsKeyRef {
  /**
   * Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.
   *
   * @schema BigQueryDatasetSpecDefaultEncryptionConfigurationKmsKeyRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema BigQueryDatasetSpecDefaultEncryptionConfigurationKmsKeyRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema BigQueryDatasetSpecDefaultEncryptionConfigurationKmsKeyRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'BigQueryDatasetSpecDefaultEncryptionConfigurationKmsKeyRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryDatasetSpecDefaultEncryptionConfigurationKmsKeyRef(obj: BigQueryDatasetSpecDefaultEncryptionConfigurationKmsKeyRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The dataset this entry applies to.
 *
 * @schema BigQueryDatasetSpecAccessDatasetDataset
 */
export interface BigQueryDatasetSpecAccessDatasetDataset {
  /**
   * The ID of the dataset containing this table.
   *
   * @schema BigQueryDatasetSpecAccessDatasetDataset#datasetId
   */
  readonly datasetId: string;

  /**
   * The ID of the project containing this table.
   *
   * @schema BigQueryDatasetSpecAccessDatasetDataset#projectId
   */
  readonly projectId: string;

}

/**
 * Converts an object of type 'BigQueryDatasetSpecAccessDatasetDataset' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryDatasetSpecAccessDatasetDataset(obj: BigQueryDatasetSpecAccessDatasetDataset | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'datasetId': obj.datasetId,
    'projectId': obj.projectId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema BigQueryJob
 */
export class BigQueryJob extends ApiObject {
  /**
   * Returns the apiVersion and kind for "BigQueryJob"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'bigquery.cnrm.cloud.google.com/v1beta1',
    kind: 'BigQueryJob',
  }

  /**
   * Renders a Kubernetes manifest for "BigQueryJob".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: BigQueryJobProps = {}): any {
    return {
      ...BigQueryJob.GVK,
      ...toJson_BigQueryJobProps(props),
    };
  }

  /**
   * Defines a "BigQueryJob" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: BigQueryJobProps = {}) {
    super(scope, id, {
      ...BigQueryJob.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...BigQueryJob.GVK,
      ...toJson_BigQueryJobProps(resolved),
    };
  }
}

/**
 * @schema BigQueryJob
 */
export interface BigQueryJobProps {
  /**
   * @schema BigQueryJob#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema BigQueryJob#spec
   */
  readonly spec?: BigQueryJobSpec;

}

/**
 * Converts an object of type 'BigQueryJobProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryJobProps(obj: BigQueryJobProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_BigQueryJobSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema BigQueryJobSpec
 */
export interface BigQueryJobSpec {
  /**
   * Immutable. Copies a table.
   *
   * @schema BigQueryJobSpec#copy
   */
  readonly copy?: BigQueryJobSpecCopy;

  /**
   * Immutable. Configures an extract job.
   *
   * @schema BigQueryJobSpec#extract
   */
  readonly extract?: BigQueryJobSpecExtract;

  /**
   * Immutable. Job timeout in milliseconds. If this time limit is exceeded, BigQuery may attempt to terminate the job.
   *
   * @schema BigQueryJobSpec#jobTimeoutMs
   */
  readonly jobTimeoutMs?: string;

  /**
   * Immutable. Configures a load job.
   *
   * @schema BigQueryJobSpec#load
   */
  readonly load?: BigQueryJobSpecLoad;

  /**
   * Immutable. The geographic location of the job. The default value is US.
   *
   * @schema BigQueryJobSpec#location
   */
  readonly location?: string;

  /**
   * Immutable. Configures a query job.
   *
   * @schema BigQueryJobSpec#query
   */
  readonly query?: BigQueryJobSpecQuery;

  /**
   * Immutable. Optional. The jobId of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
   *
   * @schema BigQueryJobSpec#resourceID
   */
  readonly resourceId?: string;

}

/**
 * Converts an object of type 'BigQueryJobSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryJobSpec(obj: BigQueryJobSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'copy': toJson_BigQueryJobSpecCopy(obj.copy),
    'extract': toJson_BigQueryJobSpecExtract(obj.extract),
    'jobTimeoutMs': obj.jobTimeoutMs,
    'load': toJson_BigQueryJobSpecLoad(obj.load),
    'location': obj.location,
    'query': toJson_BigQueryJobSpecQuery(obj.query),
    'resourceID': obj.resourceId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Copies a table.
 *
 * @schema BigQueryJobSpecCopy
 */
export interface BigQueryJobSpecCopy {
  /**
   * Immutable. Specifies whether the job is allowed to create new tables. The following values are supported:
   * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table.
   * CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result.
   * Creation, truncation and append actions occur as one atomic update upon job completion Default value: "CREATE_NEVER" Possible values: ["CREATE_IF_NEEDED", "CREATE_NEVER"].
   *
   * @schema BigQueryJobSpecCopy#createDisposition
   */
  readonly createDisposition?: string;

  /**
   * Immutable. Custom encryption configuration (e.g., Cloud KMS keys).
   *
   * @schema BigQueryJobSpecCopy#destinationEncryptionConfiguration
   */
  readonly destinationEncryptionConfiguration?: BigQueryJobSpecCopyDestinationEncryptionConfiguration;

  /**
   * Immutable. The destination table.
   *
   * @schema BigQueryJobSpecCopy#destinationTable
   */
  readonly destinationTable?: BigQueryJobSpecCopyDestinationTable;

  /**
   * Immutable. Source tables to copy.
   *
   * @schema BigQueryJobSpecCopy#sourceTables
   */
  readonly sourceTables: BigQueryJobSpecCopySourceTables[];

  /**
   * Immutable. Specifies the action that occurs if the destination table already exists. The following values are supported:
   * WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema from the query result.
   * WRITE_APPEND: If the table already exists, BigQuery appends the data to the table.
   * WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result.
   * Each action is atomic and only occurs if BigQuery is able to complete the job successfully.
   * Creation, truncation and append actions occur as one atomic update upon job completion. Default value: "WRITE_EMPTY" Possible values: ["WRITE_TRUNCATE", "WRITE_APPEND", "WRITE_EMPTY"].
   *
   * @schema BigQueryJobSpecCopy#writeDisposition
   */
  readonly writeDisposition?: string;

}

/**
 * Converts an object of type 'BigQueryJobSpecCopy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryJobSpecCopy(obj: BigQueryJobSpecCopy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'createDisposition': obj.createDisposition,
    'destinationEncryptionConfiguration': toJson_BigQueryJobSpecCopyDestinationEncryptionConfiguration(obj.destinationEncryptionConfiguration),
    'destinationTable': toJson_BigQueryJobSpecCopyDestinationTable(obj.destinationTable),
    'sourceTables': obj.sourceTables?.map(y => toJson_BigQueryJobSpecCopySourceTables(y)),
    'writeDisposition': obj.writeDisposition,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Configures an extract job.
 *
 * @schema BigQueryJobSpecExtract
 */
export interface BigQueryJobSpecExtract {
  /**
   * Immutable. The compression type to use for exported files. Possible values include GZIP, DEFLATE, SNAPPY, and NONE.
   * The default value is NONE. DEFLATE and SNAPPY are only supported for Avro.
   *
   * @schema BigQueryJobSpecExtract#compression
   */
  readonly compression?: string;

  /**
   * Immutable. The exported file format. Possible values include CSV, NEWLINE_DELIMITED_JSON and AVRO for tables and SAVED_MODEL for models.
   * The default value for tables is CSV. Tables with nested or repeated fields cannot be exported as CSV.
   * The default value for models is SAVED_MODEL.
   *
   * @schema BigQueryJobSpecExtract#destinationFormat
   */
  readonly destinationFormat?: string;

  /**
   * Immutable. A list of fully-qualified Google Cloud Storage URIs where the extracted table should be written.
   *
   * @schema BigQueryJobSpecExtract#destinationUris
   */
  readonly destinationUris: string[];

  /**
   * Immutable. When extracting data in CSV format, this defines the delimiter to use between fields in the exported data.
   * Default is ','.
   *
   * @default .
   * @schema BigQueryJobSpecExtract#fieldDelimiter
   */
  readonly fieldDelimiter?: string;

  /**
   * Immutable. Whether to print out a header row in the results. Default is true.
   *
   * @default true.
   * @schema BigQueryJobSpecExtract#printHeader
   */
  readonly printHeader?: boolean;

  /**
   * Immutable. A reference to the table being exported.
   *
   * @schema BigQueryJobSpecExtract#sourceTable
   */
  readonly sourceTable?: BigQueryJobSpecExtractSourceTable;

  /**
   * Immutable. Whether to use logical types when extracting to AVRO format.
   *
   * @schema BigQueryJobSpecExtract#useAvroLogicalTypes
   */
  readonly useAvroLogicalTypes?: boolean;

}

/**
 * Converts an object of type 'BigQueryJobSpecExtract' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryJobSpecExtract(obj: BigQueryJobSpecExtract | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'compression': obj.compression,
    'destinationFormat': obj.destinationFormat,
    'destinationUris': obj.destinationUris?.map(y => y),
    'fieldDelimiter': obj.fieldDelimiter,
    'printHeader': obj.printHeader,
    'sourceTable': toJson_BigQueryJobSpecExtractSourceTable(obj.sourceTable),
    'useAvroLogicalTypes': obj.useAvroLogicalTypes,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Configures a load job.
 *
 * @schema BigQueryJobSpecLoad
 */
export interface BigQueryJobSpecLoad {
  /**
   * Immutable. Accept rows that are missing trailing optional columns. The missing values are treated as nulls.
   * If false, records with missing trailing columns are treated as bad records, and if there are too many bad records,
   * an invalid error is returned in the job result. The default value is false. Only applicable to CSV, ignored for other formats.
   *
   * @schema BigQueryJobSpecLoad#allowJaggedRows
   */
  readonly allowJaggedRows?: boolean;

  /**
   * Immutable. Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file.
   * The default value is false.
   *
   * @schema BigQueryJobSpecLoad#allowQuotedNewlines
   */
  readonly allowQuotedNewlines?: boolean;

  /**
   * Immutable. Indicates if we should automatically infer the options and schema for CSV and JSON sources.
   *
   * @schema BigQueryJobSpecLoad#autodetect
   */
  readonly autodetect?: boolean;

  /**
   * Immutable. Specifies whether the job is allowed to create new tables. The following values are supported:
   * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table.
   * CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result.
   * Creation, truncation and append actions occur as one atomic update upon job completion Default value: "CREATE_NEVER" Possible values: ["CREATE_IF_NEEDED", "CREATE_NEVER"].
   *
   * @schema BigQueryJobSpecLoad#createDisposition
   */
  readonly createDisposition?: string;

  /**
   * Immutable. Custom encryption configuration (e.g., Cloud KMS keys).
   *
   * @schema BigQueryJobSpecLoad#destinationEncryptionConfiguration
   */
  readonly destinationEncryptionConfiguration?: BigQueryJobSpecLoadDestinationEncryptionConfiguration;

  /**
   * Immutable. The destination table to load the data into.
   *
   * @schema BigQueryJobSpecLoad#destinationTable
   */
  readonly destinationTable: BigQueryJobSpecLoadDestinationTable;

  /**
   * Immutable. The character encoding of the data. The supported values are UTF-8 or ISO-8859-1.
   * The default value is UTF-8. BigQuery decodes the data after the raw, binary data
   * has been split using the values of the quote and fieldDelimiter properties.
   *
   * @schema BigQueryJobSpecLoad#encoding
   */
  readonly encoding?: string;

  /**
   * Immutable. The separator for fields in a CSV file. The separator can be any ISO-8859-1 single-byte character.
   * To use a character in the range 128-255, you must encode the character as UTF8. BigQuery converts
   * the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the
   * data in its raw, binary state. BigQuery also supports the escape sequence "\t" to specify a tab separator.
   * The default value is a comma (',').
   *
   * @schema BigQueryJobSpecLoad#fieldDelimiter
   */
  readonly fieldDelimiter?: string;

  /**
   * Immutable. Indicates if BigQuery should allow extra values that are not represented in the table schema.
   * If true, the extra values are ignored. If false, records with extra columns are treated as bad records,
   * and if there are too many bad records, an invalid error is returned in the job result.
   * The default value is false. The sourceFormat property determines what BigQuery treats as an extra value:
   * CSV: Trailing columns
   * JSON: Named values that don't match any column names.
   *
   * @schema BigQueryJobSpecLoad#ignoreUnknownValues
   */
  readonly ignoreUnknownValues?: boolean;

  /**
   * Immutable. If sourceFormat is set to newline-delimited JSON, indicates whether it should be processed as a JSON variant such as GeoJSON.
   * For a sourceFormat other than JSON, omit this field. If the sourceFormat is newline-delimited JSON: - for newline-delimited
   * GeoJSON: set to GEOJSON.
   *
   * @schema BigQueryJobSpecLoad#jsonExtension
   */
  readonly jsonExtension?: string;

  /**
   * Immutable. The maximum number of bad records that BigQuery can ignore when running the job. If the number of bad records exceeds this value,
   * an invalid error is returned in the job result. The default value is 0, which requires that all records are valid.
   *
   * @schema BigQueryJobSpecLoad#maxBadRecords
   */
  readonly maxBadRecords?: number;

  /**
   * Immutable. Specifies a string that represents a null value in a CSV file. For example, if you specify "\N", BigQuery interprets "\N" as a null value
   * when loading a CSV file. The default value is the empty string. If you set this property to a custom value, BigQuery throws an error if an
   * empty string is present for all data types except for STRING and BYTE. For STRING and BYTE columns, BigQuery interprets the empty string as
   * an empty value.
   *
   * @schema BigQueryJobSpecLoad#nullMarker
   */
  readonly nullMarker?: string;

  /**
   * Immutable. Parquet Options for load and make external tables.
   *
   * @schema BigQueryJobSpecLoad#parquetOptions
   */
  readonly parquetOptions?: BigQueryJobSpecLoadParquetOptions;

  /**
   * Immutable. If sourceFormat is set to "DATASTORE_BACKUP", indicates which entity properties to load into BigQuery from a Cloud Datastore backup.
   * Property names are case sensitive and must be top-level properties. If no properties are specified, BigQuery loads all properties.
   * If any named property isn't found in the Cloud Datastore backup, an invalid error is returned in the job result.
   *
   * @schema BigQueryJobSpecLoad#projectionFields
   */
  readonly projectionFields?: string[];

  /**
   * Immutable. The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding,
   * and then uses the first byte of the encoded string to split the data in its raw, binary state.
   * The default value is a double-quote ('"'). If your data does not contain quoted sections, set the property value to an empty string.
   * If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true.
   *
   * @schema BigQueryJobSpecLoad#quote
   */
  readonly quote?: string;

  /**
   * Immutable. Allows the schema of the destination table to be updated as a side effect of the load job if a schema is autodetected or
   * supplied in the job configuration. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND;
   * when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators.
   * For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified:
   * ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema.
   * ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
   *
   * @schema BigQueryJobSpecLoad#schemaUpdateOptions
   */
  readonly schemaUpdateOptions?: string[];

  /**
   * Immutable. The number of rows at the top of a CSV file that BigQuery will skip when loading the data.
   * The default value is 0. This property is useful if you have header rows in the file that should be skipped.
   * When autodetect is on, the behavior is the following:
   * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected,
   * the row is read as data. Otherwise data is read starting from the second row.
   * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row.
   * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected,
   * row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
   *
   * @schema BigQueryJobSpecLoad#skipLeadingRows
   */
  readonly skipLeadingRows?: number;

  /**
   * Immutable. The format of the data files. For CSV files, specify "CSV". For datastore backups, specify "DATASTORE_BACKUP".
   * For newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON". For Avro, specify "AVRO". For parquet, specify "PARQUET".
   * For orc, specify "ORC". [Beta] For Bigtable, specify "BIGTABLE".
   * The default value is CSV.
   *
   * @schema BigQueryJobSpecLoad#sourceFormat
   */
  readonly sourceFormat?: string;

  /**
   * Immutable. The fully-qualified URIs that point to your data in Google Cloud.
   * For Google Cloud Storage URIs: Each URI can contain one '\*' wildcard character
   * and it must come after the 'bucket' name. Size limits related to load jobs apply
   * to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be
   * specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table.
   * For Google Cloud Datastore backups: Exactly one URI can be specified. Also, the '\*' wildcard character is not allowed.
   *
   * @schema BigQueryJobSpecLoad#sourceUris
   */
  readonly sourceUris: string[];

  /**
   * Immutable. Time-based partitioning specification for the destination table.
   *
   * @schema BigQueryJobSpecLoad#timePartitioning
   */
  readonly timePartitioning?: BigQueryJobSpecLoadTimePartitioning;

  /**
   * Immutable. Specifies the action that occurs if the destination table already exists. The following values are supported:
   * WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema from the query result.
   * WRITE_APPEND: If the table already exists, BigQuery appends the data to the table.
   * WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result.
   * Each action is atomic and only occurs if BigQuery is able to complete the job successfully.
   * Creation, truncation and append actions occur as one atomic update upon job completion. Default value: "WRITE_EMPTY" Possible values: ["WRITE_TRUNCATE", "WRITE_APPEND", "WRITE_EMPTY"].
   *
   * @schema BigQueryJobSpecLoad#writeDisposition
   */
  readonly writeDisposition?: string;

}

/**
 * Converts an object of type 'BigQueryJobSpecLoad' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryJobSpecLoad(obj: BigQueryJobSpecLoad | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'allowJaggedRows': obj.allowJaggedRows,
    'allowQuotedNewlines': obj.allowQuotedNewlines,
    'autodetect': obj.autodetect,
    'createDisposition': obj.createDisposition,
    'destinationEncryptionConfiguration': toJson_BigQueryJobSpecLoadDestinationEncryptionConfiguration(obj.destinationEncryptionConfiguration),
    'destinationTable': toJson_BigQueryJobSpecLoadDestinationTable(obj.destinationTable),
    'encoding': obj.encoding,
    'fieldDelimiter': obj.fieldDelimiter,
    'ignoreUnknownValues': obj.ignoreUnknownValues,
    'jsonExtension': obj.jsonExtension,
    'maxBadRecords': obj.maxBadRecords,
    'nullMarker': obj.nullMarker,
    'parquetOptions': toJson_BigQueryJobSpecLoadParquetOptions(obj.parquetOptions),
    'projectionFields': obj.projectionFields?.map(y => y),
    'quote': obj.quote,
    'schemaUpdateOptions': obj.schemaUpdateOptions?.map(y => y),
    'skipLeadingRows': obj.skipLeadingRows,
    'sourceFormat': obj.sourceFormat,
    'sourceUris': obj.sourceUris?.map(y => y),
    'timePartitioning': toJson_BigQueryJobSpecLoadTimePartitioning(obj.timePartitioning),
    'writeDisposition': obj.writeDisposition,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Configures a query job.
 *
 * @schema BigQueryJobSpecQuery
 */
export interface BigQueryJobSpecQuery {
  /**
   * Immutable. If true and query uses legacy SQL dialect, allows the query to produce arbitrarily large result tables at a slight cost in performance.
   * Requires destinationTable to be set. For standard SQL queries, this flag is ignored and large results are always allowed.
   * However, you must still set destinationTable when result size exceeds the allowed maximum response size.
   *
   * @schema BigQueryJobSpecQuery#allowLargeResults
   */
  readonly allowLargeResults?: boolean;

  /**
   * Immutable. Specifies whether the job is allowed to create new tables. The following values are supported:
   * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table.
   * CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result.
   * Creation, truncation and append actions occur as one atomic update upon job completion Default value: "CREATE_NEVER" Possible values: ["CREATE_IF_NEEDED", "CREATE_NEVER"].
   *
   * @schema BigQueryJobSpecQuery#createDisposition
   */
  readonly createDisposition?: string;

  /**
   * Immutable. Specifies the default dataset to use for unqualified table names in the query. Note that this does not alter behavior of unqualified dataset names.
   *
   * @schema BigQueryJobSpecQuery#defaultDataset
   */
  readonly defaultDataset?: BigQueryJobSpecQueryDefaultDataset;

  /**
   * Immutable. Custom encryption configuration (e.g., Cloud KMS keys).
   *
   * @schema BigQueryJobSpecQuery#destinationEncryptionConfiguration
   */
  readonly destinationEncryptionConfiguration?: BigQueryJobSpecQueryDestinationEncryptionConfiguration;

  /**
   * Immutable. Describes the table where the query results should be stored.
   * This property must be set for large results that exceed the maximum response size.
   * For queries that produce anonymous (cached) results, this field will be populated by BigQuery.
   *
   * @schema BigQueryJobSpecQuery#destinationTable
   */
  readonly destinationTable?: BigQueryJobSpecQueryDestinationTable;

  /**
   * Immutable. If true and query uses legacy SQL dialect, flattens all nested and repeated fields in the query results.
   * allowLargeResults must be true if this is set to false. For standard SQL queries, this flag is ignored and results are never flattened.
   *
   * @schema BigQueryJobSpecQuery#flattenResults
   */
  readonly flattenResults?: boolean;

  /**
   * Immutable. Limits the billing tier for this job. Queries that have resource usage beyond this tier will fail (without incurring a charge).
   * If unspecified, this will be set to your project default.
   *
   * @schema BigQueryJobSpecQuery#maximumBillingTier
   */
  readonly maximumBillingTier?: number;

  /**
   * Immutable. Limits the bytes billed for this job. Queries that will have bytes billed beyond this limit will fail (without incurring a charge).
   * If unspecified, this will be set to your project default.
   *
   * @schema BigQueryJobSpecQuery#maximumBytesBilled
   */
  readonly maximumBytesBilled?: string;

  /**
   * Immutable. Standard SQL only. Set to POSITIONAL to use positional (?) query parameters or to NAMED to use named (@myparam) query parameters in this query.
   *
   * @schema BigQueryJobSpecQuery#parameterMode
   */
  readonly parameterMode?: string;

  /**
   * Immutable. Specifies a priority for the query. Default value: "INTERACTIVE" Possible values: ["INTERACTIVE", "BATCH"].
   *
   * @schema BigQueryJobSpecQuery#priority
   */
  readonly priority?: string;

  /**
   * Immutable. SQL query text to execute. The useLegacySql field can be used to indicate whether the query uses legacy SQL or standard SQL.
   * *NOTE*: queries containing [DML language](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language)
   * ('DELETE', 'UPDATE', 'MERGE', 'INSERT') must specify 'create_disposition = ""' and 'write_disposition = ""'.
   *
   * @schema BigQueryJobSpecQuery#query
   */
  readonly query: string;

  /**
   * Immutable. Allows the schema of the destination table to be updated as a side effect of the query job.
   * Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND;
   * when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table,
   * specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema.
   * One or more of the following values are specified:
   * ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema.
   * ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
   *
   * @schema BigQueryJobSpecQuery#schemaUpdateOptions
   */
  readonly schemaUpdateOptions?: string[];

  /**
   * Immutable. Options controlling the execution of scripts.
   *
   * @schema BigQueryJobSpecQuery#scriptOptions
   */
  readonly scriptOptions?: BigQueryJobSpecQueryScriptOptions;

  /**
   * Immutable. Specifies whether to use BigQuery's legacy SQL dialect for this query. The default value is true.
   * If set to false, the query will use BigQuery's standard SQL.
   *
   * @schema BigQueryJobSpecQuery#useLegacySql
   */
  readonly useLegacySql?: boolean;

  /**
   * Immutable. Whether to look for the result in the query cache. The query cache is a best-effort cache that will be flushed whenever
   * tables in the query are modified. Moreover, the query cache is only available when a query does not have a destination table specified.
   * The default value is true.
   *
   * @schema BigQueryJobSpecQuery#useQueryCache
   */
  readonly useQueryCache?: boolean;

  /**
   * Immutable. Describes user-defined function resources used in the query.
   *
   * @schema BigQueryJobSpecQuery#userDefinedFunctionResources
   */
  readonly userDefinedFunctionResources?: BigQueryJobSpecQueryUserDefinedFunctionResources[];

  /**
   * Immutable. Specifies the action that occurs if the destination table already exists. The following values are supported:
   * WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema from the query result.
   * WRITE_APPEND: If the table already exists, BigQuery appends the data to the table.
   * WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result.
   * Each action is atomic and only occurs if BigQuery is able to complete the job successfully.
   * Creation, truncation and append actions occur as one atomic update upon job completion. Default value: "WRITE_EMPTY" Possible values: ["WRITE_TRUNCATE", "WRITE_APPEND", "WRITE_EMPTY"].
   *
   * @schema BigQueryJobSpecQuery#writeDisposition
   */
  readonly writeDisposition?: string;

}

/**
 * Converts an object of type 'BigQueryJobSpecQuery' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryJobSpecQuery(obj: BigQueryJobSpecQuery | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'allowLargeResults': obj.allowLargeResults,
    'createDisposition': obj.createDisposition,
    'defaultDataset': toJson_BigQueryJobSpecQueryDefaultDataset(obj.defaultDataset),
    'destinationEncryptionConfiguration': toJson_BigQueryJobSpecQueryDestinationEncryptionConfiguration(obj.destinationEncryptionConfiguration),
    'destinationTable': toJson_BigQueryJobSpecQueryDestinationTable(obj.destinationTable),
    'flattenResults': obj.flattenResults,
    'maximumBillingTier': obj.maximumBillingTier,
    'maximumBytesBilled': obj.maximumBytesBilled,
    'parameterMode': obj.parameterMode,
    'priority': obj.priority,
    'query': obj.query,
    'schemaUpdateOptions': obj.schemaUpdateOptions?.map(y => y),
    'scriptOptions': toJson_BigQueryJobSpecQueryScriptOptions(obj.scriptOptions),
    'useLegacySql': obj.useLegacySql,
    'useQueryCache': obj.useQueryCache,
    'userDefinedFunctionResources': obj.userDefinedFunctionResources?.map(y => toJson_BigQueryJobSpecQueryUserDefinedFunctionResources(y)),
    'writeDisposition': obj.writeDisposition,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Custom encryption configuration (e.g., Cloud KMS keys).
 *
 * @schema BigQueryJobSpecCopyDestinationEncryptionConfiguration
 */
export interface BigQueryJobSpecCopyDestinationEncryptionConfiguration {
  /**
   * Describes the Cloud KMS encryption key that will be used to protect
   * destination BigQuery table. The BigQuery Service Account associated
   * with your project requires access to this encryption key.
   *
   * @schema BigQueryJobSpecCopyDestinationEncryptionConfiguration#kmsKeyRef
   */
  readonly kmsKeyRef: BigQueryJobSpecCopyDestinationEncryptionConfigurationKmsKeyRef;

  /**
   * Describes the Cloud KMS encryption key version used to protect destination BigQuery table.
   *
   * @schema BigQueryJobSpecCopyDestinationEncryptionConfiguration#kmsKeyVersion
   */
  readonly kmsKeyVersion?: string;

}

/**
 * Converts an object of type 'BigQueryJobSpecCopyDestinationEncryptionConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryJobSpecCopyDestinationEncryptionConfiguration(obj: BigQueryJobSpecCopyDestinationEncryptionConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'kmsKeyRef': toJson_BigQueryJobSpecCopyDestinationEncryptionConfigurationKmsKeyRef(obj.kmsKeyRef),
    'kmsKeyVersion': obj.kmsKeyVersion,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. The destination table.
 *
 * @schema BigQueryJobSpecCopyDestinationTable
 */
export interface BigQueryJobSpecCopyDestinationTable {
  /**
   * A reference to the table.
   *
   * @schema BigQueryJobSpecCopyDestinationTable#tableRef
   */
  readonly tableRef: BigQueryJobSpecCopyDestinationTableTableRef;

}

/**
 * Converts an object of type 'BigQueryJobSpecCopyDestinationTable' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryJobSpecCopyDestinationTable(obj: BigQueryJobSpecCopyDestinationTable | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'tableRef': toJson_BigQueryJobSpecCopyDestinationTableTableRef(obj.tableRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema BigQueryJobSpecCopySourceTables
 */
export interface BigQueryJobSpecCopySourceTables {
  /**
   * A reference to the table.
   *
   * @schema BigQueryJobSpecCopySourceTables#tableRef
   */
  readonly tableRef: BigQueryJobSpecCopySourceTablesTableRef;

}

/**
 * Converts an object of type 'BigQueryJobSpecCopySourceTables' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryJobSpecCopySourceTables(obj: BigQueryJobSpecCopySourceTables | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'tableRef': toJson_BigQueryJobSpecCopySourceTablesTableRef(obj.tableRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. A reference to the table being exported.
 *
 * @schema BigQueryJobSpecExtractSourceTable
 */
export interface BigQueryJobSpecExtractSourceTable {
  /**
   * A reference to the table.
   *
   * @schema BigQueryJobSpecExtractSourceTable#tableRef
   */
  readonly tableRef: BigQueryJobSpecExtractSourceTableTableRef;

}

/**
 * Converts an object of type 'BigQueryJobSpecExtractSourceTable' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryJobSpecExtractSourceTable(obj: BigQueryJobSpecExtractSourceTable | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'tableRef': toJson_BigQueryJobSpecExtractSourceTableTableRef(obj.tableRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Custom encryption configuration (e.g., Cloud KMS keys).
 *
 * @schema BigQueryJobSpecLoadDestinationEncryptionConfiguration
 */
export interface BigQueryJobSpecLoadDestinationEncryptionConfiguration {
  /**
   * Describes the Cloud KMS encryption key that will be used to protect
   * destination BigQuery table. The BigQuery Service Account associated
   * with your project requires access to this encryption key.
   *
   * @schema BigQueryJobSpecLoadDestinationEncryptionConfiguration#kmsKeyRef
   */
  readonly kmsKeyRef: BigQueryJobSpecLoadDestinationEncryptionConfigurationKmsKeyRef;

  /**
   * Describes the Cloud KMS encryption key version used to protect destination BigQuery table.
   *
   * @schema BigQueryJobSpecLoadDestinationEncryptionConfiguration#kmsKeyVersion
   */
  readonly kmsKeyVersion?: string;

}

/**
 * Converts an object of type 'BigQueryJobSpecLoadDestinationEncryptionConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryJobSpecLoadDestinationEncryptionConfiguration(obj: BigQueryJobSpecLoadDestinationEncryptionConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'kmsKeyRef': toJson_BigQueryJobSpecLoadDestinationEncryptionConfigurationKmsKeyRef(obj.kmsKeyRef),
    'kmsKeyVersion': obj.kmsKeyVersion,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. The destination table to load the data into.
 *
 * @schema BigQueryJobSpecLoadDestinationTable
 */
export interface BigQueryJobSpecLoadDestinationTable {
  /**
   * A reference to the table.
   *
   * @schema BigQueryJobSpecLoadDestinationTable#tableRef
   */
  readonly tableRef: BigQueryJobSpecLoadDestinationTableTableRef;

}

/**
 * Converts an object of type 'BigQueryJobSpecLoadDestinationTable' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryJobSpecLoadDestinationTable(obj: BigQueryJobSpecLoadDestinationTable | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'tableRef': toJson_BigQueryJobSpecLoadDestinationTableTableRef(obj.tableRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Parquet Options for load and make external tables.
 *
 * @schema BigQueryJobSpecLoadParquetOptions
 */
export interface BigQueryJobSpecLoadParquetOptions {
  /**
   * Immutable. If sourceFormat is set to PARQUET, indicates whether to use schema inference specifically for Parquet LIST logical type.
   *
   * @schema BigQueryJobSpecLoadParquetOptions#enableListInference
   */
  readonly enableListInference?: boolean;

  /**
   * Immutable. If sourceFormat is set to PARQUET, indicates whether to infer Parquet ENUM logical type as STRING instead of BYTES by default.
   *
   * @schema BigQueryJobSpecLoadParquetOptions#enumAsString
   */
  readonly enumAsString?: boolean;

}

/**
 * Converts an object of type 'BigQueryJobSpecLoadParquetOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryJobSpecLoadParquetOptions(obj: BigQueryJobSpecLoadParquetOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enableListInference': obj.enableListInference,
    'enumAsString': obj.enumAsString,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Time-based partitioning specification for the destination table.
 *
 * @schema BigQueryJobSpecLoadTimePartitioning
 */
export interface BigQueryJobSpecLoadTimePartitioning {
  /**
   * Immutable. Number of milliseconds for which to keep the storage for a partition. A wrapper is used here because 0 is an invalid value.
   *
   * @schema BigQueryJobSpecLoadTimePartitioning#expirationMs
   */
  readonly expirationMs?: string;

  /**
   * Immutable. If not set, the table is partitioned by pseudo column '_PARTITIONTIME'; if set, the table is partitioned by this field.
   * The field must be a top-level TIMESTAMP or DATE field. Its mode must be NULLABLE or REQUIRED.
   * A wrapper is used here because an empty string is an invalid value.
   *
   * @schema BigQueryJobSpecLoadTimePartitioning#field
   */
  readonly field?: string;

  /**
   * Immutable. The only type supported is DAY, which will generate one partition per day. Providing an empty string used to cause an error,
   * but in OnePlatform the field will be treated as unset.
   *
   * @schema BigQueryJobSpecLoadTimePartitioning#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'BigQueryJobSpecLoadTimePartitioning' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryJobSpecLoadTimePartitioning(obj: BigQueryJobSpecLoadTimePartitioning | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'expirationMs': obj.expirationMs,
    'field': obj.field,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Specifies the default dataset to use for unqualified table names in the query. Note that this does not alter behavior of unqualified dataset names.
 *
 * @schema BigQueryJobSpecQueryDefaultDataset
 */
export interface BigQueryJobSpecQueryDefaultDataset {
  /**
   * A reference to the dataset.
   *
   * @schema BigQueryJobSpecQueryDefaultDataset#datasetRef
   */
  readonly datasetRef: BigQueryJobSpecQueryDefaultDatasetDatasetRef;

}

/**
 * Converts an object of type 'BigQueryJobSpecQueryDefaultDataset' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryJobSpecQueryDefaultDataset(obj: BigQueryJobSpecQueryDefaultDataset | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'datasetRef': toJson_BigQueryJobSpecQueryDefaultDatasetDatasetRef(obj.datasetRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Custom encryption configuration (e.g., Cloud KMS keys).
 *
 * @schema BigQueryJobSpecQueryDestinationEncryptionConfiguration
 */
export interface BigQueryJobSpecQueryDestinationEncryptionConfiguration {
  /**
   * Describes the Cloud KMS encryption key that will be used to protect
   * destination BigQuery table. The BigQuery Service Account associated
   * with your project requires access to this encryption key.
   *
   * @schema BigQueryJobSpecQueryDestinationEncryptionConfiguration#kmsKeyRef
   */
  readonly kmsKeyRef: BigQueryJobSpecQueryDestinationEncryptionConfigurationKmsKeyRef;

  /**
   * Describes the Cloud KMS encryption key version used to protect destination BigQuery table.
   *
   * @schema BigQueryJobSpecQueryDestinationEncryptionConfiguration#kmsKeyVersion
   */
  readonly kmsKeyVersion?: string;

}

/**
 * Converts an object of type 'BigQueryJobSpecQueryDestinationEncryptionConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryJobSpecQueryDestinationEncryptionConfiguration(obj: BigQueryJobSpecQueryDestinationEncryptionConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'kmsKeyRef': toJson_BigQueryJobSpecQueryDestinationEncryptionConfigurationKmsKeyRef(obj.kmsKeyRef),
    'kmsKeyVersion': obj.kmsKeyVersion,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Describes the table where the query results should be stored.
 * This property must be set for large results that exceed the maximum response size.
 * For queries that produce anonymous (cached) results, this field will be populated by BigQuery.
 *
 * @schema BigQueryJobSpecQueryDestinationTable
 */
export interface BigQueryJobSpecQueryDestinationTable {
  /**
   * A reference to the table.
   *
   * @schema BigQueryJobSpecQueryDestinationTable#tableRef
   */
  readonly tableRef: BigQueryJobSpecQueryDestinationTableTableRef;

}

/**
 * Converts an object of type 'BigQueryJobSpecQueryDestinationTable' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryJobSpecQueryDestinationTable(obj: BigQueryJobSpecQueryDestinationTable | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'tableRef': toJson_BigQueryJobSpecQueryDestinationTableTableRef(obj.tableRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Options controlling the execution of scripts.
 *
 * @schema BigQueryJobSpecQueryScriptOptions
 */
export interface BigQueryJobSpecQueryScriptOptions {
  /**
   * Immutable. Determines which statement in the script represents the "key result",
   * used to populate the schema and query results of the script job. Possible values: ["LAST", "FIRST_SELECT"].
   *
   * @schema BigQueryJobSpecQueryScriptOptions#keyResultStatement
   */
  readonly keyResultStatement?: string;

  /**
   * Immutable. Limit on the number of bytes billed per statement. Exceeding this budget results in an error.
   *
   * @schema BigQueryJobSpecQueryScriptOptions#statementByteBudget
   */
  readonly statementByteBudget?: string;

  /**
   * Immutable. Timeout period for each statement in a script.
   *
   * @schema BigQueryJobSpecQueryScriptOptions#statementTimeoutMs
   */
  readonly statementTimeoutMs?: string;

}

/**
 * Converts an object of type 'BigQueryJobSpecQueryScriptOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryJobSpecQueryScriptOptions(obj: BigQueryJobSpecQueryScriptOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'keyResultStatement': obj.keyResultStatement,
    'statementByteBudget': obj.statementByteBudget,
    'statementTimeoutMs': obj.statementTimeoutMs,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema BigQueryJobSpecQueryUserDefinedFunctionResources
 */
export interface BigQueryJobSpecQueryUserDefinedFunctionResources {
  /**
   * Immutable. An inline resource that contains code for a user-defined function (UDF).
   * Providing a inline code resource is equivalent to providing a URI for a file containing the same code.
   *
   * @schema BigQueryJobSpecQueryUserDefinedFunctionResources#inlineCode
   */
  readonly inlineCode?: string;

  /**
   * Immutable. A code resource to load from a Google Cloud Storage URI (gs://bucket/path).
   *
   * @schema BigQueryJobSpecQueryUserDefinedFunctionResources#resourceUri
   */
  readonly resourceUri?: string;

}

/**
 * Converts an object of type 'BigQueryJobSpecQueryUserDefinedFunctionResources' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryJobSpecQueryUserDefinedFunctionResources(obj: BigQueryJobSpecQueryUserDefinedFunctionResources | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'inlineCode': obj.inlineCode,
    'resourceUri': obj.resourceUri,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes the Cloud KMS encryption key that will be used to protect
 * destination BigQuery table. The BigQuery Service Account associated
 * with your project requires access to this encryption key.
 *
 * @schema BigQueryJobSpecCopyDestinationEncryptionConfigurationKmsKeyRef
 */
export interface BigQueryJobSpecCopyDestinationEncryptionConfigurationKmsKeyRef {
  /**
   * Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.
   *
   * @schema BigQueryJobSpecCopyDestinationEncryptionConfigurationKmsKeyRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema BigQueryJobSpecCopyDestinationEncryptionConfigurationKmsKeyRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema BigQueryJobSpecCopyDestinationEncryptionConfigurationKmsKeyRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'BigQueryJobSpecCopyDestinationEncryptionConfigurationKmsKeyRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryJobSpecCopyDestinationEncryptionConfigurationKmsKeyRef(obj: BigQueryJobSpecCopyDestinationEncryptionConfigurationKmsKeyRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A reference to the table.
 *
 * @schema BigQueryJobSpecCopyDestinationTableTableRef
 */
export interface BigQueryJobSpecCopyDestinationTableTableRef {
  /**
   * Allowed value: The `selfLink` field of a `BigQueryTable` resource.
   *
   * @schema BigQueryJobSpecCopyDestinationTableTableRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema BigQueryJobSpecCopyDestinationTableTableRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema BigQueryJobSpecCopyDestinationTableTableRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'BigQueryJobSpecCopyDestinationTableTableRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryJobSpecCopyDestinationTableTableRef(obj: BigQueryJobSpecCopyDestinationTableTableRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A reference to the table.
 *
 * @schema BigQueryJobSpecCopySourceTablesTableRef
 */
export interface BigQueryJobSpecCopySourceTablesTableRef {
  /**
   * Allowed value: The `selfLink` field of a `BigQueryTable` resource.
   *
   * @schema BigQueryJobSpecCopySourceTablesTableRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema BigQueryJobSpecCopySourceTablesTableRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema BigQueryJobSpecCopySourceTablesTableRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'BigQueryJobSpecCopySourceTablesTableRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryJobSpecCopySourceTablesTableRef(obj: BigQueryJobSpecCopySourceTablesTableRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A reference to the table.
 *
 * @schema BigQueryJobSpecExtractSourceTableTableRef
 */
export interface BigQueryJobSpecExtractSourceTableTableRef {
  /**
   * Allowed value: The `selfLink` field of a `BigQueryTable` resource.
   *
   * @schema BigQueryJobSpecExtractSourceTableTableRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema BigQueryJobSpecExtractSourceTableTableRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema BigQueryJobSpecExtractSourceTableTableRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'BigQueryJobSpecExtractSourceTableTableRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryJobSpecExtractSourceTableTableRef(obj: BigQueryJobSpecExtractSourceTableTableRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes the Cloud KMS encryption key that will be used to protect
 * destination BigQuery table. The BigQuery Service Account associated
 * with your project requires access to this encryption key.
 *
 * @schema BigQueryJobSpecLoadDestinationEncryptionConfigurationKmsKeyRef
 */
export interface BigQueryJobSpecLoadDestinationEncryptionConfigurationKmsKeyRef {
  /**
   * Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.
   *
   * @schema BigQueryJobSpecLoadDestinationEncryptionConfigurationKmsKeyRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema BigQueryJobSpecLoadDestinationEncryptionConfigurationKmsKeyRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema BigQueryJobSpecLoadDestinationEncryptionConfigurationKmsKeyRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'BigQueryJobSpecLoadDestinationEncryptionConfigurationKmsKeyRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryJobSpecLoadDestinationEncryptionConfigurationKmsKeyRef(obj: BigQueryJobSpecLoadDestinationEncryptionConfigurationKmsKeyRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A reference to the table.
 *
 * @schema BigQueryJobSpecLoadDestinationTableTableRef
 */
export interface BigQueryJobSpecLoadDestinationTableTableRef {
  /**
   * Allowed value: The `selfLink` field of a `BigQueryTable` resource.
   *
   * @schema BigQueryJobSpecLoadDestinationTableTableRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema BigQueryJobSpecLoadDestinationTableTableRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema BigQueryJobSpecLoadDestinationTableTableRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'BigQueryJobSpecLoadDestinationTableTableRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryJobSpecLoadDestinationTableTableRef(obj: BigQueryJobSpecLoadDestinationTableTableRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A reference to the dataset.
 *
 * @schema BigQueryJobSpecQueryDefaultDatasetDatasetRef
 */
export interface BigQueryJobSpecQueryDefaultDatasetDatasetRef {
  /**
   * Allowed value: The `selfLink` field of a `BigQueryDataset` resource.
   *
   * @schema BigQueryJobSpecQueryDefaultDatasetDatasetRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema BigQueryJobSpecQueryDefaultDatasetDatasetRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema BigQueryJobSpecQueryDefaultDatasetDatasetRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'BigQueryJobSpecQueryDefaultDatasetDatasetRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryJobSpecQueryDefaultDatasetDatasetRef(obj: BigQueryJobSpecQueryDefaultDatasetDatasetRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes the Cloud KMS encryption key that will be used to protect
 * destination BigQuery table. The BigQuery Service Account associated
 * with your project requires access to this encryption key.
 *
 * @schema BigQueryJobSpecQueryDestinationEncryptionConfigurationKmsKeyRef
 */
export interface BigQueryJobSpecQueryDestinationEncryptionConfigurationKmsKeyRef {
  /**
   * Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.
   *
   * @schema BigQueryJobSpecQueryDestinationEncryptionConfigurationKmsKeyRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema BigQueryJobSpecQueryDestinationEncryptionConfigurationKmsKeyRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema BigQueryJobSpecQueryDestinationEncryptionConfigurationKmsKeyRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'BigQueryJobSpecQueryDestinationEncryptionConfigurationKmsKeyRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryJobSpecQueryDestinationEncryptionConfigurationKmsKeyRef(obj: BigQueryJobSpecQueryDestinationEncryptionConfigurationKmsKeyRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A reference to the table.
 *
 * @schema BigQueryJobSpecQueryDestinationTableTableRef
 */
export interface BigQueryJobSpecQueryDestinationTableTableRef {
  /**
   * Allowed value: The `selfLink` field of a `BigQueryTable` resource.
   *
   * @schema BigQueryJobSpecQueryDestinationTableTableRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema BigQueryJobSpecQueryDestinationTableTableRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema BigQueryJobSpecQueryDestinationTableTableRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'BigQueryJobSpecQueryDestinationTableTableRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryJobSpecQueryDestinationTableTableRef(obj: BigQueryJobSpecQueryDestinationTableTableRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema BigQueryRoutine
 */
export class BigQueryRoutine extends ApiObject {
  /**
   * Returns the apiVersion and kind for "BigQueryRoutine"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'bigquery.cnrm.cloud.google.com/v1beta1',
    kind: 'BigQueryRoutine',
  }

  /**
   * Renders a Kubernetes manifest for "BigQueryRoutine".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: BigQueryRoutineProps): any {
    return {
      ...BigQueryRoutine.GVK,
      ...toJson_BigQueryRoutineProps(props),
    };
  }

  /**
   * Defines a "BigQueryRoutine" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: BigQueryRoutineProps) {
    super(scope, id, {
      ...BigQueryRoutine.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...BigQueryRoutine.GVK,
      ...toJson_BigQueryRoutineProps(resolved),
    };
  }
}

/**
 * @schema BigQueryRoutine
 */
export interface BigQueryRoutineProps {
  /**
   * @schema BigQueryRoutine#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema BigQueryRoutine#spec
   */
  readonly spec: BigQueryRoutineSpec;

}

/**
 * Converts an object of type 'BigQueryRoutineProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryRoutineProps(obj: BigQueryRoutineProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_BigQueryRoutineSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema BigQueryRoutineSpec
 */
export interface BigQueryRoutineSpec {
  /**
   * Input/output argument of a function or a stored procedure.
   *
   * @schema BigQueryRoutineSpec#arguments
   */
  readonly arguments?: BigQueryRoutineSpecArguments[];

  /**
   * The ID of the dataset containing this routine.
   *
   * @schema BigQueryRoutineSpec#datasetRef
   */
  readonly datasetRef: BigQueryRoutineSpecDatasetRef;

  /**
   * The body of the routine. For functions, this is the expression in the AS clause.
   * If language=SQL, it is the substring inside (but excluding) the parentheses.
   *
   * @schema BigQueryRoutineSpec#definitionBody
   */
  readonly definitionBody: string;

  /**
   * The description of the routine if defined.
   *
   * @schema BigQueryRoutineSpec#description
   */
  readonly description?: string;

  /**
   * The determinism level of the JavaScript UDF if defined. Possible values: ["DETERMINISM_LEVEL_UNSPECIFIED", "DETERMINISTIC", "NOT_DETERMINISTIC"].
   *
   * @schema BigQueryRoutineSpec#determinismLevel
   */
  readonly determinismLevel?: string;

  /**
   * Optional. If language = "JAVASCRIPT", this field stores the path of the
   * imported JAVASCRIPT libraries.
   *
   * @schema BigQueryRoutineSpec#importedLibraries
   */
  readonly importedLibraries?: string[];

  /**
   * The language of the routine. Possible values: ["SQL", "JAVASCRIPT"].
   *
   * @schema BigQueryRoutineSpec#language
   */
  readonly language?: string;

  /**
   * The project that this resource belongs to.
   *
   * @schema BigQueryRoutineSpec#projectRef
   */
  readonly projectRef: BigQueryRoutineSpecProjectRef;

  /**
   * Immutable. Optional. The routineId of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
   *
   * @schema BigQueryRoutineSpec#resourceID
   */
  readonly resourceId?: string;

  /**
   * Optional. Can be set only if routineType = "TABLE_VALUED_FUNCTION".
   *
   * If absent, the return table type is inferred from definitionBody at query time in each query
   * that references this routine. If present, then the columns in the evaluated table result will
   * be cast to match the column types specificed in return table type, at query time.
   *
   * @schema BigQueryRoutineSpec#returnTableType
   */
  readonly returnTableType?: string;

  /**
   * A JSON schema for the return type. Optional if language = "SQL"; required otherwise.
   * If absent, the return type is inferred from definitionBody at query time in each query
   * that references this routine. If present, then the evaluated result will be cast to
   * the specified returned type at query time. ~>**NOTE**: Because this field expects a JSON
   * string, any changes to the string will create a diff, even if the JSON itself hasn't
   * changed. If the API returns a different value for the same schema, e.g. it switche
   * d the order of values or replaced STRUCT field type with RECORD field type, we currently
   * cannot suppress the recurring diff this causes. As a workaround, we recommend using
   * the schema as returned by the API.
   *
   * @schema BigQueryRoutineSpec#returnType
   */
  readonly returnType?: string;

  /**
   * Immutable. The type of routine. Possible values: ["SCALAR_FUNCTION", "PROCEDURE", "TABLE_VALUED_FUNCTION"].
   *
   * @schema BigQueryRoutineSpec#routineType
   */
  readonly routineType?: string;

}

/**
 * Converts an object of type 'BigQueryRoutineSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryRoutineSpec(obj: BigQueryRoutineSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'arguments': obj.arguments?.map(y => toJson_BigQueryRoutineSpecArguments(y)),
    'datasetRef': toJson_BigQueryRoutineSpecDatasetRef(obj.datasetRef),
    'definitionBody': obj.definitionBody,
    'description': obj.description,
    'determinismLevel': obj.determinismLevel,
    'importedLibraries': obj.importedLibraries?.map(y => y),
    'language': obj.language,
    'projectRef': toJson_BigQueryRoutineSpecProjectRef(obj.projectRef),
    'resourceID': obj.resourceId,
    'returnTableType': obj.returnTableType,
    'returnType': obj.returnType,
    'routineType': obj.routineType,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema BigQueryRoutineSpecArguments
 */
export interface BigQueryRoutineSpecArguments {
  /**
   * Defaults to FIXED_TYPE. Default value: "FIXED_TYPE" Possible values: ["FIXED_TYPE", "ANY_TYPE"].
   *
   * @default FIXED_TYPE. Default value: "FIXED_TYPE" Possible values: ["FIXED_TYPE", "ANY_TYPE"].
   * @schema BigQueryRoutineSpecArguments#argumentKind
   */
  readonly argumentKind?: string;

  /**
   * A JSON schema for the data type. Required unless argumentKind = ANY_TYPE.
   * ~>**NOTE**: Because this field expects a JSON string, any changes to the string
   * will create a diff, even if the JSON itself hasn't changed. If the API returns
   * a different value for the same schema, e.g. it switched the order of values
   * or replaced STRUCT field type with RECORD field type, we currently cannot
   * suppress the recurring diff this causes. As a workaround, we recommend using
   * the schema as returned by the API.
   *
   * @schema BigQueryRoutineSpecArguments#dataType
   */
  readonly dataType?: string;

  /**
   * Specifies whether the argument is input or output. Can be set for procedures only. Possible values: ["IN", "OUT", "INOUT"].
   *
   * @schema BigQueryRoutineSpecArguments#mode
   */
  readonly mode?: string;

  /**
   * The name of this argument. Can be absent for function return argument.
   *
   * @schema BigQueryRoutineSpecArguments#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'BigQueryRoutineSpecArguments' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryRoutineSpecArguments(obj: BigQueryRoutineSpecArguments | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'argumentKind': obj.argumentKind,
    'dataType': obj.dataType,
    'mode': obj.mode,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The ID of the dataset containing this routine.
 *
 * @schema BigQueryRoutineSpecDatasetRef
 */
export interface BigQueryRoutineSpecDatasetRef {
  /**
   * Allowed value: The `name` field of a `BigQueryDataset` resource.
   *
   * @schema BigQueryRoutineSpecDatasetRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema BigQueryRoutineSpecDatasetRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema BigQueryRoutineSpecDatasetRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'BigQueryRoutineSpecDatasetRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryRoutineSpecDatasetRef(obj: BigQueryRoutineSpecDatasetRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The project that this resource belongs to.
 *
 * @schema BigQueryRoutineSpecProjectRef
 */
export interface BigQueryRoutineSpecProjectRef {
  /**
   * Allowed value: The `name` field of a `Project` resource.
   *
   * @schema BigQueryRoutineSpecProjectRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema BigQueryRoutineSpecProjectRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema BigQueryRoutineSpecProjectRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'BigQueryRoutineSpecProjectRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryRoutineSpecProjectRef(obj: BigQueryRoutineSpecProjectRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema BigQueryTable
 */
export class BigQueryTable extends ApiObject {
  /**
   * Returns the apiVersion and kind for "BigQueryTable"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'bigquery.cnrm.cloud.google.com/v1beta1',
    kind: 'BigQueryTable',
  }

  /**
   * Renders a Kubernetes manifest for "BigQueryTable".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: BigQueryTableProps): any {
    return {
      ...BigQueryTable.GVK,
      ...toJson_BigQueryTableProps(props),
    };
  }

  /**
   * Defines a "BigQueryTable" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: BigQueryTableProps) {
    super(scope, id, {
      ...BigQueryTable.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...BigQueryTable.GVK,
      ...toJson_BigQueryTableProps(resolved),
    };
  }
}

/**
 * @schema BigQueryTable
 */
export interface BigQueryTableProps {
  /**
   * @schema BigQueryTable#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema BigQueryTable#spec
   */
  readonly spec: BigQueryTableSpec;

}

/**
 * Converts an object of type 'BigQueryTableProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryTableProps(obj: BigQueryTableProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_BigQueryTableSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema BigQueryTableSpec
 */
export interface BigQueryTableSpec {
  /**
   * Specifies column names to use for data clustering. Up to four top-level columns are allowed, and should be specified in descending priority order.
   *
   * @schema BigQueryTableSpec#clustering
   */
  readonly clustering?: string[];

  /**
   * @schema BigQueryTableSpec#datasetRef
   */
  readonly datasetRef: BigQueryTableSpecDatasetRef;

  /**
   * The field description.
   *
   * @schema BigQueryTableSpec#description
   */
  readonly description?: string;

  /**
   * Immutable. Specifies how the table should be encrypted. If left blank, the table will be encrypted with a Google-managed key; that process is transparent to the user.
   *
   * @schema BigQueryTableSpec#encryptionConfiguration
   */
  readonly encryptionConfiguration?: BigQueryTableSpecEncryptionConfiguration;

  /**
   * The time when this table expires, in milliseconds since the epoch. If not present, the table will persist indefinitely. Expired tables will be deleted and their storage reclaimed.
   *
   * @schema BigQueryTableSpec#expirationTime
   */
  readonly expirationTime?: number;

  /**
   * Describes the data format, location, and other properties of a table stored outside of BigQuery. By defining these properties, the data source can then be queried as if it were a standard BigQuery table.
   *
   * @schema BigQueryTableSpec#externalDataConfiguration
   */
  readonly externalDataConfiguration?: BigQueryTableSpecExternalDataConfiguration;

  /**
   * A descriptive name for the table.
   *
   * @schema BigQueryTableSpec#friendlyName
   */
  readonly friendlyName?: string;

  /**
   * If specified, configures this table as a materialized view.
   *
   * @schema BigQueryTableSpec#materializedView
   */
  readonly materializedView?: BigQueryTableSpecMaterializedView;

  /**
   * If specified, configures range-based partitioning for this table.
   *
   * @schema BigQueryTableSpec#rangePartitioning
   */
  readonly rangePartitioning?: BigQueryTableSpecRangePartitioning;

  /**
   * Immutable. Optional. The tableId of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
   *
   * @schema BigQueryTableSpec#resourceID
   */
  readonly resourceId?: string;

  /**
   * A JSON schema for the table.
   *
   * @schema BigQueryTableSpec#schema
   */
  readonly schema?: string;

  /**
   * If specified, configures time-based partitioning for this table.
   *
   * @schema BigQueryTableSpec#timePartitioning
   */
  readonly timePartitioning?: BigQueryTableSpecTimePartitioning;

  /**
   * If specified, configures this table as a view.
   *
   * @schema BigQueryTableSpec#view
   */
  readonly view?: BigQueryTableSpecView;

}

/**
 * Converts an object of type 'BigQueryTableSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryTableSpec(obj: BigQueryTableSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'clustering': obj.clustering?.map(y => y),
    'datasetRef': toJson_BigQueryTableSpecDatasetRef(obj.datasetRef),
    'description': obj.description,
    'encryptionConfiguration': toJson_BigQueryTableSpecEncryptionConfiguration(obj.encryptionConfiguration),
    'expirationTime': obj.expirationTime,
    'externalDataConfiguration': toJson_BigQueryTableSpecExternalDataConfiguration(obj.externalDataConfiguration),
    'friendlyName': obj.friendlyName,
    'materializedView': toJson_BigQueryTableSpecMaterializedView(obj.materializedView),
    'rangePartitioning': toJson_BigQueryTableSpecRangePartitioning(obj.rangePartitioning),
    'resourceID': obj.resourceId,
    'schema': obj.schema,
    'timePartitioning': toJson_BigQueryTableSpecTimePartitioning(obj.timePartitioning),
    'view': toJson_BigQueryTableSpecView(obj.view),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema BigQueryTableSpecDatasetRef
 */
export interface BigQueryTableSpecDatasetRef {
  /**
   * Allowed value: The `name` field of a `BigQueryDataset` resource.
   *
   * @schema BigQueryTableSpecDatasetRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema BigQueryTableSpecDatasetRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema BigQueryTableSpecDatasetRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'BigQueryTableSpecDatasetRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryTableSpecDatasetRef(obj: BigQueryTableSpecDatasetRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Specifies how the table should be encrypted. If left blank, the table will be encrypted with a Google-managed key; that process is transparent to the user.
 *
 * @schema BigQueryTableSpecEncryptionConfiguration
 */
export interface BigQueryTableSpecEncryptionConfiguration {
  /**
   * @schema BigQueryTableSpecEncryptionConfiguration#kmsKeyRef
   */
  readonly kmsKeyRef: BigQueryTableSpecEncryptionConfigurationKmsKeyRef;

  /**
   * The self link or full name of the kms key version used to encrypt this table.
   *
   * @schema BigQueryTableSpecEncryptionConfiguration#kmsKeyVersion
   */
  readonly kmsKeyVersion?: string;

}

/**
 * Converts an object of type 'BigQueryTableSpecEncryptionConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryTableSpecEncryptionConfiguration(obj: BigQueryTableSpecEncryptionConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'kmsKeyRef': toJson_BigQueryTableSpecEncryptionConfigurationKmsKeyRef(obj.kmsKeyRef),
    'kmsKeyVersion': obj.kmsKeyVersion,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes the data format, location, and other properties of a table stored outside of BigQuery. By defining these properties, the data source can then be queried as if it were a standard BigQuery table.
 *
 * @schema BigQueryTableSpecExternalDataConfiguration
 */
export interface BigQueryTableSpecExternalDataConfiguration {
  /**
   * Let BigQuery try to autodetect the schema and format of the table.
   *
   * @schema BigQueryTableSpecExternalDataConfiguration#autodetect
   */
  readonly autodetect: boolean;

  /**
   * Additional options if source_format is set to "AVRO".
   *
   * @schema BigQueryTableSpecExternalDataConfiguration#avroOptions
   */
  readonly avroOptions?: BigQueryTableSpecExternalDataConfigurationAvroOptions;

  /**
   * The compression type of the data source. Valid values are "NONE" or "GZIP".
   *
   * @schema BigQueryTableSpecExternalDataConfiguration#compression
   */
  readonly compression?: string;

  /**
   * The connection specifying the credentials to be used to read external storage, such as Azure Blob, Cloud Storage, or S3. The connectionId can have the form "{{project}}.{{location}}.{{connection_id}}" or "projects/{{project}}/locations/{{location}}/connections/{{connection_id}}".
   *
   * @schema BigQueryTableSpecExternalDataConfiguration#connectionId
   */
  readonly connectionId?: string;

  /**
   * Additional properties to set if source_format is set to "CSV".
   *
   * @schema BigQueryTableSpecExternalDataConfiguration#csvOptions
   */
  readonly csvOptions?: BigQueryTableSpecExternalDataConfigurationCsvOptions;

  /**
   * Additional options if source_format is set to "GOOGLE_SHEETS".
   *
   * @schema BigQueryTableSpecExternalDataConfiguration#googleSheetsOptions
   */
  readonly googleSheetsOptions?: BigQueryTableSpecExternalDataConfigurationGoogleSheetsOptions;

  /**
   * When set, configures hive partitioning support. Not all storage formats support hive partitioning -- requesting hive partitioning on an unsupported format will lead to an error, as will providing an invalid specification.
   *
   * @schema BigQueryTableSpecExternalDataConfiguration#hivePartitioningOptions
   */
  readonly hivePartitioningOptions?: BigQueryTableSpecExternalDataConfigurationHivePartitioningOptions;

  /**
   * Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false.
   *
   * @schema BigQueryTableSpecExternalDataConfiguration#ignoreUnknownValues
   */
  readonly ignoreUnknownValues?: boolean;

  /**
   * Additional properties to set if sourceFormat is set to JSON.".
   *
   * @schema BigQueryTableSpecExternalDataConfiguration#jsonOptions
   */
  readonly jsonOptions?: BigQueryTableSpecExternalDataConfigurationJsonOptions;

  /**
   * The maximum number of bad records that BigQuery can ignore when reading data.
   *
   * @schema BigQueryTableSpecExternalDataConfiguration#maxBadRecords
   */
  readonly maxBadRecords?: number;

  /**
   * Metadata Cache Mode for the table. Set this to enable caching of metadata from external data source.
   *
   * @schema BigQueryTableSpecExternalDataConfiguration#metadataCacheMode
   */
  readonly metadataCacheMode?: string;

  /**
   * Object Metadata is used to create Object Tables. Object Tables contain a listing of objects (with their metadata) found at the sourceUris. If ObjectMetadata is set, sourceFormat should be omitted.
   *
   * @schema BigQueryTableSpecExternalDataConfiguration#objectMetadata
   */
  readonly objectMetadata?: string;

  /**
   * Additional properties to set if sourceFormat is set to PARQUET.".
   *
   * @schema BigQueryTableSpecExternalDataConfiguration#parquetOptions
   */
  readonly parquetOptions?: BigQueryTableSpecExternalDataConfigurationParquetOptions;

  /**
   * When creating an external table, the user can provide a reference file with the table schema. This is enabled for the following formats: AVRO, PARQUET, ORC.
   *
   * @schema BigQueryTableSpecExternalDataConfiguration#referenceFileSchemaUri
   */
  readonly referenceFileSchemaUri?: string;

  /**
   * Immutable. A JSON schema for the external table. Schema is required for CSV and JSON formats and is disallowed for Google Cloud Bigtable, Cloud Datastore backups, and Avro formats when using external tables.
   *
   * @schema BigQueryTableSpecExternalDataConfiguration#schema
   */
  readonly schema?: string;

  /**
   * Please see sourceFormat under ExternalDataConfiguration in Bigquery's public API documentation (https://cloud.google.com/bigquery/docs/reference/rest/v2/tables#externaldataconfiguration) for supported formats. To use "GOOGLE_SHEETS" the scopes must include "googleapis.com/auth/drive.readonly".
   *
   * @schema BigQueryTableSpecExternalDataConfiguration#sourceFormat
   */
  readonly sourceFormat?: string;

  /**
   * A list of the fully-qualified URIs that point to your data in Google Cloud.
   *
   * @schema BigQueryTableSpecExternalDataConfiguration#sourceUris
   */
  readonly sourceUris: string[];

}

/**
 * Converts an object of type 'BigQueryTableSpecExternalDataConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryTableSpecExternalDataConfiguration(obj: BigQueryTableSpecExternalDataConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'autodetect': obj.autodetect,
    'avroOptions': toJson_BigQueryTableSpecExternalDataConfigurationAvroOptions(obj.avroOptions),
    'compression': obj.compression,
    'connectionId': obj.connectionId,
    'csvOptions': toJson_BigQueryTableSpecExternalDataConfigurationCsvOptions(obj.csvOptions),
    'googleSheetsOptions': toJson_BigQueryTableSpecExternalDataConfigurationGoogleSheetsOptions(obj.googleSheetsOptions),
    'hivePartitioningOptions': toJson_BigQueryTableSpecExternalDataConfigurationHivePartitioningOptions(obj.hivePartitioningOptions),
    'ignoreUnknownValues': obj.ignoreUnknownValues,
    'jsonOptions': toJson_BigQueryTableSpecExternalDataConfigurationJsonOptions(obj.jsonOptions),
    'maxBadRecords': obj.maxBadRecords,
    'metadataCacheMode': obj.metadataCacheMode,
    'objectMetadata': obj.objectMetadata,
    'parquetOptions': toJson_BigQueryTableSpecExternalDataConfigurationParquetOptions(obj.parquetOptions),
    'referenceFileSchemaUri': obj.referenceFileSchemaUri,
    'schema': obj.schema,
    'sourceFormat': obj.sourceFormat,
    'sourceUris': obj.sourceUris?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * If specified, configures this table as a materialized view.
 *
 * @schema BigQueryTableSpecMaterializedView
 */
export interface BigQueryTableSpecMaterializedView {
  /**
   * Specifies if BigQuery should automatically refresh materialized view when the base table is updated. The default is true.
   *
   * @schema BigQueryTableSpecMaterializedView#enableRefresh
   */
  readonly enableRefresh?: boolean;

  /**
   * Immutable. A query whose result is persisted.
   *
   * @schema BigQueryTableSpecMaterializedView#query
   */
  readonly query: string;

  /**
   * Specifies maximum frequency at which this materialized view will be refreshed. The default is 1800000.
   *
   * @schema BigQueryTableSpecMaterializedView#refreshIntervalMs
   */
  readonly refreshIntervalMs?: number;

}

/**
 * Converts an object of type 'BigQueryTableSpecMaterializedView' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryTableSpecMaterializedView(obj: BigQueryTableSpecMaterializedView | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enableRefresh': obj.enableRefresh,
    'query': obj.query,
    'refreshIntervalMs': obj.refreshIntervalMs,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * If specified, configures range-based partitioning for this table.
 *
 * @schema BigQueryTableSpecRangePartitioning
 */
export interface BigQueryTableSpecRangePartitioning {
  /**
   * Immutable. The field used to determine how to create a range-based partition.
   *
   * @schema BigQueryTableSpecRangePartitioning#field
   */
  readonly field: string;

  /**
   * Information required to partition based on ranges. Structure is documented below.
   *
   * @schema BigQueryTableSpecRangePartitioning#range
   */
  readonly range: BigQueryTableSpecRangePartitioningRange;

}

/**
 * Converts an object of type 'BigQueryTableSpecRangePartitioning' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryTableSpecRangePartitioning(obj: BigQueryTableSpecRangePartitioning | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'field': obj.field,
    'range': toJson_BigQueryTableSpecRangePartitioningRange(obj.range),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * If specified, configures time-based partitioning for this table.
 *
 * @schema BigQueryTableSpecTimePartitioning
 */
export interface BigQueryTableSpecTimePartitioning {
  /**
   * Number of milliseconds for which to keep the storage for a partition.
   *
   * @schema BigQueryTableSpecTimePartitioning#expirationMs
   */
  readonly expirationMs?: number;

  /**
   * Immutable. The field used to determine how to create a time-based partition. If time-based partitioning is enabled without this value, the table is partitioned based on the load time.
   *
   * @schema BigQueryTableSpecTimePartitioning#field
   */
  readonly field?: string;

  /**
   * If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified.
   *
   * @schema BigQueryTableSpecTimePartitioning#requirePartitionFilter
   */
  readonly requirePartitionFilter?: boolean;

  /**
   * The supported types are DAY, HOUR, MONTH, and YEAR, which will generate one partition per day, hour, month, and year, respectively.
   *
   * @schema BigQueryTableSpecTimePartitioning#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'BigQueryTableSpecTimePartitioning' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryTableSpecTimePartitioning(obj: BigQueryTableSpecTimePartitioning | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'expirationMs': obj.expirationMs,
    'field': obj.field,
    'requirePartitionFilter': obj.requirePartitionFilter,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * If specified, configures this table as a view.
 *
 * @schema BigQueryTableSpecView
 */
export interface BigQueryTableSpecView {
  /**
   * A query that BigQuery executes when the view is referenced.
   *
   * @schema BigQueryTableSpecView#query
   */
  readonly query: string;

  /**
   * Specifies whether to use BigQuery's legacy SQL for this view. The default value is true. If set to false, the view will use BigQuery's standard SQL.
   *
   * @schema BigQueryTableSpecView#useLegacySql
   */
  readonly useLegacySql?: boolean;

}

/**
 * Converts an object of type 'BigQueryTableSpecView' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryTableSpecView(obj: BigQueryTableSpecView | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'query': obj.query,
    'useLegacySql': obj.useLegacySql,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema BigQueryTableSpecEncryptionConfigurationKmsKeyRef
 */
export interface BigQueryTableSpecEncryptionConfigurationKmsKeyRef {
  /**
   * Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.
   *
   * @schema BigQueryTableSpecEncryptionConfigurationKmsKeyRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema BigQueryTableSpecEncryptionConfigurationKmsKeyRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema BigQueryTableSpecEncryptionConfigurationKmsKeyRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'BigQueryTableSpecEncryptionConfigurationKmsKeyRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryTableSpecEncryptionConfigurationKmsKeyRef(obj: BigQueryTableSpecEncryptionConfigurationKmsKeyRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Additional options if source_format is set to "AVRO".
 *
 * @schema BigQueryTableSpecExternalDataConfigurationAvroOptions
 */
export interface BigQueryTableSpecExternalDataConfigurationAvroOptions {
  /**
   * If sourceFormat is set to "AVRO", indicates whether to interpret logical types as the corresponding BigQuery data type (for example, TIMESTAMP), instead of using the raw type (for example, INTEGER).
   *
   * @schema BigQueryTableSpecExternalDataConfigurationAvroOptions#useAvroLogicalTypes
   */
  readonly useAvroLogicalTypes: boolean;

}

/**
 * Converts an object of type 'BigQueryTableSpecExternalDataConfigurationAvroOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryTableSpecExternalDataConfigurationAvroOptions(obj: BigQueryTableSpecExternalDataConfigurationAvroOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'useAvroLogicalTypes': obj.useAvroLogicalTypes,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Additional properties to set if source_format is set to "CSV".
 *
 * @schema BigQueryTableSpecExternalDataConfigurationCsvOptions
 */
export interface BigQueryTableSpecExternalDataConfigurationCsvOptions {
  /**
   * Indicates if BigQuery should accept rows that are missing trailing optional columns.
   *
   * @schema BigQueryTableSpecExternalDataConfigurationCsvOptions#allowJaggedRows
   */
  readonly allowJaggedRows?: boolean;

  /**
   * Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.
   *
   * @schema BigQueryTableSpecExternalDataConfigurationCsvOptions#allowQuotedNewlines
   */
  readonly allowQuotedNewlines?: boolean;

  /**
   * The character encoding of the data. The supported values are UTF-8 or ISO-8859-1.
   *
   * @schema BigQueryTableSpecExternalDataConfigurationCsvOptions#encoding
   */
  readonly encoding?: string;

  /**
   * The separator for fields in a CSV file.
   *
   * @schema BigQueryTableSpecExternalDataConfigurationCsvOptions#fieldDelimiter
   */
  readonly fieldDelimiter?: string;

  /**
   * @schema BigQueryTableSpecExternalDataConfigurationCsvOptions#quote
   */
  readonly quote: string;

  /**
   * The number of rows at the top of a CSV file that BigQuery will skip when reading the data.
   *
   * @schema BigQueryTableSpecExternalDataConfigurationCsvOptions#skipLeadingRows
   */
  readonly skipLeadingRows?: number;

}

/**
 * Converts an object of type 'BigQueryTableSpecExternalDataConfigurationCsvOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryTableSpecExternalDataConfigurationCsvOptions(obj: BigQueryTableSpecExternalDataConfigurationCsvOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'allowJaggedRows': obj.allowJaggedRows,
    'allowQuotedNewlines': obj.allowQuotedNewlines,
    'encoding': obj.encoding,
    'fieldDelimiter': obj.fieldDelimiter,
    'quote': obj.quote,
    'skipLeadingRows': obj.skipLeadingRows,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Additional options if source_format is set to "GOOGLE_SHEETS".
 *
 * @schema BigQueryTableSpecExternalDataConfigurationGoogleSheetsOptions
 */
export interface BigQueryTableSpecExternalDataConfigurationGoogleSheetsOptions {
  /**
   * Range of a sheet to query from. Only used when non-empty. At least one of range or skip_leading_rows must be set. Typical format: "sheet_name!top_left_cell_id:bottom_right_cell_id" For example: "sheet1!A1:B20".
   *
   * @schema BigQueryTableSpecExternalDataConfigurationGoogleSheetsOptions#range
   */
  readonly range?: string;

  /**
   * The number of rows at the top of the sheet that BigQuery will skip when reading the data. At least one of range or skip_leading_rows must be set.
   *
   * @schema BigQueryTableSpecExternalDataConfigurationGoogleSheetsOptions#skipLeadingRows
   */
  readonly skipLeadingRows?: number;

}

/**
 * Converts an object of type 'BigQueryTableSpecExternalDataConfigurationGoogleSheetsOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryTableSpecExternalDataConfigurationGoogleSheetsOptions(obj: BigQueryTableSpecExternalDataConfigurationGoogleSheetsOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'range': obj.range,
    'skipLeadingRows': obj.skipLeadingRows,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * When set, configures hive partitioning support. Not all storage formats support hive partitioning -- requesting hive partitioning on an unsupported format will lead to an error, as will providing an invalid specification.
 *
 * @schema BigQueryTableSpecExternalDataConfigurationHivePartitioningOptions
 */
export interface BigQueryTableSpecExternalDataConfigurationHivePartitioningOptions {
  /**
   * When set, what mode of hive partitioning to use when reading data.
   *
   * @schema BigQueryTableSpecExternalDataConfigurationHivePartitioningOptions#mode
   */
  readonly mode?: string;

  /**
   * If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified.
   *
   * @schema BigQueryTableSpecExternalDataConfigurationHivePartitioningOptions#requirePartitionFilter
   */
  readonly requirePartitionFilter?: boolean;

  /**
   * When hive partition detection is requested, a common for all source uris must be required. The prefix must end immediately before the partition key encoding begins.
   *
   * @schema BigQueryTableSpecExternalDataConfigurationHivePartitioningOptions#sourceUriPrefix
   */
  readonly sourceUriPrefix?: string;

}

/**
 * Converts an object of type 'BigQueryTableSpecExternalDataConfigurationHivePartitioningOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryTableSpecExternalDataConfigurationHivePartitioningOptions(obj: BigQueryTableSpecExternalDataConfigurationHivePartitioningOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'mode': obj.mode,
    'requirePartitionFilter': obj.requirePartitionFilter,
    'sourceUriPrefix': obj.sourceUriPrefix,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Additional properties to set if sourceFormat is set to JSON.".
 *
 * @schema BigQueryTableSpecExternalDataConfigurationJsonOptions
 */
export interface BigQueryTableSpecExternalDataConfigurationJsonOptions {
  /**
   * The character encoding of the data. The supported values are UTF-8, UTF-16BE, UTF-16LE, UTF-32BE, and UTF-32LE. The default value is UTF-8.
   *
   * @schema BigQueryTableSpecExternalDataConfigurationJsonOptions#encoding
   */
  readonly encoding?: string;

}

/**
 * Converts an object of type 'BigQueryTableSpecExternalDataConfigurationJsonOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryTableSpecExternalDataConfigurationJsonOptions(obj: BigQueryTableSpecExternalDataConfigurationJsonOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'encoding': obj.encoding,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Additional properties to set if sourceFormat is set to PARQUET.".
 *
 * @schema BigQueryTableSpecExternalDataConfigurationParquetOptions
 */
export interface BigQueryTableSpecExternalDataConfigurationParquetOptions {
  /**
   * Indicates whether to use schema inference specifically for Parquet LIST logical type.
   *
   * @schema BigQueryTableSpecExternalDataConfigurationParquetOptions#enableListInference
   */
  readonly enableListInference?: boolean;

  /**
   * Indicates whether to infer Parquet ENUM logical type as STRING instead of BYTES by default.
   *
   * @schema BigQueryTableSpecExternalDataConfigurationParquetOptions#enumAsString
   */
  readonly enumAsString?: boolean;

}

/**
 * Converts an object of type 'BigQueryTableSpecExternalDataConfigurationParquetOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryTableSpecExternalDataConfigurationParquetOptions(obj: BigQueryTableSpecExternalDataConfigurationParquetOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enableListInference': obj.enableListInference,
    'enumAsString': obj.enumAsString,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Information required to partition based on ranges. Structure is documented below.
 *
 * @schema BigQueryTableSpecRangePartitioningRange
 */
export interface BigQueryTableSpecRangePartitioningRange {
  /**
   * End of the range partitioning, exclusive.
   *
   * @schema BigQueryTableSpecRangePartitioningRange#end
   */
  readonly end: number;

  /**
   * The width of each range within the partition.
   *
   * @schema BigQueryTableSpecRangePartitioningRange#interval
   */
  readonly interval: number;

  /**
   * Start of the range partitioning, inclusive.
   *
   * @schema BigQueryTableSpecRangePartitioningRange#start
   */
  readonly start: number;

}

/**
 * Converts an object of type 'BigQueryTableSpecRangePartitioningRange' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BigQueryTableSpecRangePartitioningRange(obj: BigQueryTableSpecRangePartitioningRange | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'end': obj.end,
    'interval': obj.interval,
    'start': obj.start,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

