// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 *
 *
 * @schema RedisInstance
 */
export class RedisInstance extends ApiObject {
  /**
   * Returns the apiVersion and kind for "RedisInstance"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'redis.cnrm.cloud.google.com/v1beta1',
    kind: 'RedisInstance',
  }

  /**
   * Renders a Kubernetes manifest for "RedisInstance".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: RedisInstanceProps): any {
    return {
      ...RedisInstance.GVK,
      ...toJson_RedisInstanceProps(props),
    };
  }

  /**
   * Defines a "RedisInstance" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: RedisInstanceProps) {
    super(scope, id, {
      ...RedisInstance.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...RedisInstance.GVK,
      ...toJson_RedisInstanceProps(resolved),
    };
  }
}

/**
 * @schema RedisInstance
 */
export interface RedisInstanceProps {
  /**
   * @schema RedisInstance#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema RedisInstance#spec
   */
  readonly spec: RedisInstanceSpec;

}

/**
 * Converts an object of type 'RedisInstanceProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RedisInstanceProps(obj: RedisInstanceProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_RedisInstanceSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RedisInstanceSpec
 */
export interface RedisInstanceSpec {
  /**
   * Immutable. Only applicable to STANDARD_HA tier which protects the instance
   * against zonal failures by provisioning it across two zones.
   * If provided, it must be a different zone from the one provided in
   * [locationId].
   *
   * @schema RedisInstanceSpec#alternativeLocationId
   */
  readonly alternativeLocationId?: string;

  /**
   * Optional. Indicates whether OSS Redis AUTH is enabled for the
   * instance. If set to "true" AUTH is enabled on the instance.
   * Default value is "false" meaning AUTH is disabled.
   *
   * @schema RedisInstanceSpec#authEnabled
   */
  readonly authEnabled?: boolean;

  /**
   * Output only. AUTH String set on the instance. This field will only be populated if auth_enabled is true.
   *
   * @schema RedisInstanceSpec#authString
   */
  readonly authString?: string;

  /**
   * The network to which the instance is connected. If left
   * unspecified, the default network will be used.
   *
   * @schema RedisInstanceSpec#authorizedNetworkRef
   */
  readonly authorizedNetworkRef?: RedisInstanceSpecAuthorizedNetworkRef;

  /**
   * Immutable. The connection mode of the Redis instance. Default value: "DIRECT_PEERING" Possible values: ["DIRECT_PEERING", "PRIVATE_SERVICE_ACCESS"].
   *
   * @schema RedisInstanceSpec#connectMode
   */
  readonly connectMode?: string;

  /**
   * Immutable. Optional. The KMS key reference that you want to use to
   * encrypt the data at rest for this Redis instance. If this is
   * provided, CMEK is enabled.
   *
   * @schema RedisInstanceSpec#customerManagedKeyRef
   */
  readonly customerManagedKeyRef?: RedisInstanceSpecCustomerManagedKeyRef;

  /**
   * An arbitrary and optional user-provided name for the instance.
   *
   * @schema RedisInstanceSpec#displayName
   */
  readonly displayName?: string;

  /**
   * Immutable. The zone where the instance will be provisioned. If not provided,
   * the service will choose a zone for the instance. For STANDARD_HA tier,
   * instances will be created across two zones for protection against
   * zonal failures. If [alternativeLocationId] is also provided, it must
   * be different from [locationId].
   *
   * @schema RedisInstanceSpec#locationId
   */
  readonly locationId?: string;

  /**
   * Maintenance policy for an instance.
   *
   * @schema RedisInstanceSpec#maintenancePolicy
   */
  readonly maintenancePolicy?: RedisInstanceSpecMaintenancePolicy;

  /**
   * Upcoming maintenance schedule.
   *
   * @schema RedisInstanceSpec#maintenanceSchedule
   */
  readonly maintenanceSchedule?: RedisInstanceSpecMaintenanceSchedule[];

  /**
   * Redis memory size in GiB.
   *
   * @schema RedisInstanceSpec#memorySizeGb
   */
  readonly memorySizeGb: number;

  /**
   * Persistence configuration for an instance.
   *
   * @schema RedisInstanceSpec#persistenceConfig
   */
  readonly persistenceConfig?: RedisInstanceSpecPersistenceConfig;

  /**
   * Optional. Read replica mode. Can only be specified when trying to create the instance.
   * If not set, Memorystore Redis backend will default to READ_REPLICAS_DISABLED.
   * - READ_REPLICAS_DISABLED: If disabled, read endpoint will not be provided and the
   * instance cannot scale up or down the number of replicas.
   * - READ_REPLICAS_ENABLED: If enabled, read endpoint will be provided and the instance
   * can scale up and down the number of replicas. Possible values: ["READ_REPLICAS_DISABLED", "READ_REPLICAS_ENABLED"].
   *
   * @schema RedisInstanceSpec#readReplicasMode
   */
  readonly readReplicasMode?: string;

  /**
   * Redis configuration parameters, according to http://redis.io/topics/config.
   * Please check Memorystore documentation for the list of supported parameters:
   * https://cloud.google.com/memorystore/docs/redis/reference/rest/v1/projects.locations.instances#Instance.FIELDS.redis_configs.
   *
   * @schema RedisInstanceSpec#redisConfigs
   */
  readonly redisConfigs?: { [key: string]: string };

  /**
   * The version of Redis software. If not provided, latest supported
   * version will be used. Please check the API documentation linked
   * at the top for the latest valid values.
   *
   * @schema RedisInstanceSpec#redisVersion
   */
  readonly redisVersion?: string;

  /**
   * Immutable. The name of the Redis region of the instance.
   *
   * @schema RedisInstanceSpec#region
   */
  readonly region: string;

  /**
   * Optional. The number of replica nodes. The valid range for the Standard Tier with
   * read replicas enabled is [1-5] and defaults to 2. If read replicas are not enabled
   * for a Standard Tier instance, the only valid value is 1 and the default is 1.
   * The valid value for basic tier is 0 and the default is also 0.
   *
   * @schema RedisInstanceSpec#replicaCount
   */
  readonly replicaCount?: number;

  /**
   * Immutable. The CIDR range of internal addresses that are reserved for this
   * instance. If not provided, the service will choose an unused /29
   * block, for example, 10.0.0.0/29 or 192.168.0.0/29. Ranges must be
   * unique and non-overlapping with existing subnets in an authorized
   * network.
   *
   * @schema RedisInstanceSpec#reservedIpRange
   */
  readonly reservedIpRange?: string;

  /**
   * Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
   *
   * @schema RedisInstanceSpec#resourceID
   */
  readonly resourceId?: string;

  /**
   * Optional. Additional IP range for node placement. Required when enabling read replicas on
   * an existing instance. For DIRECT_PEERING mode value must be a CIDR range of size /28, or
   * "auto". For PRIVATE_SERVICE_ACCESS mode value must be the name of an allocated address
   * range associated with the private service access connection, or "auto".
   *
   * @schema RedisInstanceSpec#secondaryIpRange
   */
  readonly secondaryIpRange?: string;

  /**
   * Immutable. The service tier of the instance. Must be one of these values:
   *
   * - BASIC: standalone instance
   * - STANDARD_HA: highly available primary/replica instances Default value: "BASIC" Possible values: ["BASIC", "STANDARD_HA"].
   *
   * @schema RedisInstanceSpec#tier
   */
  readonly tier?: string;

  /**
   * Immutable. The TLS mode of the Redis instance, If not provided, TLS is disabled for the instance.
   *
   * - SERVER_AUTHENTICATION: Client to Server traffic encryption enabled with server authentication Default value: "DISABLED" Possible values: ["SERVER_AUTHENTICATION", "DISABLED"].
   *
   * @schema RedisInstanceSpec#transitEncryptionMode
   */
  readonly transitEncryptionMode?: string;

}

/**
 * Converts an object of type 'RedisInstanceSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RedisInstanceSpec(obj: RedisInstanceSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'alternativeLocationId': obj.alternativeLocationId,
    'authEnabled': obj.authEnabled,
    'authString': obj.authString,
    'authorizedNetworkRef': toJson_RedisInstanceSpecAuthorizedNetworkRef(obj.authorizedNetworkRef),
    'connectMode': obj.connectMode,
    'customerManagedKeyRef': toJson_RedisInstanceSpecCustomerManagedKeyRef(obj.customerManagedKeyRef),
    'displayName': obj.displayName,
    'locationId': obj.locationId,
    'maintenancePolicy': toJson_RedisInstanceSpecMaintenancePolicy(obj.maintenancePolicy),
    'maintenanceSchedule': obj.maintenanceSchedule?.map(y => toJson_RedisInstanceSpecMaintenanceSchedule(y)),
    'memorySizeGb': obj.memorySizeGb,
    'persistenceConfig': toJson_RedisInstanceSpecPersistenceConfig(obj.persistenceConfig),
    'readReplicasMode': obj.readReplicasMode,
    'redisConfigs': ((obj.redisConfigs) === undefined) ? undefined : (Object.entries(obj.redisConfigs).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'redisVersion': obj.redisVersion,
    'region': obj.region,
    'replicaCount': obj.replicaCount,
    'reservedIpRange': obj.reservedIpRange,
    'resourceID': obj.resourceId,
    'secondaryIpRange': obj.secondaryIpRange,
    'tier': obj.tier,
    'transitEncryptionMode': obj.transitEncryptionMode,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The network to which the instance is connected. If left
 * unspecified, the default network will be used.
 *
 * @schema RedisInstanceSpecAuthorizedNetworkRef
 */
export interface RedisInstanceSpecAuthorizedNetworkRef {
  /**
   * Allowed value: The `selfLink` field of a `ComputeNetwork` resource.
   *
   * @schema RedisInstanceSpecAuthorizedNetworkRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema RedisInstanceSpecAuthorizedNetworkRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema RedisInstanceSpecAuthorizedNetworkRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'RedisInstanceSpecAuthorizedNetworkRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RedisInstanceSpecAuthorizedNetworkRef(obj: RedisInstanceSpecAuthorizedNetworkRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Optional. The KMS key reference that you want to use to
 * encrypt the data at rest for this Redis instance. If this is
 * provided, CMEK is enabled.
 *
 * @schema RedisInstanceSpecCustomerManagedKeyRef
 */
export interface RedisInstanceSpecCustomerManagedKeyRef {
  /**
   * Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.
   *
   * @schema RedisInstanceSpecCustomerManagedKeyRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema RedisInstanceSpecCustomerManagedKeyRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema RedisInstanceSpecCustomerManagedKeyRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'RedisInstanceSpecCustomerManagedKeyRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RedisInstanceSpecCustomerManagedKeyRef(obj: RedisInstanceSpecCustomerManagedKeyRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Maintenance policy for an instance.
 *
 * @schema RedisInstanceSpecMaintenancePolicy
 */
export interface RedisInstanceSpecMaintenancePolicy {
  /**
   * Output only. The time when the policy was created.
   * A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
   * resolution and up to nine fractional digits.
   *
   * @schema RedisInstanceSpecMaintenancePolicy#createTime
   */
  readonly createTime?: string;

  /**
   * Optional. Description of what this policy is for.
   * Create/Update methods return INVALID_ARGUMENT if the
   * length is greater than 512.
   *
   * @schema RedisInstanceSpecMaintenancePolicy#description
   */
  readonly description?: string;

  /**
   * Output only. The time when the policy was last updated.
   * A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
   * resolution and up to nine fractional digits.
   *
   * @schema RedisInstanceSpecMaintenancePolicy#updateTime
   */
  readonly updateTime?: string;

  /**
   * Optional. Maintenance window that is applied to resources covered by this policy.
   * Minimum 1. For the current version, the maximum number
   * of weekly_window is expected to be one.
   *
   * @schema RedisInstanceSpecMaintenancePolicy#weeklyMaintenanceWindow
   */
  readonly weeklyMaintenanceWindow?: RedisInstanceSpecMaintenancePolicyWeeklyMaintenanceWindow[];

}

/**
 * Converts an object of type 'RedisInstanceSpecMaintenancePolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RedisInstanceSpecMaintenancePolicy(obj: RedisInstanceSpecMaintenancePolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'createTime': obj.createTime,
    'description': obj.description,
    'updateTime': obj.updateTime,
    'weeklyMaintenanceWindow': obj.weeklyMaintenanceWindow?.map(y => toJson_RedisInstanceSpecMaintenancePolicyWeeklyMaintenanceWindow(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RedisInstanceSpecMaintenanceSchedule
 */
export interface RedisInstanceSpecMaintenanceSchedule {
  /**
   * Output only. The end time of any upcoming scheduled maintenance for this instance.
   * A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
   * resolution and up to nine fractional digits.
   *
   * @schema RedisInstanceSpecMaintenanceSchedule#endTime
   */
  readonly endTime?: string;

  /**
   * Output only. The deadline that the maintenance schedule start time
   * can not go beyond, including reschedule.
   * A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
   * resolution and up to nine fractional digits.
   *
   * @schema RedisInstanceSpecMaintenanceSchedule#scheduleDeadlineTime
   */
  readonly scheduleDeadlineTime?: string;

  /**
   * Output only. The start time of any upcoming scheduled maintenance for this instance.
   * A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
   * resolution and up to nine fractional digits.
   *
   * @schema RedisInstanceSpecMaintenanceSchedule#startTime
   */
  readonly startTime?: string;

}

/**
 * Converts an object of type 'RedisInstanceSpecMaintenanceSchedule' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RedisInstanceSpecMaintenanceSchedule(obj: RedisInstanceSpecMaintenanceSchedule | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'endTime': obj.endTime,
    'scheduleDeadlineTime': obj.scheduleDeadlineTime,
    'startTime': obj.startTime,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Persistence configuration for an instance.
 *
 * @schema RedisInstanceSpecPersistenceConfig
 */
export interface RedisInstanceSpecPersistenceConfig {
  /**
   * Optional. Controls whether Persistence features are enabled. If not provided, the existing value will be used.
   *
   * - DISABLED: 	Persistence is disabled for the instance, and any existing snapshots are deleted.
   * - RDB: RDB based Persistence is enabled. Possible values: ["DISABLED", "RDB"].
   *
   * @schema RedisInstanceSpecPersistenceConfig#persistenceMode
   */
  readonly persistenceMode?: string;

  /**
   * Output only. The next time that a snapshot attempt is scheduled to occur.
   * A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up
   * to nine fractional digits.
   * Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
   *
   * @schema RedisInstanceSpecPersistenceConfig#rdbNextSnapshotTime
   */
  readonly rdbNextSnapshotTime?: string;

  /**
   * Optional. Available snapshot periods for scheduling.
   *
   * - ONE_HOUR:	Snapshot every 1 hour.
   * - SIX_HOURS:	Snapshot every 6 hours.
   * - TWELVE_HOURS:	Snapshot every 12 hours.
   * - TWENTY_FOUR_HOURS:	Snapshot every 24 hours. Possible values: ["ONE_HOUR", "SIX_HOURS", "TWELVE_HOURS", "TWENTY_FOUR_HOURS"].
   *
   * @schema RedisInstanceSpecPersistenceConfig#rdbSnapshotPeriod
   */
  readonly rdbSnapshotPeriod?: string;

  /**
   * Optional. Date and time that the first snapshot was/will be attempted,
   * and to which future snapshots will be aligned. If not provided,
   * the current time will be used.
   * A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution
   * and up to nine fractional digits.
   * Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
   *
   * @schema RedisInstanceSpecPersistenceConfig#rdbSnapshotStartTime
   */
  readonly rdbSnapshotStartTime?: string;

}

/**
 * Converts an object of type 'RedisInstanceSpecPersistenceConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RedisInstanceSpecPersistenceConfig(obj: RedisInstanceSpecPersistenceConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'persistenceMode': obj.persistenceMode,
    'rdbNextSnapshotTime': obj.rdbNextSnapshotTime,
    'rdbSnapshotPeriod': obj.rdbSnapshotPeriod,
    'rdbSnapshotStartTime': obj.rdbSnapshotStartTime,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RedisInstanceSpecMaintenancePolicyWeeklyMaintenanceWindow
 */
export interface RedisInstanceSpecMaintenancePolicyWeeklyMaintenanceWindow {
  /**
   * Required. The day of week that maintenance updates occur.
   *
   * - DAY_OF_WEEK_UNSPECIFIED: The day of the week is unspecified.
   * - MONDAY: Monday
   * - TUESDAY: Tuesday
   * - WEDNESDAY: Wednesday
   * - THURSDAY: Thursday
   * - FRIDAY: Friday
   * - SATURDAY: Saturday
   * - SUNDAY: Sunday Possible values: ["DAY_OF_WEEK_UNSPECIFIED", "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"].
   *
   * @schema RedisInstanceSpecMaintenancePolicyWeeklyMaintenanceWindow#day
   */
  readonly day: string;

  /**
   * Output only. Duration of the maintenance window.
   * The current window is fixed at 1 hour.
   * A duration in seconds with up to nine fractional digits,
   * terminated by 's'. Example: "3.5s".
   *
   * @schema RedisInstanceSpecMaintenancePolicyWeeklyMaintenanceWindow#duration
   */
  readonly duration?: string;

  /**
   * Required. Start time of the window in UTC time.
   *
   * @schema RedisInstanceSpecMaintenancePolicyWeeklyMaintenanceWindow#startTime
   */
  readonly startTime: RedisInstanceSpecMaintenancePolicyWeeklyMaintenanceWindowStartTime;

}

/**
 * Converts an object of type 'RedisInstanceSpecMaintenancePolicyWeeklyMaintenanceWindow' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RedisInstanceSpecMaintenancePolicyWeeklyMaintenanceWindow(obj: RedisInstanceSpecMaintenancePolicyWeeklyMaintenanceWindow | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'day': obj.day,
    'duration': obj.duration,
    'startTime': toJson_RedisInstanceSpecMaintenancePolicyWeeklyMaintenanceWindowStartTime(obj.startTime),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Required. Start time of the window in UTC time.
 *
 * @schema RedisInstanceSpecMaintenancePolicyWeeklyMaintenanceWindowStartTime
 */
export interface RedisInstanceSpecMaintenancePolicyWeeklyMaintenanceWindowStartTime {
  /**
   * Hours of day in 24 hour format. Should be from 0 to 23.
   * An API may choose to allow the value "24:00:00" for scenarios like business closing time.
   *
   * @schema RedisInstanceSpecMaintenancePolicyWeeklyMaintenanceWindowStartTime#hours
   */
  readonly hours?: number;

  /**
   * Minutes of hour of day. Must be from 0 to 59.
   *
   * @schema RedisInstanceSpecMaintenancePolicyWeeklyMaintenanceWindowStartTime#minutes
   */
  readonly minutes?: number;

  /**
   * Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
   *
   * @schema RedisInstanceSpecMaintenancePolicyWeeklyMaintenanceWindowStartTime#nanos
   */
  readonly nanos?: number;

  /**
   * Seconds of minutes of the time. Must normally be from 0 to 59.
   * An API may allow the value 60 if it allows leap-seconds.
   *
   * @schema RedisInstanceSpecMaintenancePolicyWeeklyMaintenanceWindowStartTime#seconds
   */
  readonly seconds?: number;

}

/**
 * Converts an object of type 'RedisInstanceSpecMaintenancePolicyWeeklyMaintenanceWindowStartTime' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RedisInstanceSpecMaintenancePolicyWeeklyMaintenanceWindowStartTime(obj: RedisInstanceSpecMaintenancePolicyWeeklyMaintenanceWindowStartTime | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'hours': obj.hours,
    'minutes': obj.minutes,
    'nanos': obj.nanos,
    'seconds': obj.seconds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

