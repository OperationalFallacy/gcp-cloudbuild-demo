// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 *
 *
 * @schema CloudBuildTrigger
 */
export class CloudBuildTrigger extends ApiObject {
  /**
   * Returns the apiVersion and kind for "CloudBuildTrigger"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'cloudbuild.cnrm.cloud.google.com/v1beta1',
    kind: 'CloudBuildTrigger',
  }

  /**
   * Renders a Kubernetes manifest for "CloudBuildTrigger".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: CloudBuildTriggerProps = {}): any {
    return {
      ...CloudBuildTrigger.GVK,
      ...toJson_CloudBuildTriggerProps(props),
    };
  }

  /**
   * Defines a "CloudBuildTrigger" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: CloudBuildTriggerProps = {}) {
    super(scope, id, {
      ...CloudBuildTrigger.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...CloudBuildTrigger.GVK,
      ...toJson_CloudBuildTriggerProps(resolved),
    };
  }
}

/**
 * @schema CloudBuildTrigger
 */
export interface CloudBuildTriggerProps {
  /**
   * @schema CloudBuildTrigger#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema CloudBuildTrigger#spec
   */
  readonly spec?: CloudBuildTriggerSpec;

}

/**
 * Converts an object of type 'CloudBuildTriggerProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudBuildTriggerProps(obj: CloudBuildTriggerProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_CloudBuildTriggerSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CloudBuildTriggerSpec
 */
export interface CloudBuildTriggerSpec {
  /**
   * Configuration for manual approval to start a build invocation of this BuildTrigger.
   * Builds created by this trigger will require approval before they execute.
   * Any user with a Cloud Build Approver role for the project can approve a build.
   *
   * @schema CloudBuildTriggerSpec#approvalConfig
   */
  readonly approvalConfig?: CloudBuildTriggerSpecApprovalConfig;

  /**
   * BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server event is received.
   *
   * @schema CloudBuildTriggerSpec#bitbucketServerTriggerConfig
   */
  readonly bitbucketServerTriggerConfig?: CloudBuildTriggerSpecBitbucketServerTriggerConfig;

  /**
   * Contents of the build template. Either a filename or build template must be provided.
   *
   * @schema CloudBuildTriggerSpec#build
   */
  readonly build?: CloudBuildTriggerSpecBuild;

  /**
   * Human-readable description of the trigger.
   *
   * @schema CloudBuildTriggerSpec#description
   */
  readonly description?: string;

  /**
   * Whether the trigger is disabled or not. If true, the trigger will never result in a build.
   *
   * @schema CloudBuildTriggerSpec#disabled
   */
  readonly disabled?: boolean;

  /**
   * Path, from the source root, to a file whose contents is used for the template.
   * Either a filename or build template must be provided. Set this only when using trigger_template or github.
   * When using Pub/Sub, Webhook or Manual set the file name using git_file_source instead.
   *
   * @schema CloudBuildTriggerSpec#filename
   */
  readonly filename?: string;

  /**
   * A Common Expression Language string. Used only with Pub/Sub and Webhook.
   *
   * @schema CloudBuildTriggerSpec#filter
   */
  readonly filter?: string;

  /**
   * The file source describing the local or remote Build template.
   *
   * @schema CloudBuildTriggerSpec#gitFileSource
   */
  readonly gitFileSource?: CloudBuildTriggerSpecGitFileSource;

  /**
   * Describes the configuration of a trigger that creates a build whenever a GitHub event is received.
   *
   * One of 'trigger_template', 'github', 'pubsub_config' or 'webhook_config' must be provided.
   *
   * @schema CloudBuildTriggerSpec#github
   */
  readonly github?: CloudBuildTriggerSpecGithub;

  /**
   * ignoredFiles and includedFiles are file glob matches using https://golang.org/pkg/path/filepath/#Match
   * extended with support for '**'.
   *
   * If ignoredFiles and changed files are both empty, then they are not
   * used to determine whether or not to trigger a build.
   *
   * If ignoredFiles is not empty, then we ignore any files that match any
   * of the ignored_file globs. If the change has no files that are outside
   * of the ignoredFiles globs, then we do not trigger a build.
   *
   * @schema CloudBuildTriggerSpec#ignoredFiles
   */
  readonly ignoredFiles?: string[];

  /**
   * Build logs will be sent back to GitHub as part of the checkrun
   * result.  Values can be INCLUDE_BUILD_LOGS_UNSPECIFIED or
   * INCLUDE_BUILD_LOGS_WITH_STATUS Possible values: ["INCLUDE_BUILD_LOGS_UNSPECIFIED", "INCLUDE_BUILD_LOGS_WITH_STATUS"].
   *
   * @schema CloudBuildTriggerSpec#includeBuildLogs
   */
  readonly includeBuildLogs?: string;

  /**
   * ignoredFiles and includedFiles are file glob matches using https://golang.org/pkg/path/filepath/#Match
   * extended with support for '**'.
   *
   * If any of the files altered in the commit pass the ignoredFiles filter
   * and includedFiles is empty, then as far as this filter is concerned, we
   * should trigger the build.
   *
   * If any of the files altered in the commit pass the ignoredFiles filter
   * and includedFiles is not empty, then we make sure that at least one of
   * those files matches a includedFiles glob. If not, then we do not trigger
   * a build.
   *
   * @schema CloudBuildTriggerSpec#includedFiles
   */
  readonly includedFiles?: string[];

  /**
   * Immutable. The [Cloud Build location](https://cloud.google.com/build/docs/locations) for the trigger.
   * If not specified, "global" is used.
   *
   * @schema CloudBuildTriggerSpec#location
   */
  readonly location?: string;

  /**
   * PubsubConfig describes the configuration of a trigger that creates
   * a build whenever a Pub/Sub message is published.
   *
   * One of 'trigger_template', 'github', 'pubsub_config' 'webhook_config' or 'source_to_build' must be provided.
   *
   * @schema CloudBuildTriggerSpec#pubsubConfig
   */
  readonly pubsubConfig?: CloudBuildTriggerSpecPubsubConfig;

  /**
   * The configuration of a trigger that creates a build whenever an event from Repo API is received.
   *
   * @schema CloudBuildTriggerSpec#repositoryEventConfig
   */
  readonly repositoryEventConfig?: CloudBuildTriggerSpecRepositoryEventConfig;

  /**
   * The service account used for all user-controlled operations including
   * triggers.patch, triggers.run, builds.create, and builds.cancel.
   *
   * If no service account is set, then the standard Cloud Build service account
   * ([PROJECT_NUM]@system.gserviceaccount.com) will be used instead.
   *
   * When populating via the external field, the following format is supported:
   * projects/{PROJECT_ID}/serviceAccounts/{SERVICE_ACCOUNT_EMAIL}
   *
   * @schema CloudBuildTriggerSpec#serviceAccountRef
   */
  readonly serviceAccountRef?: CloudBuildTriggerSpecServiceAccountRef;

  /**
   * The repo and ref of the repository from which to build.
   * This field is used only for those triggers that do not respond to SCM events.
   * Triggers that respond to such events build source at whatever commit caused the event.
   * This field is currently only used by Webhook, Pub/Sub, Manual, and Cron triggers.
   *
   * One of 'trigger_template', 'github', 'pubsub_config' 'webhook_config' or 'source_to_build' must be provided.
   *
   * @schema CloudBuildTriggerSpec#sourceToBuild
   */
  readonly sourceToBuild?: CloudBuildTriggerSpecSourceToBuild;

  /**
   * Substitutions data for Build resource.
   *
   * @schema CloudBuildTriggerSpec#substitutions
   */
  readonly substitutions?: { [key: string]: string };

  /**
   * Tags for annotation of a BuildTrigger.
   *
   * @schema CloudBuildTriggerSpec#tags
   */
  readonly tags?: string[];

  /**
   * Template describing the types of source changes to trigger a build.
   *
   * Branch and tag names in trigger templates are interpreted as regular
   * expressions. Any branch or tag change that matches that regular
   * expression will trigger a build.
   *
   * One of 'trigger_template', 'github', 'pubsub_config', 'webhook_config' or 'source_to_build' must be provided.
   *
   * @schema CloudBuildTriggerSpec#triggerTemplate
   */
  readonly triggerTemplate?: CloudBuildTriggerSpecTriggerTemplate;

  /**
   * WebhookConfig describes the configuration of a trigger that creates
   * a build whenever a webhook is sent to a trigger's webhook URL.
   *
   * One of 'trigger_template', 'github', 'pubsub_config' 'webhook_config' or 'source_to_build' must be provided.
   *
   * @schema CloudBuildTriggerSpec#webhookConfig
   */
  readonly webhookConfig?: CloudBuildTriggerSpecWebhookConfig;

}

/**
 * Converts an object of type 'CloudBuildTriggerSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudBuildTriggerSpec(obj: CloudBuildTriggerSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'approvalConfig': toJson_CloudBuildTriggerSpecApprovalConfig(obj.approvalConfig),
    'bitbucketServerTriggerConfig': toJson_CloudBuildTriggerSpecBitbucketServerTriggerConfig(obj.bitbucketServerTriggerConfig),
    'build': toJson_CloudBuildTriggerSpecBuild(obj.build),
    'description': obj.description,
    'disabled': obj.disabled,
    'filename': obj.filename,
    'filter': obj.filter,
    'gitFileSource': toJson_CloudBuildTriggerSpecGitFileSource(obj.gitFileSource),
    'github': toJson_CloudBuildTriggerSpecGithub(obj.github),
    'ignoredFiles': obj.ignoredFiles?.map(y => y),
    'includeBuildLogs': obj.includeBuildLogs,
    'includedFiles': obj.includedFiles?.map(y => y),
    'location': obj.location,
    'pubsubConfig': toJson_CloudBuildTriggerSpecPubsubConfig(obj.pubsubConfig),
    'repositoryEventConfig': toJson_CloudBuildTriggerSpecRepositoryEventConfig(obj.repositoryEventConfig),
    'serviceAccountRef': toJson_CloudBuildTriggerSpecServiceAccountRef(obj.serviceAccountRef),
    'sourceToBuild': toJson_CloudBuildTriggerSpecSourceToBuild(obj.sourceToBuild),
    'substitutions': ((obj.substitutions) === undefined) ? undefined : (Object.entries(obj.substitutions).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'tags': obj.tags?.map(y => y),
    'triggerTemplate': toJson_CloudBuildTriggerSpecTriggerTemplate(obj.triggerTemplate),
    'webhookConfig': toJson_CloudBuildTriggerSpecWebhookConfig(obj.webhookConfig),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration for manual approval to start a build invocation of this BuildTrigger.
 * Builds created by this trigger will require approval before they execute.
 * Any user with a Cloud Build Approver role for the project can approve a build.
 *
 * @schema CloudBuildTriggerSpecApprovalConfig
 */
export interface CloudBuildTriggerSpecApprovalConfig {
  /**
   * Whether or not approval is needed. If this is set on a build, it will become pending when run,
   * and will need to be explicitly approved to start.
   *
   * @schema CloudBuildTriggerSpecApprovalConfig#approvalRequired
   */
  readonly approvalRequired?: boolean;

}

/**
 * Converts an object of type 'CloudBuildTriggerSpecApprovalConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudBuildTriggerSpecApprovalConfig(obj: CloudBuildTriggerSpecApprovalConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'approvalRequired': obj.approvalRequired,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server event is received.
 *
 * @schema CloudBuildTriggerSpecBitbucketServerTriggerConfig
 */
export interface CloudBuildTriggerSpecBitbucketServerTriggerConfig {
  /**
   * Only `external` field is supported to configure the reference.
   *
   * The full resource name of the bitbucket server config. Format:
   * projects/{project}/locations/{location}/bitbucketServerConfigs/{id}.
   *
   * @schema CloudBuildTriggerSpecBitbucketServerTriggerConfig#bitbucketServerConfigResourceRef
   */
  readonly bitbucketServerConfigResourceRef: CloudBuildTriggerSpecBitbucketServerTriggerConfigBitbucketServerConfigResourceRef;

  /**
   * Key of the project that the repo is in. For example: The key for https://mybitbucket.server/projects/TEST/repos/test-repo is "TEST".
   *
   * @schema CloudBuildTriggerSpecBitbucketServerTriggerConfig#projectKey
   */
  readonly projectKey: string;

  /**
   * Filter to match changes in pull requests.
   *
   * @schema CloudBuildTriggerSpecBitbucketServerTriggerConfig#pullRequest
   */
  readonly pullRequest?: CloudBuildTriggerSpecBitbucketServerTriggerConfigPullRequest;

  /**
   * Filter to match changes in refs like branches, tags.
   *
   * @schema CloudBuildTriggerSpecBitbucketServerTriggerConfig#push
   */
  readonly push?: CloudBuildTriggerSpecBitbucketServerTriggerConfigPush;

  /**
   * Slug of the repository. A repository slug is a URL-friendly version of a repository name, automatically generated by Bitbucket for use in the URL.
   * For example, if the repository name is 'test repo', in the URL it would become 'test-repo' as in https://mybitbucket.server/projects/TEST/repos/test-repo.
   *
   * @schema CloudBuildTriggerSpecBitbucketServerTriggerConfig#repoSlug
   */
  readonly repoSlug: string;

}

/**
 * Converts an object of type 'CloudBuildTriggerSpecBitbucketServerTriggerConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudBuildTriggerSpecBitbucketServerTriggerConfig(obj: CloudBuildTriggerSpecBitbucketServerTriggerConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bitbucketServerConfigResourceRef': toJson_CloudBuildTriggerSpecBitbucketServerTriggerConfigBitbucketServerConfigResourceRef(obj.bitbucketServerConfigResourceRef),
    'projectKey': obj.projectKey,
    'pullRequest': toJson_CloudBuildTriggerSpecBitbucketServerTriggerConfigPullRequest(obj.pullRequest),
    'push': toJson_CloudBuildTriggerSpecBitbucketServerTriggerConfigPush(obj.push),
    'repoSlug': obj.repoSlug,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Contents of the build template. Either a filename or build template must be provided.
 *
 * @schema CloudBuildTriggerSpecBuild
 */
export interface CloudBuildTriggerSpecBuild {
  /**
   * Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
   *
   * @schema CloudBuildTriggerSpecBuild#artifacts
   */
  readonly artifacts?: CloudBuildTriggerSpecBuildArtifacts;

  /**
   * Secrets and secret environment variables.
   *
   * @schema CloudBuildTriggerSpecBuild#availableSecrets
   */
  readonly availableSecrets?: CloudBuildTriggerSpecBuildAvailableSecrets;

  /**
   * A list of images to be pushed upon the successful completion of all build steps.
   * The images are pushed using the builder service account's credentials.
   * The digests of the pushed images will be stored in the Build resource's results field.
   * If any of the images fail to be pushed, the build status is marked FAILURE.
   *
   * @schema CloudBuildTriggerSpecBuild#images
   */
  readonly images?: string[];

  /**
   * Google Cloud Storage bucket where logs should be written. Logs file
   * names will be of the format ${logsBucket}/log-${build_id}.txt.
   *
   * @schema CloudBuildTriggerSpecBuild#logsBucketRef
   */
  readonly logsBucketRef?: CloudBuildTriggerSpecBuildLogsBucketRef;

  /**
   * Special options for this build.
   *
   * @schema CloudBuildTriggerSpecBuild#options
   */
  readonly options?: CloudBuildTriggerSpecBuildOptions;

  /**
   * TTL in queue for this build. If provided and the build is enqueued longer than this value,
   * the build will expire and the build status will be EXPIRED.
   * The TTL starts ticking from createTime.
   * A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
   *
   * @schema CloudBuildTriggerSpecBuild#queueTtl
   */
  readonly queueTtl?: string;

  /**
   * Secrets to decrypt using Cloud Key Management Service.
   *
   * @schema CloudBuildTriggerSpecBuild#secret
   */
  readonly secret?: CloudBuildTriggerSpecBuildSecret[];

  /**
   * The location of the source files to build.
   *
   * One of 'storageSource' or 'repoSource' must be provided.
   *
   * @schema CloudBuildTriggerSpecBuild#source
   */
  readonly source?: CloudBuildTriggerSpecBuildSource;

  /**
   * The operations to be performed on the workspace.
   *
   * @schema CloudBuildTriggerSpecBuild#step
   */
  readonly step: CloudBuildTriggerSpecBuildStep[];

  /**
   * Substitutions data for Build resource.
   *
   * @schema CloudBuildTriggerSpecBuild#substitutions
   */
  readonly substitutions?: { [key: string]: string };

  /**
   * Tags for annotation of a Build. These are not docker tags.
   *
   * @schema CloudBuildTriggerSpecBuild#tags
   */
  readonly tags?: string[];

  /**
   * Amount of time that this build should be allowed to run, to second granularity.
   * If this amount of time elapses, work on the build will cease and the build status will be TIMEOUT.
   * This timeout must be equal to or greater than the sum of the timeouts for build steps within the build.
   * The expected format is the number of seconds followed by s.
   * Default time is ten minutes (600s).
   *
   * @schema CloudBuildTriggerSpecBuild#timeout
   */
  readonly timeout?: string;

}

/**
 * Converts an object of type 'CloudBuildTriggerSpecBuild' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudBuildTriggerSpecBuild(obj: CloudBuildTriggerSpecBuild | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'artifacts': toJson_CloudBuildTriggerSpecBuildArtifacts(obj.artifacts),
    'availableSecrets': toJson_CloudBuildTriggerSpecBuildAvailableSecrets(obj.availableSecrets),
    'images': obj.images?.map(y => y),
    'logsBucketRef': toJson_CloudBuildTriggerSpecBuildLogsBucketRef(obj.logsBucketRef),
    'options': toJson_CloudBuildTriggerSpecBuildOptions(obj.options),
    'queueTtl': obj.queueTtl,
    'secret': obj.secret?.map(y => toJson_CloudBuildTriggerSpecBuildSecret(y)),
    'source': toJson_CloudBuildTriggerSpecBuildSource(obj.source),
    'step': obj.step?.map(y => toJson_CloudBuildTriggerSpecBuildStep(y)),
    'substitutions': ((obj.substitutions) === undefined) ? undefined : (Object.entries(obj.substitutions).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'tags': obj.tags?.map(y => y),
    'timeout': obj.timeout,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The file source describing the local or remote Build template.
 *
 * @schema CloudBuildTriggerSpecGitFileSource
 */
export interface CloudBuildTriggerSpecGitFileSource {
  /**
   * Only `external` field is supported to configure the reference.
   *
   * The full resource name of the github enterprise config. Format:
   * projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}.
   *
   * @schema CloudBuildTriggerSpecGitFileSource#githubEnterpriseConfigRef
   */
  readonly githubEnterpriseConfigRef?: CloudBuildTriggerSpecGitFileSourceGithubEnterpriseConfigRef;

  /**
   * The path of the file, with the repo root as the root of the path.
   *
   * @schema CloudBuildTriggerSpecGitFileSource#path
   */
  readonly path: string;

  /**
   * The type of the repo, since it may not be explicit from the repo field (e.g from a URL).
   * Values can be UNKNOWN, CLOUD_SOURCE_REPOSITORIES, GITHUB, BITBUCKET_SERVER Possible values: ["UNKNOWN", "CLOUD_SOURCE_REPOSITORIES", "GITHUB", "BITBUCKET_SERVER"].
   *
   * @schema CloudBuildTriggerSpecGitFileSource#repoType
   */
  readonly repoType: string;

  /**
   * Only `external` field is supported to configure the reference.
   *
   * The fully qualified resource name of the Repo API repository. The fully qualified resource name of the Repo API repository.
   * If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path.
   *
   * @schema CloudBuildTriggerSpecGitFileSource#repositoryRef
   */
  readonly repositoryRef?: CloudBuildTriggerSpecGitFileSourceRepositoryRef;

  /**
   * The branch, tag, arbitrary ref, or SHA version of the repo to use when resolving the
   * filename (optional). This field respects the same syntax/resolution as described here: https://git-scm.com/docs/gitrevisions
   * If unspecified, the revision from which the trigger invocation originated is assumed to be the revision from which to read the specified path.
   *
   * @schema CloudBuildTriggerSpecGitFileSource#revision
   */
  readonly revision?: string;

  /**
   * The URI of the repo (optional). If unspecified, the repo from which the trigger
   * invocation originated is assumed to be the repo from which to read the specified path.
   *
   * @schema CloudBuildTriggerSpecGitFileSource#uri
   */
  readonly uri?: string;

}

/**
 * Converts an object of type 'CloudBuildTriggerSpecGitFileSource' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudBuildTriggerSpecGitFileSource(obj: CloudBuildTriggerSpecGitFileSource | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'githubEnterpriseConfigRef': toJson_CloudBuildTriggerSpecGitFileSourceGithubEnterpriseConfigRef(obj.githubEnterpriseConfigRef),
    'path': obj.path,
    'repoType': obj.repoType,
    'repositoryRef': toJson_CloudBuildTriggerSpecGitFileSourceRepositoryRef(obj.repositoryRef),
    'revision': obj.revision,
    'uri': obj.uri,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes the configuration of a trigger that creates a build whenever a GitHub event is received.
 *
 * One of 'trigger_template', 'github', 'pubsub_config' or 'webhook_config' must be provided.
 *
 * @schema CloudBuildTriggerSpecGithub
 */
export interface CloudBuildTriggerSpecGithub {
  /**
   * Only `external` field is supported to configure the reference.
   *
   * The full resource name of the github enterprise config. Format:
   * projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}.
   *
   * @schema CloudBuildTriggerSpecGithub#enterpriseConfigResourceNameRef
   */
  readonly enterpriseConfigResourceNameRef?: CloudBuildTriggerSpecGithubEnterpriseConfigResourceNameRef;

  /**
   * Name of the repository. For example: The name for
   * https://github.com/googlecloudplatform/cloud-builders is "cloud-builders".
   *
   * @schema CloudBuildTriggerSpecGithub#name
   */
  readonly name?: string;

  /**
   * Owner of the repository. For example: The owner for
   * https://github.com/googlecloudplatform/cloud-builders is "googlecloudplatform".
   *
   * @schema CloudBuildTriggerSpecGithub#owner
   */
  readonly owner?: string;

  /**
   * filter to match changes in pull requests. Specify only one of 'pull_request' or 'push'.
   *
   * @schema CloudBuildTriggerSpecGithub#pullRequest
   */
  readonly pullRequest?: CloudBuildTriggerSpecGithubPullRequest;

  /**
   * filter to match changes in refs, like branches or tags. Specify only one of 'pull_request' or 'push'.
   *
   * @schema CloudBuildTriggerSpecGithub#push
   */
  readonly push?: CloudBuildTriggerSpecGithubPush;

}

/**
 * Converts an object of type 'CloudBuildTriggerSpecGithub' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudBuildTriggerSpecGithub(obj: CloudBuildTriggerSpecGithub | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enterpriseConfigResourceNameRef': toJson_CloudBuildTriggerSpecGithubEnterpriseConfigResourceNameRef(obj.enterpriseConfigResourceNameRef),
    'name': obj.name,
    'owner': obj.owner,
    'pullRequest': toJson_CloudBuildTriggerSpecGithubPullRequest(obj.pullRequest),
    'push': toJson_CloudBuildTriggerSpecGithubPush(obj.push),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PubsubConfig describes the configuration of a trigger that creates
 * a build whenever a Pub/Sub message is published.
 *
 * One of 'trigger_template', 'github', 'pubsub_config' 'webhook_config' or 'source_to_build' must be provided.
 *
 * @schema CloudBuildTriggerSpecPubsubConfig
 */
export interface CloudBuildTriggerSpecPubsubConfig {
  /**
   * Service account that will make the push request.
   *
   * @schema CloudBuildTriggerSpecPubsubConfig#serviceAccountRef
   */
  readonly serviceAccountRef?: CloudBuildTriggerSpecPubsubConfigServiceAccountRef;

  /**
   * Potential issues with the underlying Pub/Sub subscription configuration.
   * Only populated on get requests.
   *
   * @schema CloudBuildTriggerSpecPubsubConfig#state
   */
  readonly state?: string;

  /**
   * Output only. Name of the subscription.
   *
   * @schema CloudBuildTriggerSpecPubsubConfig#subscription
   */
  readonly subscription?: string;

  /**
   * The name of the topic from which this subscription
   * is receiving messages.
   *
   * @schema CloudBuildTriggerSpecPubsubConfig#topicRef
   */
  readonly topicRef: CloudBuildTriggerSpecPubsubConfigTopicRef;

}

/**
 * Converts an object of type 'CloudBuildTriggerSpecPubsubConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudBuildTriggerSpecPubsubConfig(obj: CloudBuildTriggerSpecPubsubConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'serviceAccountRef': toJson_CloudBuildTriggerSpecPubsubConfigServiceAccountRef(obj.serviceAccountRef),
    'state': obj.state,
    'subscription': obj.subscription,
    'topicRef': toJson_CloudBuildTriggerSpecPubsubConfigTopicRef(obj.topicRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The configuration of a trigger that creates a build whenever an event from Repo API is received.
 *
 * @schema CloudBuildTriggerSpecRepositoryEventConfig
 */
export interface CloudBuildTriggerSpecRepositoryEventConfig {
  /**
   * Contains filter properties for matching Pull Requests.
   *
   * @schema CloudBuildTriggerSpecRepositoryEventConfig#pullRequest
   */
  readonly pullRequest?: CloudBuildTriggerSpecRepositoryEventConfigPullRequest;

  /**
   * Contains filter properties for matching git pushes.
   *
   * @schema CloudBuildTriggerSpecRepositoryEventConfig#push
   */
  readonly push?: CloudBuildTriggerSpecRepositoryEventConfigPush;

  /**
   * The resource name of the Repo API resource.
   *
   * @schema CloudBuildTriggerSpecRepositoryEventConfig#repository
   */
  readonly repository?: string;

}

/**
 * Converts an object of type 'CloudBuildTriggerSpecRepositoryEventConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudBuildTriggerSpecRepositoryEventConfig(obj: CloudBuildTriggerSpecRepositoryEventConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'pullRequest': toJson_CloudBuildTriggerSpecRepositoryEventConfigPullRequest(obj.pullRequest),
    'push': toJson_CloudBuildTriggerSpecRepositoryEventConfigPush(obj.push),
    'repository': obj.repository,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The service account used for all user-controlled operations including
 * triggers.patch, triggers.run, builds.create, and builds.cancel.
 *
 * If no service account is set, then the standard Cloud Build service account
 * ([PROJECT_NUM]@system.gserviceaccount.com) will be used instead.
 *
 * When populating via the external field, the following format is supported:
 * projects/{PROJECT_ID}/serviceAccounts/{SERVICE_ACCOUNT_EMAIL}
 *
 * @schema CloudBuildTriggerSpecServiceAccountRef
 */
export interface CloudBuildTriggerSpecServiceAccountRef {
  /**
   * Allowed value: string of the format `projects/{{project}}/serviceAccounts/{{value}}`, where {{value}} is the `email` field of an `IAMServiceAccount` resource.
   *
   * @schema CloudBuildTriggerSpecServiceAccountRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema CloudBuildTriggerSpecServiceAccountRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema CloudBuildTriggerSpecServiceAccountRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'CloudBuildTriggerSpecServiceAccountRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudBuildTriggerSpecServiceAccountRef(obj: CloudBuildTriggerSpecServiceAccountRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The repo and ref of the repository from which to build.
 * This field is used only for those triggers that do not respond to SCM events.
 * Triggers that respond to such events build source at whatever commit caused the event.
 * This field is currently only used by Webhook, Pub/Sub, Manual, and Cron triggers.
 *
 * One of 'trigger_template', 'github', 'pubsub_config' 'webhook_config' or 'source_to_build' must be provided.
 *
 * @schema CloudBuildTriggerSpecSourceToBuild
 */
export interface CloudBuildTriggerSpecSourceToBuild {
  /**
   * Only `external` field is supported to configure the reference.
   *
   * The full resource name of the github enterprise config. Format:
   * projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}.
   *
   * @schema CloudBuildTriggerSpecSourceToBuild#githubEnterpriseConfigRef
   */
  readonly githubEnterpriseConfigRef?: CloudBuildTriggerSpecSourceToBuildGithubEnterpriseConfigRef;

  /**
   * The branch or tag to use. Must start with "refs/" (required).
   *
   * @schema CloudBuildTriggerSpecSourceToBuild#ref
   */
  readonly ref: string;

  /**
   * The type of the repo, since it may not be explicit from the repo field (e.g from a URL).
   * Values can be UNKNOWN, CLOUD_SOURCE_REPOSITORIES, GITHUB, BITBUCKET_SERVER Possible values: ["UNKNOWN", "CLOUD_SOURCE_REPOSITORIES", "GITHUB", "BITBUCKET_SERVER"].
   *
   * @schema CloudBuildTriggerSpecSourceToBuild#repoType
   */
  readonly repoType: string;

  /**
   * Only `external` field is supported to configure the reference.
   *
   * The qualified resource name of the Repo API repository.
   * Either uri or repository can be specified and is required.
   *
   * @schema CloudBuildTriggerSpecSourceToBuild#repositoryRef
   */
  readonly repositoryRef?: CloudBuildTriggerSpecSourceToBuildRepositoryRef;

  /**
   * The URI of the repo.
   *
   * @schema CloudBuildTriggerSpecSourceToBuild#uri
   */
  readonly uri?: string;

}

/**
 * Converts an object of type 'CloudBuildTriggerSpecSourceToBuild' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudBuildTriggerSpecSourceToBuild(obj: CloudBuildTriggerSpecSourceToBuild | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'githubEnterpriseConfigRef': toJson_CloudBuildTriggerSpecSourceToBuildGithubEnterpriseConfigRef(obj.githubEnterpriseConfigRef),
    'ref': obj.ref,
    'repoType': obj.repoType,
    'repositoryRef': toJson_CloudBuildTriggerSpecSourceToBuildRepositoryRef(obj.repositoryRef),
    'uri': obj.uri,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Template describing the types of source changes to trigger a build.
 *
 * Branch and tag names in trigger templates are interpreted as regular
 * expressions. Any branch or tag change that matches that regular
 * expression will trigger a build.
 *
 * One of 'trigger_template', 'github', 'pubsub_config', 'webhook_config' or 'source_to_build' must be provided.
 *
 * @schema CloudBuildTriggerSpecTriggerTemplate
 */
export interface CloudBuildTriggerSpecTriggerTemplate {
  /**
   * Name of the branch to build. Exactly one a of branch name, tag, or commit SHA must be provided.
   * This field is a regular expression.
   *
   * @schema CloudBuildTriggerSpecTriggerTemplate#branchName
   */
  readonly branchName?: string;

  /**
   * Explicit commit SHA to build. Exactly one of a branch name, tag, or commit SHA must be provided.
   *
   * @schema CloudBuildTriggerSpecTriggerTemplate#commitSha
   */
  readonly commitSha?: string;

  /**
   * Directory, relative to the source root, in which to run the build.
   *
   * This must be a relative path. If a step's dir is specified and
   * is an absolute path, this value is ignored for that step's
   * execution.
   *
   * @schema CloudBuildTriggerSpecTriggerTemplate#dir
   */
  readonly dir?: string;

  /**
   * Only trigger a build if the revision regex does NOT match the revision regex.
   *
   * @schema CloudBuildTriggerSpecTriggerTemplate#invertRegex
   */
  readonly invertRegex?: boolean;

  /**
   * The Cloud Source Repository to build. If omitted, the repo with
   * name "default" is assumed.
   *
   * @schema CloudBuildTriggerSpecTriggerTemplate#repoRef
   */
  readonly repoRef?: CloudBuildTriggerSpecTriggerTemplateRepoRef;

  /**
   * Name of the tag to build. Exactly one of a branch name, tag, or commit SHA must be provided.
   * This field is a regular expression.
   *
   * @schema CloudBuildTriggerSpecTriggerTemplate#tagName
   */
  readonly tagName?: string;

}

/**
 * Converts an object of type 'CloudBuildTriggerSpecTriggerTemplate' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudBuildTriggerSpecTriggerTemplate(obj: CloudBuildTriggerSpecTriggerTemplate | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'branchName': obj.branchName,
    'commitSha': obj.commitSha,
    'dir': obj.dir,
    'invertRegex': obj.invertRegex,
    'repoRef': toJson_CloudBuildTriggerSpecTriggerTemplateRepoRef(obj.repoRef),
    'tagName': obj.tagName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WebhookConfig describes the configuration of a trigger that creates
 * a build whenever a webhook is sent to a trigger's webhook URL.
 *
 * One of 'trigger_template', 'github', 'pubsub_config' 'webhook_config' or 'source_to_build' must be provided.
 *
 * @schema CloudBuildTriggerSpecWebhookConfig
 */
export interface CloudBuildTriggerSpecWebhookConfig {
  /**
   * The secret required
   *
   * @schema CloudBuildTriggerSpecWebhookConfig#secretRef
   */
  readonly secretRef: CloudBuildTriggerSpecWebhookConfigSecretRef;

  /**
   * Potential issues with the underlying Pub/Sub subscription configuration.
   * Only populated on get requests.
   *
   * @schema CloudBuildTriggerSpecWebhookConfig#state
   */
  readonly state?: string;

}

/**
 * Converts an object of type 'CloudBuildTriggerSpecWebhookConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudBuildTriggerSpecWebhookConfig(obj: CloudBuildTriggerSpecWebhookConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'secretRef': toJson_CloudBuildTriggerSpecWebhookConfigSecretRef(obj.secretRef),
    'state': obj.state,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Only `external` field is supported to configure the reference.
 *
 * The full resource name of the bitbucket server config. Format:
 * projects/{project}/locations/{location}/bitbucketServerConfigs/{id}.
 *
 * @schema CloudBuildTriggerSpecBitbucketServerTriggerConfigBitbucketServerConfigResourceRef
 */
export interface CloudBuildTriggerSpecBitbucketServerTriggerConfigBitbucketServerConfigResourceRef {
  /**
   * Allowed value: The `name` field of a `CloudBuildBitbucketServerConfig` resource.
   *
   * @schema CloudBuildTriggerSpecBitbucketServerTriggerConfigBitbucketServerConfigResourceRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema CloudBuildTriggerSpecBitbucketServerTriggerConfigBitbucketServerConfigResourceRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema CloudBuildTriggerSpecBitbucketServerTriggerConfigBitbucketServerConfigResourceRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'CloudBuildTriggerSpecBitbucketServerTriggerConfigBitbucketServerConfigResourceRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudBuildTriggerSpecBitbucketServerTriggerConfigBitbucketServerConfigResourceRef(obj: CloudBuildTriggerSpecBitbucketServerTriggerConfigBitbucketServerConfigResourceRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Filter to match changes in pull requests.
 *
 * @schema CloudBuildTriggerSpecBitbucketServerTriggerConfigPullRequest
 */
export interface CloudBuildTriggerSpecBitbucketServerTriggerConfigPullRequest {
  /**
   * Regex of branches to match.
   * The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax.
   *
   * @schema CloudBuildTriggerSpecBitbucketServerTriggerConfigPullRequest#branch
   */
  readonly branch: string;

  /**
   * Configure builds to run whether a repository owner or collaborator need to comment /gcbrun. Possible values: ["COMMENTS_DISABLED", "COMMENTS_ENABLED", "COMMENTS_ENABLED_FOR_EXTERNAL_CONTRIBUTORS_ONLY"].
   *
   * @schema CloudBuildTriggerSpecBitbucketServerTriggerConfigPullRequest#commentControl
   */
  readonly commentControl?: string;

  /**
   * If true, branches that do NOT match the git_ref will trigger a build.
   *
   * @schema CloudBuildTriggerSpecBitbucketServerTriggerConfigPullRequest#invertRegex
   */
  readonly invertRegex?: boolean;

}

/**
 * Converts an object of type 'CloudBuildTriggerSpecBitbucketServerTriggerConfigPullRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudBuildTriggerSpecBitbucketServerTriggerConfigPullRequest(obj: CloudBuildTriggerSpecBitbucketServerTriggerConfigPullRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'branch': obj.branch,
    'commentControl': obj.commentControl,
    'invertRegex': obj.invertRegex,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Filter to match changes in refs like branches, tags.
 *
 * @schema CloudBuildTriggerSpecBitbucketServerTriggerConfigPush
 */
export interface CloudBuildTriggerSpecBitbucketServerTriggerConfigPush {
  /**
   * Regex of branches to match.  Specify only one of branch or tag.
   *
   * @schema CloudBuildTriggerSpecBitbucketServerTriggerConfigPush#branch
   */
  readonly branch?: string;

  /**
   * When true, only trigger a build if the revision regex does NOT match the gitRef regex.
   *
   * @schema CloudBuildTriggerSpecBitbucketServerTriggerConfigPush#invertRegex
   */
  readonly invertRegex?: boolean;

  /**
   * Regex of tags to match.  Specify only one of branch or tag.
   *
   * @schema CloudBuildTriggerSpecBitbucketServerTriggerConfigPush#tag
   */
  readonly tag?: string;

}

/**
 * Converts an object of type 'CloudBuildTriggerSpecBitbucketServerTriggerConfigPush' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudBuildTriggerSpecBitbucketServerTriggerConfigPush(obj: CloudBuildTriggerSpecBitbucketServerTriggerConfigPush | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'branch': obj.branch,
    'invertRegex': obj.invertRegex,
    'tag': obj.tag,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
 *
 * @schema CloudBuildTriggerSpecBuildArtifacts
 */
export interface CloudBuildTriggerSpecBuildArtifacts {
  /**
   * A list of images to be pushed upon the successful completion of all build steps.
   *
   * The images will be pushed using the builder service account's credentials.
   *
   * The digests of the pushed images will be stored in the Build resource's results field.
   *
   * If any of the images fail to be pushed, the build is marked FAILURE.
   *
   * @schema CloudBuildTriggerSpecBuildArtifacts#images
   */
  readonly images?: string[];

  /**
   * A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps.
   *
   * Files in the workspace matching specified paths globs will be uploaded to the
   * Cloud Storage location using the builder service account's credentials.
   *
   * The location and generation of the uploaded objects will be stored in the Build resource's results field.
   *
   * If any objects fail to be pushed, the build is marked FAILURE.
   *
   * @schema CloudBuildTriggerSpecBuildArtifacts#objects
   */
  readonly objects?: CloudBuildTriggerSpecBuildArtifactsObjects;

}

/**
 * Converts an object of type 'CloudBuildTriggerSpecBuildArtifacts' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudBuildTriggerSpecBuildArtifacts(obj: CloudBuildTriggerSpecBuildArtifacts | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'images': obj.images?.map(y => y),
    'objects': toJson_CloudBuildTriggerSpecBuildArtifactsObjects(obj.objects),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Secrets and secret environment variables.
 *
 * @schema CloudBuildTriggerSpecBuildAvailableSecrets
 */
export interface CloudBuildTriggerSpecBuildAvailableSecrets {
  /**
   * Pairs a secret environment variable with a SecretVersion in Secret Manager.
   *
   * @schema CloudBuildTriggerSpecBuildAvailableSecrets#secretManager
   */
  readonly secretManager: CloudBuildTriggerSpecBuildAvailableSecretsSecretManager[];

}

/**
 * Converts an object of type 'CloudBuildTriggerSpecBuildAvailableSecrets' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudBuildTriggerSpecBuildAvailableSecrets(obj: CloudBuildTriggerSpecBuildAvailableSecrets | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'secretManager': obj.secretManager?.map(y => toJson_CloudBuildTriggerSpecBuildAvailableSecretsSecretManager(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Google Cloud Storage bucket where logs should be written. Logs file
 * names will be of the format ${logsBucket}/log-${build_id}.txt.
 *
 * @schema CloudBuildTriggerSpecBuildLogsBucketRef
 */
export interface CloudBuildTriggerSpecBuildLogsBucketRef {
  /**
   * Allowed value: The `url` field of a `StorageBucket` resource.
   *
   * @schema CloudBuildTriggerSpecBuildLogsBucketRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema CloudBuildTriggerSpecBuildLogsBucketRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema CloudBuildTriggerSpecBuildLogsBucketRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'CloudBuildTriggerSpecBuildLogsBucketRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudBuildTriggerSpecBuildLogsBucketRef(obj: CloudBuildTriggerSpecBuildLogsBucketRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Special options for this build.
 *
 * @schema CloudBuildTriggerSpecBuildOptions
 */
export interface CloudBuildTriggerSpecBuildOptions {
  /**
   * Requested disk size for the VM that runs the build. Note that this is NOT "disk free";
   * some of the space will be used by the operating system and build utilities.
   * Also note that this is the minimum disk size that will be allocated for the build --
   * the build may run with a larger disk than requested. At present, the maximum disk size
   * is 1000GB; builds that request more than the maximum are rejected with an error.
   *
   * @schema CloudBuildTriggerSpecBuildOptions#diskSizeGb
   */
  readonly diskSizeGb?: number;

  /**
   * Option to specify whether or not to apply bash style string operations to the substitutions.
   *
   * NOTE this is always enabled for triggered builds and cannot be overridden in the build configuration file.
   *
   * @schema CloudBuildTriggerSpecBuildOptions#dynamicSubstitutions
   */
  readonly dynamicSubstitutions?: boolean;

  /**
   * A list of global environment variable definitions that will exist for all build steps
   * in this build. If a variable is defined in both globally and in a build step,
   * the variable will use the build step value.
   *
   * The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
   *
   * @schema CloudBuildTriggerSpecBuildOptions#env
   */
  readonly env?: string[];

  /**
   * Option to define build log streaming behavior to Google Cloud Storage. Possible values: ["STREAM_DEFAULT", "STREAM_ON", "STREAM_OFF"].
   *
   * @schema CloudBuildTriggerSpecBuildOptions#logStreamingOption
   */
  readonly logStreamingOption?: string;

  /**
   * Option to specify the logging mode, which determines if and where build logs are stored. Possible values: ["LOGGING_UNSPECIFIED", "LEGACY", "GCS_ONLY", "STACKDRIVER_ONLY", "CLOUD_LOGGING_ONLY", "NONE"].
   *
   * @schema CloudBuildTriggerSpecBuildOptions#logging
   */
  readonly logging?: string;

  /**
   * Compute Engine machine type on which to run the build. Possible values: ["UNSPECIFIED", "N1_HIGHCPU_8", "N1_HIGHCPU_32", "E2_HIGHCPU_8", "E2_HIGHCPU_32"].
   *
   * @schema CloudBuildTriggerSpecBuildOptions#machineType
   */
  readonly machineType?: string;

  /**
   * Requested verifiability options. Possible values: ["NOT_VERIFIED", "VERIFIED"].
   *
   * @schema CloudBuildTriggerSpecBuildOptions#requestedVerifyOption
   */
  readonly requestedVerifyOption?: string;

  /**
   * A list of global environment variables, which are encrypted using a Cloud Key Management
   * Service crypto key. These values must be specified in the build's Secret. These variables
   * will be available to all build steps in this build.
   *
   * @schema CloudBuildTriggerSpecBuildOptions#secretEnv
   */
  readonly secretEnv?: string[];

  /**
   * Requested hash for SourceProvenance. Possible values: ["NONE", "SHA256", "MD5"].
   *
   * @schema CloudBuildTriggerSpecBuildOptions#sourceProvenanceHash
   */
  readonly sourceProvenanceHash?: string[];

  /**
   * Option to specify behavior when there is an error in the substitution checks.
   *
   * NOTE this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden
   * in the build configuration file. Possible values: ["MUST_MATCH", "ALLOW_LOOSE"].
   *
   * @schema CloudBuildTriggerSpecBuildOptions#substitutionOption
   */
  readonly substitutionOption?: string;

  /**
   * Global list of volumes to mount for ALL build steps
   *
   * Each volume is created as an empty volume prior to starting the build process.
   * Upon completion of the build, volumes and their contents are discarded. Global
   * volume names and paths cannot conflict with the volumes defined a build step.
   *
   * Using a global volume in a build with only one step is not valid as it is indicative
   * of a build request with an incorrect configuration.
   *
   * @schema CloudBuildTriggerSpecBuildOptions#volumes
   */
  readonly volumes?: CloudBuildTriggerSpecBuildOptionsVolumes[];

  /**
   * Option to specify a WorkerPool for the build. Format projects/{project}/workerPools/{workerPool}
   *
   * This field is experimental.
   *
   * @schema CloudBuildTriggerSpecBuildOptions#workerPool
   */
  readonly workerPool?: string;

}

/**
 * Converts an object of type 'CloudBuildTriggerSpecBuildOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudBuildTriggerSpecBuildOptions(obj: CloudBuildTriggerSpecBuildOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'diskSizeGb': obj.diskSizeGb,
    'dynamicSubstitutions': obj.dynamicSubstitutions,
    'env': obj.env?.map(y => y),
    'logStreamingOption': obj.logStreamingOption,
    'logging': obj.logging,
    'machineType': obj.machineType,
    'requestedVerifyOption': obj.requestedVerifyOption,
    'secretEnv': obj.secretEnv?.map(y => y),
    'sourceProvenanceHash': obj.sourceProvenanceHash?.map(y => y),
    'substitutionOption': obj.substitutionOption,
    'volumes': obj.volumes?.map(y => toJson_CloudBuildTriggerSpecBuildOptionsVolumes(y)),
    'workerPool': obj.workerPool,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CloudBuildTriggerSpecBuildSecret
 */
export interface CloudBuildTriggerSpecBuildSecret {
  /**
   * KMS crypto key to use to decrypt these envs.
   *
   * @schema CloudBuildTriggerSpecBuildSecret#kmsKeyRef
   */
  readonly kmsKeyRef: CloudBuildTriggerSpecBuildSecretKmsKeyRef;

  /**
   * Map of environment variable name to its encrypted value.
   * Secret environment variables must be unique across all of a build's secrets,
   * and must be used by at least one build step. Values can be at most 64 KB in size.
   * There can be at most 100 secret values across all of a build's secrets.
   *
   * @schema CloudBuildTriggerSpecBuildSecret#secretEnv
   */
  readonly secretEnv?: { [key: string]: string };

}

/**
 * Converts an object of type 'CloudBuildTriggerSpecBuildSecret' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudBuildTriggerSpecBuildSecret(obj: CloudBuildTriggerSpecBuildSecret | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'kmsKeyRef': toJson_CloudBuildTriggerSpecBuildSecretKmsKeyRef(obj.kmsKeyRef),
    'secretEnv': ((obj.secretEnv) === undefined) ? undefined : (Object.entries(obj.secretEnv).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The location of the source files to build.
 *
 * One of 'storageSource' or 'repoSource' must be provided.
 *
 * @schema CloudBuildTriggerSpecBuildSource
 */
export interface CloudBuildTriggerSpecBuildSource {
  /**
   * Location of the source in a Google Cloud Source Repository.
   *
   * @schema CloudBuildTriggerSpecBuildSource#repoSource
   */
  readonly repoSource?: CloudBuildTriggerSpecBuildSourceRepoSource;

  /**
   * Location of the source in an archive file in Google Cloud Storage.
   *
   * @schema CloudBuildTriggerSpecBuildSource#storageSource
   */
  readonly storageSource?: CloudBuildTriggerSpecBuildSourceStorageSource;

}

/**
 * Converts an object of type 'CloudBuildTriggerSpecBuildSource' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudBuildTriggerSpecBuildSource(obj: CloudBuildTriggerSpecBuildSource | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'repoSource': toJson_CloudBuildTriggerSpecBuildSourceRepoSource(obj.repoSource),
    'storageSource': toJson_CloudBuildTriggerSpecBuildSourceStorageSource(obj.storageSource),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CloudBuildTriggerSpecBuildStep
 */
export interface CloudBuildTriggerSpecBuildStep {
  /**
   * Allow this build step to fail without failing the entire build if and
   * only if the exit code is one of the specified codes.
   *
   * If 'allowFailure' is also specified, this field will take precedence.
   *
   * @schema CloudBuildTriggerSpecBuildStep#allowExitCodes
   */
  readonly allowExitCodes?: number[];

  /**
   * Allow this build step to fail without failing the entire build.
   * If false, the entire build will fail if this step fails. Otherwise, the
   * build will succeed, but this step will still have a failure status.
   * Error information will be reported in the 'failureDetail' field.
   *
   * 'allowExitCodes' takes precedence over this field.
   *
   * @schema CloudBuildTriggerSpecBuildStep#allowFailure
   */
  readonly allowFailure?: boolean;

  /**
   * A list of arguments that will be presented to the step when it is started.
   *
   * If the image used to run the step's container has an entrypoint, the args
   * are used as arguments to that entrypoint. If the image does not define an
   * entrypoint, the first element in args is used as the entrypoint, and the
   * remainder will be used as arguments.
   *
   * @schema CloudBuildTriggerSpecBuildStep#args
   */
  readonly args?: string[];

  /**
   * Working directory to use when running this step's container.
   *
   * If this value is a relative path, it is relative to the build's working
   * directory. If this value is absolute, it may be outside the build's working
   * directory, in which case the contents of the path may not be persisted
   * across build step executions, unless a 'volume' for that path is specified.
   *
   * If the build specifies a 'RepoSource' with 'dir' and a step with a
   * 'dir',
   * which specifies an absolute path, the 'RepoSource' 'dir' is ignored
   * for the step's execution.
   *
   * @schema CloudBuildTriggerSpecBuildStep#dir
   */
  readonly dir?: string;

  /**
   * Entrypoint to be used instead of the build step image's
   * default entrypoint.
   * If unset, the image's default entrypoint is used.
   *
   * @schema CloudBuildTriggerSpecBuildStep#entrypoint
   */
  readonly entrypoint?: string;

  /**
   * A list of environment variable definitions to be used when
   * running a step.
   *
   * The elements are of the form "KEY=VALUE" for the environment variable
   * "KEY" being given the value "VALUE".
   *
   * @schema CloudBuildTriggerSpecBuildStep#env
   */
  readonly env?: string[];

  /**
   * Unique identifier for this build step, used in 'wait_for' to
   * reference this build step as a dependency.
   *
   * @schema CloudBuildTriggerSpecBuildStep#id
   */
  readonly id?: string;

  /**
   * The name of the container image that will run this particular build step.
   *
   * If the image is available in the host's Docker daemon's cache, it will be
   * run directly. If not, the host will attempt to pull the image first, using
   * the builder service account's credentials if necessary.
   *
   * The Docker daemon's cache will already have the latest versions of all of
   * the officially supported build steps (see https://github.com/GoogleCloudPlatform/cloud-builders
   * for images and examples).
   * The Docker daemon will also have cached many of the layers for some popular
   * images, like "ubuntu", "debian", but they will be refreshed at the time
   * you attempt to use them.
   *
   * If you built an image in a previous build step, it will be stored in the
   * host's Docker daemon's cache and is available to use as the name for a
   * later build step.
   *
   * @schema CloudBuildTriggerSpecBuildStep#name
   */
  readonly name: string;

  /**
   * A shell script to be executed in the step.
   * When script is provided, the user cannot specify the entrypoint or args.
   *
   * @schema CloudBuildTriggerSpecBuildStep#script
   */
  readonly script?: string;

  /**
   * A list of environment variables which are encrypted using
   * a Cloud Key
   * Management Service crypto key. These values must be specified in
   * the build's 'Secret'.
   *
   * @schema CloudBuildTriggerSpecBuildStep#secretEnv
   */
  readonly secretEnv?: string[];

  /**
   * Time limit for executing this build step. If not defined,
   * the step has no
   * time limit and will be allowed to continue to run until either it
   * completes or the build itself times out.
   *
   * @schema CloudBuildTriggerSpecBuildStep#timeout
   */
  readonly timeout?: string;

  /**
   * Output only. Stores timing information for executing this
   * build step.
   *
   * @schema CloudBuildTriggerSpecBuildStep#timing
   */
  readonly timing?: string;

  /**
   * List of volumes to mount into the build step.
   *
   * Each volume is created as an empty volume prior to execution of the
   * build step. Upon completion of the build, volumes and their contents
   * are discarded.
   *
   * Using a named volume in only one step is not valid as it is
   * indicative of a build request with an incorrect configuration.
   *
   * @schema CloudBuildTriggerSpecBuildStep#volumes
   */
  readonly volumes?: CloudBuildTriggerSpecBuildStepVolumes[];

  /**
   * The ID(s) of the step(s) that this build step depends on.
   *
   * This build step will not start until all the build steps in 'wait_for'
   * have completed successfully. If 'wait_for' is empty, this build step
   * will start when all previous build steps in the 'Build.Steps' list
   * have completed successfully.
   *
   * @schema CloudBuildTriggerSpecBuildStep#waitFor
   */
  readonly waitFor?: string[];

}

/**
 * Converts an object of type 'CloudBuildTriggerSpecBuildStep' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudBuildTriggerSpecBuildStep(obj: CloudBuildTriggerSpecBuildStep | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'allowExitCodes': obj.allowExitCodes?.map(y => y),
    'allowFailure': obj.allowFailure,
    'args': obj.args?.map(y => y),
    'dir': obj.dir,
    'entrypoint': obj.entrypoint,
    'env': obj.env?.map(y => y),
    'id': obj.id,
    'name': obj.name,
    'script': obj.script,
    'secretEnv': obj.secretEnv?.map(y => y),
    'timeout': obj.timeout,
    'timing': obj.timing,
    'volumes': obj.volumes?.map(y => toJson_CloudBuildTriggerSpecBuildStepVolumes(y)),
    'waitFor': obj.waitFor?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Only `external` field is supported to configure the reference.
 *
 * The full resource name of the github enterprise config. Format:
 * projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}.
 *
 * @schema CloudBuildTriggerSpecGitFileSourceGithubEnterpriseConfigRef
 */
export interface CloudBuildTriggerSpecGitFileSourceGithubEnterpriseConfigRef {
  /**
   * Allowed value: The `name` field of a `CloudBuildGithubEnterpriseConfig` resource.
   *
   * @schema CloudBuildTriggerSpecGitFileSourceGithubEnterpriseConfigRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema CloudBuildTriggerSpecGitFileSourceGithubEnterpriseConfigRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema CloudBuildTriggerSpecGitFileSourceGithubEnterpriseConfigRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'CloudBuildTriggerSpecGitFileSourceGithubEnterpriseConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudBuildTriggerSpecGitFileSourceGithubEnterpriseConfigRef(obj: CloudBuildTriggerSpecGitFileSourceGithubEnterpriseConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Only `external` field is supported to configure the reference.
 *
 * The fully qualified resource name of the Repo API repository. The fully qualified resource name of the Repo API repository.
 * If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path.
 *
 * @schema CloudBuildTriggerSpecGitFileSourceRepositoryRef
 */
export interface CloudBuildTriggerSpecGitFileSourceRepositoryRef {
  /**
   * Allowed value: The `name` field of a `CloudBuildV2Repository` resource.
   *
   * @schema CloudBuildTriggerSpecGitFileSourceRepositoryRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema CloudBuildTriggerSpecGitFileSourceRepositoryRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema CloudBuildTriggerSpecGitFileSourceRepositoryRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'CloudBuildTriggerSpecGitFileSourceRepositoryRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudBuildTriggerSpecGitFileSourceRepositoryRef(obj: CloudBuildTriggerSpecGitFileSourceRepositoryRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Only `external` field is supported to configure the reference.
 *
 * The full resource name of the github enterprise config. Format:
 * projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}.
 *
 * @schema CloudBuildTriggerSpecGithubEnterpriseConfigResourceNameRef
 */
export interface CloudBuildTriggerSpecGithubEnterpriseConfigResourceNameRef {
  /**
   * Allowed value: The `name` field of a `CloudBuildGithubEnterpriseConfig` resource.
   *
   * @schema CloudBuildTriggerSpecGithubEnterpriseConfigResourceNameRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema CloudBuildTriggerSpecGithubEnterpriseConfigResourceNameRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema CloudBuildTriggerSpecGithubEnterpriseConfigResourceNameRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'CloudBuildTriggerSpecGithubEnterpriseConfigResourceNameRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudBuildTriggerSpecGithubEnterpriseConfigResourceNameRef(obj: CloudBuildTriggerSpecGithubEnterpriseConfigResourceNameRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * filter to match changes in pull requests. Specify only one of 'pull_request' or 'push'.
 *
 * @schema CloudBuildTriggerSpecGithubPullRequest
 */
export interface CloudBuildTriggerSpecGithubPullRequest {
  /**
   * Regex of branches to match.
   *
   * @schema CloudBuildTriggerSpecGithubPullRequest#branch
   */
  readonly branch: string;

  /**
   * Whether to block builds on a "/gcbrun" comment from a repository owner or collaborator. Possible values: ["COMMENTS_DISABLED", "COMMENTS_ENABLED", "COMMENTS_ENABLED_FOR_EXTERNAL_CONTRIBUTORS_ONLY"].
   *
   * @schema CloudBuildTriggerSpecGithubPullRequest#commentControl
   */
  readonly commentControl?: string;

  /**
   * If true, branches that do NOT match the git_ref will trigger a build.
   *
   * @schema CloudBuildTriggerSpecGithubPullRequest#invertRegex
   */
  readonly invertRegex?: boolean;

}

/**
 * Converts an object of type 'CloudBuildTriggerSpecGithubPullRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudBuildTriggerSpecGithubPullRequest(obj: CloudBuildTriggerSpecGithubPullRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'branch': obj.branch,
    'commentControl': obj.commentControl,
    'invertRegex': obj.invertRegex,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * filter to match changes in refs, like branches or tags. Specify only one of 'pull_request' or 'push'.
 *
 * @schema CloudBuildTriggerSpecGithubPush
 */
export interface CloudBuildTriggerSpecGithubPush {
  /**
   * Regex of branches to match.  Specify only one of branch or tag.
   *
   * @schema CloudBuildTriggerSpecGithubPush#branch
   */
  readonly branch?: string;

  /**
   * When true, only trigger a build if the revision regex does NOT match the git_ref regex.
   *
   * @schema CloudBuildTriggerSpecGithubPush#invertRegex
   */
  readonly invertRegex?: boolean;

  /**
   * Regex of tags to match.  Specify only one of branch or tag.
   *
   * @schema CloudBuildTriggerSpecGithubPush#tag
   */
  readonly tag?: string;

}

/**
 * Converts an object of type 'CloudBuildTriggerSpecGithubPush' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudBuildTriggerSpecGithubPush(obj: CloudBuildTriggerSpecGithubPush | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'branch': obj.branch,
    'invertRegex': obj.invertRegex,
    'tag': obj.tag,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Service account that will make the push request.
 *
 * @schema CloudBuildTriggerSpecPubsubConfigServiceAccountRef
 */
export interface CloudBuildTriggerSpecPubsubConfigServiceAccountRef {
  /**
   * Allowed value: The `email` field of an `IAMServiceAccount` resource.
   *
   * @schema CloudBuildTriggerSpecPubsubConfigServiceAccountRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema CloudBuildTriggerSpecPubsubConfigServiceAccountRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema CloudBuildTriggerSpecPubsubConfigServiceAccountRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'CloudBuildTriggerSpecPubsubConfigServiceAccountRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudBuildTriggerSpecPubsubConfigServiceAccountRef(obj: CloudBuildTriggerSpecPubsubConfigServiceAccountRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The name of the topic from which this subscription
 * is receiving messages.
 *
 * @schema CloudBuildTriggerSpecPubsubConfigTopicRef
 */
export interface CloudBuildTriggerSpecPubsubConfigTopicRef {
  /**
   * Allowed value: string of the format `projects/{{project}}/topics/{{value}}`, where {{value}} is the `name` field of a `PubSubTopic` resource.
   *
   * @schema CloudBuildTriggerSpecPubsubConfigTopicRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema CloudBuildTriggerSpecPubsubConfigTopicRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema CloudBuildTriggerSpecPubsubConfigTopicRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'CloudBuildTriggerSpecPubsubConfigTopicRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudBuildTriggerSpecPubsubConfigTopicRef(obj: CloudBuildTriggerSpecPubsubConfigTopicRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Contains filter properties for matching Pull Requests.
 *
 * @schema CloudBuildTriggerSpecRepositoryEventConfigPullRequest
 */
export interface CloudBuildTriggerSpecRepositoryEventConfigPullRequest {
  /**
   * Regex of branches to match.
   *
   * The syntax of the regular expressions accepted is the syntax accepted by
   * RE2 and described at https://github.com/google/re2/wiki/Syntax.
   *
   * @schema CloudBuildTriggerSpecRepositoryEventConfigPullRequest#branch
   */
  readonly branch?: string;

  /**
   * Configure builds to run whether a repository owner or collaborator need to comment '/gcbrun'. Possible values: ["COMMENTS_DISABLED", "COMMENTS_ENABLED", "COMMENTS_ENABLED_FOR_EXTERNAL_CONTRIBUTORS_ONLY"].
   *
   * @schema CloudBuildTriggerSpecRepositoryEventConfigPullRequest#commentControl
   */
  readonly commentControl?: string;

  /**
   * If true, branches that do NOT match the git_ref will trigger a build.
   *
   * @schema CloudBuildTriggerSpecRepositoryEventConfigPullRequest#invertRegex
   */
  readonly invertRegex?: boolean;

}

/**
 * Converts an object of type 'CloudBuildTriggerSpecRepositoryEventConfigPullRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudBuildTriggerSpecRepositoryEventConfigPullRequest(obj: CloudBuildTriggerSpecRepositoryEventConfigPullRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'branch': obj.branch,
    'commentControl': obj.commentControl,
    'invertRegex': obj.invertRegex,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Contains filter properties for matching git pushes.
 *
 * @schema CloudBuildTriggerSpecRepositoryEventConfigPush
 */
export interface CloudBuildTriggerSpecRepositoryEventConfigPush {
  /**
   * Regex of branches to match.
   *
   * The syntax of the regular expressions accepted is the syntax accepted by
   * RE2 and described at https://github.com/google/re2/wiki/Syntax.
   *
   * @schema CloudBuildTriggerSpecRepositoryEventConfigPush#branch
   */
  readonly branch?: string;

  /**
   * If true, only trigger a build if the revision regex does NOT match the git_ref regex.
   *
   * @schema CloudBuildTriggerSpecRepositoryEventConfigPush#invertRegex
   */
  readonly invertRegex?: boolean;

  /**
   * Regex of tags to match.
   *
   * The syntax of the regular expressions accepted is the syntax accepted by
   * RE2 and described at https://github.com/google/re2/wiki/Syntax.
   *
   * @schema CloudBuildTriggerSpecRepositoryEventConfigPush#tag
   */
  readonly tag?: string;

}

/**
 * Converts an object of type 'CloudBuildTriggerSpecRepositoryEventConfigPush' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudBuildTriggerSpecRepositoryEventConfigPush(obj: CloudBuildTriggerSpecRepositoryEventConfigPush | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'branch': obj.branch,
    'invertRegex': obj.invertRegex,
    'tag': obj.tag,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Only `external` field is supported to configure the reference.
 *
 * The full resource name of the github enterprise config. Format:
 * projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}.
 *
 * @schema CloudBuildTriggerSpecSourceToBuildGithubEnterpriseConfigRef
 */
export interface CloudBuildTriggerSpecSourceToBuildGithubEnterpriseConfigRef {
  /**
   * Allowed value: The `name` field of a `CloudBuildGithubEnterpriseConfig` resource.
   *
   * @schema CloudBuildTriggerSpecSourceToBuildGithubEnterpriseConfigRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema CloudBuildTriggerSpecSourceToBuildGithubEnterpriseConfigRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema CloudBuildTriggerSpecSourceToBuildGithubEnterpriseConfigRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'CloudBuildTriggerSpecSourceToBuildGithubEnterpriseConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudBuildTriggerSpecSourceToBuildGithubEnterpriseConfigRef(obj: CloudBuildTriggerSpecSourceToBuildGithubEnterpriseConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Only `external` field is supported to configure the reference.
 *
 * The qualified resource name of the Repo API repository.
 * Either uri or repository can be specified and is required.
 *
 * @schema CloudBuildTriggerSpecSourceToBuildRepositoryRef
 */
export interface CloudBuildTriggerSpecSourceToBuildRepositoryRef {
  /**
   * Allowed value: The `name` field of a `CloudBuildV2Repository` resource.
   *
   * @schema CloudBuildTriggerSpecSourceToBuildRepositoryRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema CloudBuildTriggerSpecSourceToBuildRepositoryRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema CloudBuildTriggerSpecSourceToBuildRepositoryRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'CloudBuildTriggerSpecSourceToBuildRepositoryRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudBuildTriggerSpecSourceToBuildRepositoryRef(obj: CloudBuildTriggerSpecSourceToBuildRepositoryRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The Cloud Source Repository to build. If omitted, the repo with
 * name "default" is assumed.
 *
 * @schema CloudBuildTriggerSpecTriggerTemplateRepoRef
 */
export interface CloudBuildTriggerSpecTriggerTemplateRepoRef {
  /**
   * Allowed value: The `name` field of a `SourceRepoRepository` resource.
   *
   * @schema CloudBuildTriggerSpecTriggerTemplateRepoRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema CloudBuildTriggerSpecTriggerTemplateRepoRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema CloudBuildTriggerSpecTriggerTemplateRepoRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'CloudBuildTriggerSpecTriggerTemplateRepoRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudBuildTriggerSpecTriggerTemplateRepoRef(obj: CloudBuildTriggerSpecTriggerTemplateRepoRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The secret required
 *
 * @schema CloudBuildTriggerSpecWebhookConfigSecretRef
 */
export interface CloudBuildTriggerSpecWebhookConfigSecretRef {
  /**
   * Allowed value: The `name` field of a `SecretManagerSecret` resource.
   *
   * @schema CloudBuildTriggerSpecWebhookConfigSecretRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema CloudBuildTriggerSpecWebhookConfigSecretRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema CloudBuildTriggerSpecWebhookConfigSecretRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'CloudBuildTriggerSpecWebhookConfigSecretRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudBuildTriggerSpecWebhookConfigSecretRef(obj: CloudBuildTriggerSpecWebhookConfigSecretRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps.
 *
 * Files in the workspace matching specified paths globs will be uploaded to the
 * Cloud Storage location using the builder service account's credentials.
 *
 * The location and generation of the uploaded objects will be stored in the Build resource's results field.
 *
 * If any objects fail to be pushed, the build is marked FAILURE.
 *
 * @schema CloudBuildTriggerSpecBuildArtifactsObjects
 */
export interface CloudBuildTriggerSpecBuildArtifactsObjects {
  /**
   * Cloud Storage bucket and optional object path, in the form "gs://bucket/path/to/somewhere/".
   *
   * Files in the workspace matching any path pattern will be uploaded to Cloud Storage with
   * this location as a prefix.
   *
   * @schema CloudBuildTriggerSpecBuildArtifactsObjects#location
   */
  readonly location?: string;

  /**
   * Path globs used to match files in the build's workspace.
   *
   * @schema CloudBuildTriggerSpecBuildArtifactsObjects#paths
   */
  readonly paths?: string[];

  /**
   * Output only. Stores timing information for pushing all artifact objects.
   *
   * @schema CloudBuildTriggerSpecBuildArtifactsObjects#timing
   */
  readonly timing?: CloudBuildTriggerSpecBuildArtifactsObjectsTiming[];

}

/**
 * Converts an object of type 'CloudBuildTriggerSpecBuildArtifactsObjects' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudBuildTriggerSpecBuildArtifactsObjects(obj: CloudBuildTriggerSpecBuildArtifactsObjects | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'location': obj.location,
    'paths': obj.paths?.map(y => y),
    'timing': obj.timing?.map(y => toJson_CloudBuildTriggerSpecBuildArtifactsObjectsTiming(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CloudBuildTriggerSpecBuildAvailableSecretsSecretManager
 */
export interface CloudBuildTriggerSpecBuildAvailableSecretsSecretManager {
  /**
   * Environment variable name to associate with the secret. Secret environment
   * variables must be unique across all of a build's secrets, and must be used
   * by at least one build step.
   *
   * @schema CloudBuildTriggerSpecBuildAvailableSecretsSecretManager#env
   */
  readonly env: string;

  /**
   * @schema CloudBuildTriggerSpecBuildAvailableSecretsSecretManager#versionRef
   */
  readonly versionRef: CloudBuildTriggerSpecBuildAvailableSecretsSecretManagerVersionRef;

}

/**
 * Converts an object of type 'CloudBuildTriggerSpecBuildAvailableSecretsSecretManager' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudBuildTriggerSpecBuildAvailableSecretsSecretManager(obj: CloudBuildTriggerSpecBuildAvailableSecretsSecretManager | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'env': obj.env,
    'versionRef': toJson_CloudBuildTriggerSpecBuildAvailableSecretsSecretManagerVersionRef(obj.versionRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CloudBuildTriggerSpecBuildOptionsVolumes
 */
export interface CloudBuildTriggerSpecBuildOptionsVolumes {
  /**
   * Name of the volume to mount.
   *
   * Volume names must be unique per build step and must be valid names for Docker volumes.
   * Each named volume must be used by at least two build steps.
   *
   * @schema CloudBuildTriggerSpecBuildOptionsVolumes#name
   */
  readonly name?: string;

  /**
   * Path at which to mount the volume.
   *
   * Paths must be absolute and cannot conflict with other volume paths on the same
   * build step or with certain reserved volume paths.
   *
   * @schema CloudBuildTriggerSpecBuildOptionsVolumes#path
   */
  readonly path?: string;

}

/**
 * Converts an object of type 'CloudBuildTriggerSpecBuildOptionsVolumes' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudBuildTriggerSpecBuildOptionsVolumes(obj: CloudBuildTriggerSpecBuildOptionsVolumes | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'path': obj.path,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * KMS crypto key to use to decrypt these envs.
 *
 * @schema CloudBuildTriggerSpecBuildSecretKmsKeyRef
 */
export interface CloudBuildTriggerSpecBuildSecretKmsKeyRef {
  /**
   * Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.
   *
   * @schema CloudBuildTriggerSpecBuildSecretKmsKeyRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema CloudBuildTriggerSpecBuildSecretKmsKeyRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema CloudBuildTriggerSpecBuildSecretKmsKeyRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'CloudBuildTriggerSpecBuildSecretKmsKeyRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudBuildTriggerSpecBuildSecretKmsKeyRef(obj: CloudBuildTriggerSpecBuildSecretKmsKeyRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Location of the source in a Google Cloud Source Repository.
 *
 * @schema CloudBuildTriggerSpecBuildSourceRepoSource
 */
export interface CloudBuildTriggerSpecBuildSourceRepoSource {
  /**
   * Regex matching branches to build. Exactly one a of branch name, tag, or commit SHA must be provided.
   * The syntax of the regular expressions accepted is the syntax accepted by RE2 and
   * described at https://github.com/google/re2/wiki/Syntax.
   *
   * @schema CloudBuildTriggerSpecBuildSourceRepoSource#branchName
   */
  readonly branchName?: string;

  /**
   * Explicit commit SHA to build. Exactly one a of branch name, tag, or commit SHA must be provided.
   *
   * @schema CloudBuildTriggerSpecBuildSourceRepoSource#commitSha
   */
  readonly commitSha?: string;

  /**
   * Directory, relative to the source root, in which to run the build.
   * This must be a relative path. If a step's dir is specified and is an absolute path,
   * this value is ignored for that step's execution.
   *
   * @schema CloudBuildTriggerSpecBuildSourceRepoSource#dir
   */
  readonly dir?: string;

  /**
   * Only trigger a build if the revision regex does NOT match the revision regex.
   *
   * @schema CloudBuildTriggerSpecBuildSourceRepoSource#invertRegex
   */
  readonly invertRegex?: boolean;

  /**
   * ID of the project that owns the Cloud Source Repository.
   * If omitted, the project ID requesting the build is assumed.
   *
   * @schema CloudBuildTriggerSpecBuildSourceRepoSource#projectId
   */
  readonly projectId?: string;

  /**
   * The desired Cloud Source Repository. If omitted, "default" is
   * assumed.
   *
   * @schema CloudBuildTriggerSpecBuildSourceRepoSource#repoRef
   */
  readonly repoRef: CloudBuildTriggerSpecBuildSourceRepoSourceRepoRef;

  /**
   * Substitutions to use in a triggered build. Should only be used with triggers.run.
   *
   * @schema CloudBuildTriggerSpecBuildSourceRepoSource#substitutions
   */
  readonly substitutions?: { [key: string]: string };

  /**
   * Regex matching tags to build. Exactly one a of branch name, tag, or commit SHA must be provided.
   * The syntax of the regular expressions accepted is the syntax accepted by RE2 and
   * described at https://github.com/google/re2/wiki/Syntax.
   *
   * @schema CloudBuildTriggerSpecBuildSourceRepoSource#tagName
   */
  readonly tagName?: string;

}

/**
 * Converts an object of type 'CloudBuildTriggerSpecBuildSourceRepoSource' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudBuildTriggerSpecBuildSourceRepoSource(obj: CloudBuildTriggerSpecBuildSourceRepoSource | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'branchName': obj.branchName,
    'commitSha': obj.commitSha,
    'dir': obj.dir,
    'invertRegex': obj.invertRegex,
    'projectId': obj.projectId,
    'repoRef': toJson_CloudBuildTriggerSpecBuildSourceRepoSourceRepoRef(obj.repoRef),
    'substitutions': ((obj.substitutions) === undefined) ? undefined : (Object.entries(obj.substitutions).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'tagName': obj.tagName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Location of the source in an archive file in Google Cloud Storage.
 *
 * @schema CloudBuildTriggerSpecBuildSourceStorageSource
 */
export interface CloudBuildTriggerSpecBuildSourceStorageSource {
  /**
   * Google Cloud Storage bucket containing the source.
   *
   * @schema CloudBuildTriggerSpecBuildSourceStorageSource#bucketRef
   */
  readonly bucketRef: CloudBuildTriggerSpecBuildSourceStorageSourceBucketRef;

  /**
   * Google Cloud Storage generation for the object.
   * If the generation is omitted, the latest generation will be used.
   *
   * @schema CloudBuildTriggerSpecBuildSourceStorageSource#generation
   */
  readonly generation?: string;

  /**
   * Google Cloud Storage object containing the source.
   * This object must be a gzipped archive file (.tar.gz) containing source to build.
   *
   * @schema CloudBuildTriggerSpecBuildSourceStorageSource#object
   */
  readonly object: string;

}

/**
 * Converts an object of type 'CloudBuildTriggerSpecBuildSourceStorageSource' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudBuildTriggerSpecBuildSourceStorageSource(obj: CloudBuildTriggerSpecBuildSourceStorageSource | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bucketRef': toJson_CloudBuildTriggerSpecBuildSourceStorageSourceBucketRef(obj.bucketRef),
    'generation': obj.generation,
    'object': obj.object,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CloudBuildTriggerSpecBuildStepVolumes
 */
export interface CloudBuildTriggerSpecBuildStepVolumes {
  /**
   * Name of the volume to mount.
   *
   * Volume names must be unique per build step and must be valid names for
   * Docker volumes. Each named volume must be used by at least two build steps.
   *
   * @schema CloudBuildTriggerSpecBuildStepVolumes#name
   */
  readonly name: string;

  /**
   * Path at which to mount the volume.
   *
   * Paths must be absolute and cannot conflict with other volume paths on
   * the same build step or with certain reserved volume paths.
   *
   * @schema CloudBuildTriggerSpecBuildStepVolumes#path
   */
  readonly path: string;

}

/**
 * Converts an object of type 'CloudBuildTriggerSpecBuildStepVolumes' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudBuildTriggerSpecBuildStepVolumes(obj: CloudBuildTriggerSpecBuildStepVolumes | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'path': obj.path,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CloudBuildTriggerSpecBuildArtifactsObjectsTiming
 */
export interface CloudBuildTriggerSpecBuildArtifactsObjectsTiming {
  /**
   * End of time span.
   *
   * A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to
   * nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
   *
   * @schema CloudBuildTriggerSpecBuildArtifactsObjectsTiming#endTime
   */
  readonly endTime?: string;

  /**
   * Start of time span.
   *
   * A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to
   * nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
   *
   * @schema CloudBuildTriggerSpecBuildArtifactsObjectsTiming#startTime
   */
  readonly startTime?: string;

}

/**
 * Converts an object of type 'CloudBuildTriggerSpecBuildArtifactsObjectsTiming' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudBuildTriggerSpecBuildArtifactsObjectsTiming(obj: CloudBuildTriggerSpecBuildArtifactsObjectsTiming | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'endTime': obj.endTime,
    'startTime': obj.startTime,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CloudBuildTriggerSpecBuildAvailableSecretsSecretManagerVersionRef
 */
export interface CloudBuildTriggerSpecBuildAvailableSecretsSecretManagerVersionRef {
  /**
   * Allowed value: The `name` field of a `SecretManagerSecretVersion` resource.
   *
   * @schema CloudBuildTriggerSpecBuildAvailableSecretsSecretManagerVersionRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema CloudBuildTriggerSpecBuildAvailableSecretsSecretManagerVersionRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema CloudBuildTriggerSpecBuildAvailableSecretsSecretManagerVersionRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'CloudBuildTriggerSpecBuildAvailableSecretsSecretManagerVersionRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudBuildTriggerSpecBuildAvailableSecretsSecretManagerVersionRef(obj: CloudBuildTriggerSpecBuildAvailableSecretsSecretManagerVersionRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The desired Cloud Source Repository. If omitted, "default" is
 * assumed.
 *
 * @schema CloudBuildTriggerSpecBuildSourceRepoSourceRepoRef
 */
export interface CloudBuildTriggerSpecBuildSourceRepoSourceRepoRef {
  /**
   * Allowed value: The `name` field of a `SourceRepoRepository` resource.
   *
   * @schema CloudBuildTriggerSpecBuildSourceRepoSourceRepoRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema CloudBuildTriggerSpecBuildSourceRepoSourceRepoRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema CloudBuildTriggerSpecBuildSourceRepoSourceRepoRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'CloudBuildTriggerSpecBuildSourceRepoSourceRepoRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudBuildTriggerSpecBuildSourceRepoSourceRepoRef(obj: CloudBuildTriggerSpecBuildSourceRepoSourceRepoRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Google Cloud Storage bucket containing the source.
 *
 * @schema CloudBuildTriggerSpecBuildSourceStorageSourceBucketRef
 */
export interface CloudBuildTriggerSpecBuildSourceStorageSourceBucketRef {
  /**
   * Allowed value: The `name` field of a `StorageBucket` resource.
   *
   * @schema CloudBuildTriggerSpecBuildSourceStorageSourceBucketRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema CloudBuildTriggerSpecBuildSourceStorageSourceBucketRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema CloudBuildTriggerSpecBuildSourceStorageSourceBucketRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'CloudBuildTriggerSpecBuildSourceStorageSourceBucketRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudBuildTriggerSpecBuildSourceStorageSourceBucketRef(obj: CloudBuildTriggerSpecBuildSourceStorageSourceBucketRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

