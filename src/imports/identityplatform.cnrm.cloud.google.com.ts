// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 *
 *
 * @schema IdentityPlatformConfig
 */
export class IdentityPlatformConfig extends ApiObject {
  /**
   * Returns the apiVersion and kind for "IdentityPlatformConfig"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'identityplatform.cnrm.cloud.google.com/v1beta1',
    kind: 'IdentityPlatformConfig',
  }

  /**
   * Renders a Kubernetes manifest for "IdentityPlatformConfig".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: IdentityPlatformConfigProps): any {
    return {
      ...IdentityPlatformConfig.GVK,
      ...toJson_IdentityPlatformConfigProps(props),
    };
  }

  /**
   * Defines a "IdentityPlatformConfig" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: IdentityPlatformConfigProps) {
    super(scope, id, {
      ...IdentityPlatformConfig.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...IdentityPlatformConfig.GVK,
      ...toJson_IdentityPlatformConfigProps(resolved),
    };
  }
}

/**
 * @schema IdentityPlatformConfig
 */
export interface IdentityPlatformConfigProps {
  /**
   * @schema IdentityPlatformConfig#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema IdentityPlatformConfig#spec
   */
  readonly spec: IdentityPlatformConfigSpec;

}

/**
 * Converts an object of type 'IdentityPlatformConfigProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPlatformConfigProps(obj: IdentityPlatformConfigProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_IdentityPlatformConfigSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema IdentityPlatformConfigSpec
 */
export interface IdentityPlatformConfigSpec {
  /**
   * List of domains authorized for OAuth redirects
   *
   * @schema IdentityPlatformConfigSpec#authorizedDomains
   */
  readonly authorizedDomains?: string[];

  /**
   * Configuration related to blocking functions.
   *
   * @schema IdentityPlatformConfigSpec#blockingFunctions
   */
  readonly blockingFunctions?: IdentityPlatformConfigSpecBlockingFunctions;

  /**
   * Options related to how clients making requests on behalf of a project should be configured.
   *
   * @schema IdentityPlatformConfigSpec#client
   */
  readonly client?: IdentityPlatformConfigSpecClient;

  /**
   * Configuration for this project's multi-factor authentication, including whether it is active and what factors can be used for the second factor
   *
   * @schema IdentityPlatformConfigSpec#mfa
   */
  readonly mfa?: IdentityPlatformConfigSpecMfa;

  /**
   * Configuration related to monitoring project activity.
   *
   * @schema IdentityPlatformConfigSpec#monitoring
   */
  readonly monitoring?: IdentityPlatformConfigSpecMonitoring;

  /**
   * Configuration related to multi-tenant functionality.
   *
   * @schema IdentityPlatformConfigSpec#multiTenant
   */
  readonly multiTenant?: IdentityPlatformConfigSpecMultiTenant;

  /**
   * Configuration related to sending notifications to users.
   *
   * @schema IdentityPlatformConfigSpec#notification
   */
  readonly notification?: IdentityPlatformConfigSpecNotification;

  /**
   * Immutable. The Project that this resource belongs to.
   *
   * @schema IdentityPlatformConfigSpec#projectRef
   */
  readonly projectRef: IdentityPlatformConfigSpecProjectRef;

  /**
   * Configuration related to quotas.
   *
   * @schema IdentityPlatformConfigSpec#quota
   */
  readonly quota?: IdentityPlatformConfigSpecQuota;

  /**
   * Configuration related to local sign in methods.
   *
   * @schema IdentityPlatformConfigSpec#signIn
   */
  readonly signIn?: IdentityPlatformConfigSpecSignIn;

}

/**
 * Converts an object of type 'IdentityPlatformConfigSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPlatformConfigSpec(obj: IdentityPlatformConfigSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'authorizedDomains': obj.authorizedDomains?.map(y => y),
    'blockingFunctions': toJson_IdentityPlatformConfigSpecBlockingFunctions(obj.blockingFunctions),
    'client': toJson_IdentityPlatformConfigSpecClient(obj.client),
    'mfa': toJson_IdentityPlatformConfigSpecMfa(obj.mfa),
    'monitoring': toJson_IdentityPlatformConfigSpecMonitoring(obj.monitoring),
    'multiTenant': toJson_IdentityPlatformConfigSpecMultiTenant(obj.multiTenant),
    'notification': toJson_IdentityPlatformConfigSpecNotification(obj.notification),
    'projectRef': toJson_IdentityPlatformConfigSpecProjectRef(obj.projectRef),
    'quota': toJson_IdentityPlatformConfigSpecQuota(obj.quota),
    'signIn': toJson_IdentityPlatformConfigSpecSignIn(obj.signIn),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration related to blocking functions.
 *
 * @schema IdentityPlatformConfigSpecBlockingFunctions
 */
export interface IdentityPlatformConfigSpecBlockingFunctions {
  /**
   * Map of Trigger to event type. Key should be one of the supported event types: "beforeCreate", "beforeSignIn"
   *
   * @schema IdentityPlatformConfigSpecBlockingFunctions#triggers
   */
  readonly triggers?: { [key: string]: IdentityPlatformConfigSpecBlockingFunctionsTriggers };

}

/**
 * Converts an object of type 'IdentityPlatformConfigSpecBlockingFunctions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPlatformConfigSpecBlockingFunctions(obj: IdentityPlatformConfigSpecBlockingFunctions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'triggers': ((obj.triggers) === undefined) ? undefined : (Object.entries(obj.triggers).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: toJson_IdentityPlatformConfigSpecBlockingFunctionsTriggers(i[1]) }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Options related to how clients making requests on behalf of a project should be configured.
 *
 * @schema IdentityPlatformConfigSpecClient
 */
export interface IdentityPlatformConfigSpecClient {
  /**
   * Configuration related to restricting a user's ability to affect their account.
   *
   * @schema IdentityPlatformConfigSpecClient#permissions
   */
  readonly permissions?: IdentityPlatformConfigSpecClientPermissions;

}

/**
 * Converts an object of type 'IdentityPlatformConfigSpecClient' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPlatformConfigSpecClient(obj: IdentityPlatformConfigSpecClient | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'permissions': toJson_IdentityPlatformConfigSpecClientPermissions(obj.permissions),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration for this project's multi-factor authentication, including whether it is active and what factors can be used for the second factor
 *
 * @schema IdentityPlatformConfigSpecMfa
 */
export interface IdentityPlatformConfigSpecMfa {
  /**
   * Whether MultiFactor Authentication has been enabled for this project. Possible values: STATE_UNSPECIFIED, DISABLED, ENABLED, MANDATORY
   *
   * @schema IdentityPlatformConfigSpecMfa#state
   */
  readonly state?: string;

}

/**
 * Converts an object of type 'IdentityPlatformConfigSpecMfa' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPlatformConfigSpecMfa(obj: IdentityPlatformConfigSpecMfa | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'state': obj.state,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration related to monitoring project activity.
 *
 * @schema IdentityPlatformConfigSpecMonitoring
 */
export interface IdentityPlatformConfigSpecMonitoring {
  /**
   * Configuration for logging requests made to this project to Stackdriver Logging
   *
   * @schema IdentityPlatformConfigSpecMonitoring#requestLogging
   */
  readonly requestLogging?: IdentityPlatformConfigSpecMonitoringRequestLogging;

}

/**
 * Converts an object of type 'IdentityPlatformConfigSpecMonitoring' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPlatformConfigSpecMonitoring(obj: IdentityPlatformConfigSpecMonitoring | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'requestLogging': toJson_IdentityPlatformConfigSpecMonitoringRequestLogging(obj.requestLogging),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration related to multi-tenant functionality.
 *
 * @schema IdentityPlatformConfigSpecMultiTenant
 */
export interface IdentityPlatformConfigSpecMultiTenant {
  /**
   * Whether this project can have tenants or not.
   *
   * @schema IdentityPlatformConfigSpecMultiTenant#allowTenants
   */
  readonly allowTenants?: boolean;

  /**
   * @schema IdentityPlatformConfigSpecMultiTenant#defaultTenantLocationRef
   */
  readonly defaultTenantLocationRef?: IdentityPlatformConfigSpecMultiTenantDefaultTenantLocationRef;

}

/**
 * Converts an object of type 'IdentityPlatformConfigSpecMultiTenant' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPlatformConfigSpecMultiTenant(obj: IdentityPlatformConfigSpecMultiTenant | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'allowTenants': obj.allowTenants,
    'defaultTenantLocationRef': toJson_IdentityPlatformConfigSpecMultiTenantDefaultTenantLocationRef(obj.defaultTenantLocationRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration related to sending notifications to users.
 *
 * @schema IdentityPlatformConfigSpecNotification
 */
export interface IdentityPlatformConfigSpecNotification {
  /**
   * Default locale used for email and SMS in IETF BCP 47 format.
   *
   * @schema IdentityPlatformConfigSpecNotification#defaultLocale
   */
  readonly defaultLocale?: string;

  /**
   * Options for email sending.
   *
   * @schema IdentityPlatformConfigSpecNotification#sendEmail
   */
  readonly sendEmail?: IdentityPlatformConfigSpecNotificationSendEmail;

  /**
   * Options for SMS sending.
   *
   * @schema IdentityPlatformConfigSpecNotification#sendSms
   */
  readonly sendSms?: IdentityPlatformConfigSpecNotificationSendSms;

}

/**
 * Converts an object of type 'IdentityPlatformConfigSpecNotification' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPlatformConfigSpecNotification(obj: IdentityPlatformConfigSpecNotification | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'defaultLocale': obj.defaultLocale,
    'sendEmail': toJson_IdentityPlatformConfigSpecNotificationSendEmail(obj.sendEmail),
    'sendSms': toJson_IdentityPlatformConfigSpecNotificationSendSms(obj.sendSms),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. The Project that this resource belongs to.
 *
 * @schema IdentityPlatformConfigSpecProjectRef
 */
export interface IdentityPlatformConfigSpecProjectRef {
  /**
   * The project of the resource
   *
   * Allowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).
   *
   * @schema IdentityPlatformConfigSpecProjectRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema IdentityPlatformConfigSpecProjectRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema IdentityPlatformConfigSpecProjectRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'IdentityPlatformConfigSpecProjectRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPlatformConfigSpecProjectRef(obj: IdentityPlatformConfigSpecProjectRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration related to quotas.
 *
 * @schema IdentityPlatformConfigSpecQuota
 */
export interface IdentityPlatformConfigSpecQuota {
  /**
   * Quota for the Signup endpoint, if overwritten. Signup quota is measured in sign ups per project per hour per IP.
   *
   * @schema IdentityPlatformConfigSpecQuota#signUpQuotaConfig
   */
  readonly signUpQuotaConfig?: IdentityPlatformConfigSpecQuotaSignUpQuotaConfig;

}

/**
 * Converts an object of type 'IdentityPlatformConfigSpecQuota' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPlatformConfigSpecQuota(obj: IdentityPlatformConfigSpecQuota | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'signUpQuotaConfig': toJson_IdentityPlatformConfigSpecQuotaSignUpQuotaConfig(obj.signUpQuotaConfig),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration related to local sign in methods.
 *
 * @schema IdentityPlatformConfigSpecSignIn
 */
export interface IdentityPlatformConfigSpecSignIn {
  /**
   * Whether to allow more than one account to have the same email.
   *
   * @schema IdentityPlatformConfigSpecSignIn#allowDuplicateEmails
   */
  readonly allowDuplicateEmails?: boolean;

  /**
   * Configuration options related to authenticating an anonymous user.
   *
   * @schema IdentityPlatformConfigSpecSignIn#anonymous
   */
  readonly anonymous?: IdentityPlatformConfigSpecSignInAnonymous;

  /**
   * Configuration options related to authenticating a user by their email address.
   *
   * @schema IdentityPlatformConfigSpecSignIn#email
   */
  readonly email?: IdentityPlatformConfigSpecSignInEmail;

  /**
   * Configuration options related to authenticated a user by their phone number.
   *
   * @schema IdentityPlatformConfigSpecSignIn#phoneNumber
   */
  readonly phoneNumber?: IdentityPlatformConfigSpecSignInPhoneNumber;

}

/**
 * Converts an object of type 'IdentityPlatformConfigSpecSignIn' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPlatformConfigSpecSignIn(obj: IdentityPlatformConfigSpecSignIn | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'allowDuplicateEmails': obj.allowDuplicateEmails,
    'anonymous': toJson_IdentityPlatformConfigSpecSignInAnonymous(obj.anonymous),
    'email': toJson_IdentityPlatformConfigSpecSignInEmail(obj.email),
    'phoneNumber': toJson_IdentityPlatformConfigSpecSignInPhoneNumber(obj.phoneNumber),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema IdentityPlatformConfigSpecBlockingFunctionsTriggers
 */
export interface IdentityPlatformConfigSpecBlockingFunctionsTriggers {
  /**
   * @schema IdentityPlatformConfigSpecBlockingFunctionsTriggers#functionUriRef
   */
  readonly functionUriRef?: IdentityPlatformConfigSpecBlockingFunctionsTriggersFunctionUriRef;

  /**
   * When the trigger was changed.
   *
   * @schema IdentityPlatformConfigSpecBlockingFunctionsTriggers#updateTime
   */
  readonly updateTime?: Date;

}

/**
 * Converts an object of type 'IdentityPlatformConfigSpecBlockingFunctionsTriggers' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPlatformConfigSpecBlockingFunctionsTriggers(obj: IdentityPlatformConfigSpecBlockingFunctionsTriggers | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'functionUriRef': toJson_IdentityPlatformConfigSpecBlockingFunctionsTriggersFunctionUriRef(obj.functionUriRef),
    'updateTime': obj.updateTime?.toISOString(),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration related to restricting a user's ability to affect their account.
 *
 * @schema IdentityPlatformConfigSpecClientPermissions
 */
export interface IdentityPlatformConfigSpecClientPermissions {
  /**
   * When true, end users cannot delete their account on the associated project through any of our API methods
   *
   * @schema IdentityPlatformConfigSpecClientPermissions#disabledUserDeletion
   */
  readonly disabledUserDeletion?: boolean;

  /**
   * When true, end users cannot sign up for a new account on the associated project through any of our API methods
   *
   * @schema IdentityPlatformConfigSpecClientPermissions#disabledUserSignup
   */
  readonly disabledUserSignup?: boolean;

}

/**
 * Converts an object of type 'IdentityPlatformConfigSpecClientPermissions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPlatformConfigSpecClientPermissions(obj: IdentityPlatformConfigSpecClientPermissions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'disabledUserDeletion': obj.disabledUserDeletion,
    'disabledUserSignup': obj.disabledUserSignup,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration for logging requests made to this project to Stackdriver Logging
 *
 * @schema IdentityPlatformConfigSpecMonitoringRequestLogging
 */
export interface IdentityPlatformConfigSpecMonitoringRequestLogging {
  /**
   * Whether logging is enabled for this project or not.
   *
   * @schema IdentityPlatformConfigSpecMonitoringRequestLogging#enabled
   */
  readonly enabled?: boolean;

}

/**
 * Converts an object of type 'IdentityPlatformConfigSpecMonitoringRequestLogging' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPlatformConfigSpecMonitoringRequestLogging(obj: IdentityPlatformConfigSpecMonitoringRequestLogging | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema IdentityPlatformConfigSpecMultiTenantDefaultTenantLocationRef
 */
export interface IdentityPlatformConfigSpecMultiTenantDefaultTenantLocationRef {
  /**
   * The default cloud parent org or folder that the tenant project should be created under. The parent resource name should be in the format of "<type>/<number>", such as "folders/123" or "organizations/456". If the value is not set, the tenant will be created under the same organization or folder as the agent project.
   *
   * Allowed values:
   * * The Google Cloud resource name of a `Folder` resource (format: `folders/{{name}}`).
   * * The Google Cloud resource name of a Google Cloud Organization (format: `organizations/{{name}}`).
   *
   * @schema IdentityPlatformConfigSpecMultiTenantDefaultTenantLocationRef#external
   */
  readonly external?: string;

  /**
   * Kind of the referent. Allowed values: Folder
   *
   * @schema IdentityPlatformConfigSpecMultiTenantDefaultTenantLocationRef#kind
   */
  readonly kind?: string;

  /**
   * [WARNING] Organization not yet supported in Config Connector, use 'external' field to reference existing resources.
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema IdentityPlatformConfigSpecMultiTenantDefaultTenantLocationRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema IdentityPlatformConfigSpecMultiTenantDefaultTenantLocationRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'IdentityPlatformConfigSpecMultiTenantDefaultTenantLocationRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPlatformConfigSpecMultiTenantDefaultTenantLocationRef(obj: IdentityPlatformConfigSpecMultiTenantDefaultTenantLocationRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Options for email sending.
 *
 * @schema IdentityPlatformConfigSpecNotificationSendEmail
 */
export interface IdentityPlatformConfigSpecNotificationSendEmail {
  /**
   * action url in email template.
   *
   * @schema IdentityPlatformConfigSpecNotificationSendEmail#callbackUri
   */
  readonly callbackUri?: string;

  /**
   * Email template for change email
   *
   * @schema IdentityPlatformConfigSpecNotificationSendEmail#changeEmailTemplate
   */
  readonly changeEmailTemplate?: IdentityPlatformConfigSpecNotificationSendEmailChangeEmailTemplate;

  /**
   * Information of custom domain DNS verification.
   *
   * @schema IdentityPlatformConfigSpecNotificationSendEmail#dnsInfo
   */
  readonly dnsInfo?: IdentityPlatformConfigSpecNotificationSendEmailDnsInfo;

  /**
   * The method used for sending an email. Possible values: METHOD_UNSPECIFIED, DEFAULT, CUSTOM_SMTP
   *
   * @schema IdentityPlatformConfigSpecNotificationSendEmail#method
   */
  readonly method?: string;

  /**
   * Email template for reset password
   *
   * @schema IdentityPlatformConfigSpecNotificationSendEmail#resetPasswordTemplate
   */
  readonly resetPasswordTemplate?: IdentityPlatformConfigSpecNotificationSendEmailResetPasswordTemplate;

  /**
   * Email template for reverting second factor addition emails
   *
   * @schema IdentityPlatformConfigSpecNotificationSendEmail#revertSecondFactorAdditionTemplate
   */
  readonly revertSecondFactorAdditionTemplate?: IdentityPlatformConfigSpecNotificationSendEmailRevertSecondFactorAdditionTemplate;

  /**
   * Use a custom SMTP relay
   *
   * @schema IdentityPlatformConfigSpecNotificationSendEmail#smtp
   */
  readonly smtp?: IdentityPlatformConfigSpecNotificationSendEmailSmtp;

  /**
   * Email template for verify email
   *
   * @schema IdentityPlatformConfigSpecNotificationSendEmail#verifyEmailTemplate
   */
  readonly verifyEmailTemplate?: IdentityPlatformConfigSpecNotificationSendEmailVerifyEmailTemplate;

}

/**
 * Converts an object of type 'IdentityPlatformConfigSpecNotificationSendEmail' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPlatformConfigSpecNotificationSendEmail(obj: IdentityPlatformConfigSpecNotificationSendEmail | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'callbackUri': obj.callbackUri,
    'changeEmailTemplate': toJson_IdentityPlatformConfigSpecNotificationSendEmailChangeEmailTemplate(obj.changeEmailTemplate),
    'dnsInfo': toJson_IdentityPlatformConfigSpecNotificationSendEmailDnsInfo(obj.dnsInfo),
    'method': obj.method,
    'resetPasswordTemplate': toJson_IdentityPlatformConfigSpecNotificationSendEmailResetPasswordTemplate(obj.resetPasswordTemplate),
    'revertSecondFactorAdditionTemplate': toJson_IdentityPlatformConfigSpecNotificationSendEmailRevertSecondFactorAdditionTemplate(obj.revertSecondFactorAdditionTemplate),
    'smtp': toJson_IdentityPlatformConfigSpecNotificationSendEmailSmtp(obj.smtp),
    'verifyEmailTemplate': toJson_IdentityPlatformConfigSpecNotificationSendEmailVerifyEmailTemplate(obj.verifyEmailTemplate),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Options for SMS sending.
 *
 * @schema IdentityPlatformConfigSpecNotificationSendSms
 */
export interface IdentityPlatformConfigSpecNotificationSendSms {
  /**
   * Whether to use the accept_language header for SMS.
   *
   * @schema IdentityPlatformConfigSpecNotificationSendSms#useDeviceLocale
   */
  readonly useDeviceLocale?: boolean;

}

/**
 * Converts an object of type 'IdentityPlatformConfigSpecNotificationSendSms' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPlatformConfigSpecNotificationSendSms(obj: IdentityPlatformConfigSpecNotificationSendSms | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'useDeviceLocale': obj.useDeviceLocale,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Quota for the Signup endpoint, if overwritten. Signup quota is measured in sign ups per project per hour per IP.
 *
 * @schema IdentityPlatformConfigSpecQuotaSignUpQuotaConfig
 */
export interface IdentityPlatformConfigSpecQuotaSignUpQuotaConfig {
  /**
   * Corresponds to the 'refill_token_count' field in QuotaServer config
   *
   * @schema IdentityPlatformConfigSpecQuotaSignUpQuotaConfig#quota
   */
  readonly quota?: number;

  /**
   * How long this quota will be active for
   *
   * @schema IdentityPlatformConfigSpecQuotaSignUpQuotaConfig#quotaDuration
   */
  readonly quotaDuration?: string;

  /**
   * When this quota will take affect
   *
   * @schema IdentityPlatformConfigSpecQuotaSignUpQuotaConfig#startTime
   */
  readonly startTime?: Date;

}

/**
 * Converts an object of type 'IdentityPlatformConfigSpecQuotaSignUpQuotaConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPlatformConfigSpecQuotaSignUpQuotaConfig(obj: IdentityPlatformConfigSpecQuotaSignUpQuotaConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'quota': obj.quota,
    'quotaDuration': obj.quotaDuration,
    'startTime': obj.startTime?.toISOString(),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration options related to authenticating an anonymous user.
 *
 * @schema IdentityPlatformConfigSpecSignInAnonymous
 */
export interface IdentityPlatformConfigSpecSignInAnonymous {
  /**
   * Whether anonymous user auth is enabled for the project or not.
   *
   * @schema IdentityPlatformConfigSpecSignInAnonymous#enabled
   */
  readonly enabled?: boolean;

}

/**
 * Converts an object of type 'IdentityPlatformConfigSpecSignInAnonymous' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPlatformConfigSpecSignInAnonymous(obj: IdentityPlatformConfigSpecSignInAnonymous | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration options related to authenticating a user by their email address.
 *
 * @schema IdentityPlatformConfigSpecSignInEmail
 */
export interface IdentityPlatformConfigSpecSignInEmail {
  /**
   * Whether email auth is enabled for the project or not.
   *
   * @schema IdentityPlatformConfigSpecSignInEmail#enabled
   */
  readonly enabled?: boolean;

  /**
   * Whether a password is required for email auth or not. If true, both an email and password must be provided to sign in. If false, a user may sign in via either email/password or email link.
   *
   * @schema IdentityPlatformConfigSpecSignInEmail#passwordRequired
   */
  readonly passwordRequired?: boolean;

}

/**
 * Converts an object of type 'IdentityPlatformConfigSpecSignInEmail' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPlatformConfigSpecSignInEmail(obj: IdentityPlatformConfigSpecSignInEmail | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
    'passwordRequired': obj.passwordRequired,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration options related to authenticated a user by their phone number.
 *
 * @schema IdentityPlatformConfigSpecSignInPhoneNumber
 */
export interface IdentityPlatformConfigSpecSignInPhoneNumber {
  /**
   * Whether phone number auth is enabled for the project or not.
   *
   * @schema IdentityPlatformConfigSpecSignInPhoneNumber#enabled
   */
  readonly enabled?: boolean;

  /**
   * A map of that can be used for phone auth testing.
   *
   * @schema IdentityPlatformConfigSpecSignInPhoneNumber#testPhoneNumbers
   */
  readonly testPhoneNumbers?: { [key: string]: string };

}

/**
 * Converts an object of type 'IdentityPlatformConfigSpecSignInPhoneNumber' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPlatformConfigSpecSignInPhoneNumber(obj: IdentityPlatformConfigSpecSignInPhoneNumber | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
    'testPhoneNumbers': ((obj.testPhoneNumbers) === undefined) ? undefined : (Object.entries(obj.testPhoneNumbers).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema IdentityPlatformConfigSpecBlockingFunctionsTriggersFunctionUriRef
 */
export interface IdentityPlatformConfigSpecBlockingFunctionsTriggersFunctionUriRef {
  /**
   * HTTP URI trigger for the Cloud Function.
   *
   * Allowed value: The `httpsTrigger.url` field of a `CloudFunctionsFunction` resource.
   *
   * @schema IdentityPlatformConfigSpecBlockingFunctionsTriggersFunctionUriRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema IdentityPlatformConfigSpecBlockingFunctionsTriggersFunctionUriRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema IdentityPlatformConfigSpecBlockingFunctionsTriggersFunctionUriRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'IdentityPlatformConfigSpecBlockingFunctionsTriggersFunctionUriRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPlatformConfigSpecBlockingFunctionsTriggersFunctionUriRef(obj: IdentityPlatformConfigSpecBlockingFunctionsTriggersFunctionUriRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Email template for change email
 *
 * @schema IdentityPlatformConfigSpecNotificationSendEmailChangeEmailTemplate
 */
export interface IdentityPlatformConfigSpecNotificationSendEmailChangeEmailTemplate {
  /**
   * Immutable. Email body
   *
   * @schema IdentityPlatformConfigSpecNotificationSendEmailChangeEmailTemplate#body
   */
  readonly body?: string;

  /**
   * Email body format Possible values: BODY_FORMAT_UNSPECIFIED, PLAIN_TEXT, HTML
   *
   * @schema IdentityPlatformConfigSpecNotificationSendEmailChangeEmailTemplate#bodyFormat
   */
  readonly bodyFormat?: string;

  /**
   * Reply-to address
   *
   * @schema IdentityPlatformConfigSpecNotificationSendEmailChangeEmailTemplate#replyTo
   */
  readonly replyTo?: string;

  /**
   * Sender display name
   *
   * @schema IdentityPlatformConfigSpecNotificationSendEmailChangeEmailTemplate#senderDisplayName
   */
  readonly senderDisplayName?: string;

  /**
   * Local part of From address
   *
   * @schema IdentityPlatformConfigSpecNotificationSendEmailChangeEmailTemplate#senderLocalPart
   */
  readonly senderLocalPart?: string;

  /**
   * Subject of the email
   *
   * @schema IdentityPlatformConfigSpecNotificationSendEmailChangeEmailTemplate#subject
   */
  readonly subject?: string;

}

/**
 * Converts an object of type 'IdentityPlatformConfigSpecNotificationSendEmailChangeEmailTemplate' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPlatformConfigSpecNotificationSendEmailChangeEmailTemplate(obj: IdentityPlatformConfigSpecNotificationSendEmailChangeEmailTemplate | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'body': obj.body,
    'bodyFormat': obj.bodyFormat,
    'replyTo': obj.replyTo,
    'senderDisplayName': obj.senderDisplayName,
    'senderLocalPart': obj.senderLocalPart,
    'subject': obj.subject,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Information of custom domain DNS verification.
 *
 * @schema IdentityPlatformConfigSpecNotificationSendEmailDnsInfo
 */
export interface IdentityPlatformConfigSpecNotificationSendEmailDnsInfo {
  /**
   * Whether to use custom domain.
   *
   * @schema IdentityPlatformConfigSpecNotificationSendEmailDnsInfo#useCustomDomain
   */
  readonly useCustomDomain?: boolean;

}

/**
 * Converts an object of type 'IdentityPlatformConfigSpecNotificationSendEmailDnsInfo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPlatformConfigSpecNotificationSendEmailDnsInfo(obj: IdentityPlatformConfigSpecNotificationSendEmailDnsInfo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'useCustomDomain': obj.useCustomDomain,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Email template for reset password
 *
 * @schema IdentityPlatformConfigSpecNotificationSendEmailResetPasswordTemplate
 */
export interface IdentityPlatformConfigSpecNotificationSendEmailResetPasswordTemplate {
  /**
   * Email body
   *
   * @schema IdentityPlatformConfigSpecNotificationSendEmailResetPasswordTemplate#body
   */
  readonly body?: string;

  /**
   * Email body format Possible values: BODY_FORMAT_UNSPECIFIED, PLAIN_TEXT, HTML
   *
   * @schema IdentityPlatformConfigSpecNotificationSendEmailResetPasswordTemplate#bodyFormat
   */
  readonly bodyFormat?: string;

  /**
   * Reply-to address
   *
   * @schema IdentityPlatformConfigSpecNotificationSendEmailResetPasswordTemplate#replyTo
   */
  readonly replyTo?: string;

  /**
   * Sender display name
   *
   * @schema IdentityPlatformConfigSpecNotificationSendEmailResetPasswordTemplate#senderDisplayName
   */
  readonly senderDisplayName?: string;

  /**
   * Local part of From address
   *
   * @schema IdentityPlatformConfigSpecNotificationSendEmailResetPasswordTemplate#senderLocalPart
   */
  readonly senderLocalPart?: string;

  /**
   * Subject of the email
   *
   * @schema IdentityPlatformConfigSpecNotificationSendEmailResetPasswordTemplate#subject
   */
  readonly subject?: string;

}

/**
 * Converts an object of type 'IdentityPlatformConfigSpecNotificationSendEmailResetPasswordTemplate' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPlatformConfigSpecNotificationSendEmailResetPasswordTemplate(obj: IdentityPlatformConfigSpecNotificationSendEmailResetPasswordTemplate | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'body': obj.body,
    'bodyFormat': obj.bodyFormat,
    'replyTo': obj.replyTo,
    'senderDisplayName': obj.senderDisplayName,
    'senderLocalPart': obj.senderLocalPart,
    'subject': obj.subject,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Email template for reverting second factor addition emails
 *
 * @schema IdentityPlatformConfigSpecNotificationSendEmailRevertSecondFactorAdditionTemplate
 */
export interface IdentityPlatformConfigSpecNotificationSendEmailRevertSecondFactorAdditionTemplate {
  /**
   * Immutable. Email body
   *
   * @schema IdentityPlatformConfigSpecNotificationSendEmailRevertSecondFactorAdditionTemplate#body
   */
  readonly body?: string;

  /**
   * Email body format Possible values: BODY_FORMAT_UNSPECIFIED, PLAIN_TEXT, HTML
   *
   * @schema IdentityPlatformConfigSpecNotificationSendEmailRevertSecondFactorAdditionTemplate#bodyFormat
   */
  readonly bodyFormat?: string;

  /**
   * Reply-to address
   *
   * @schema IdentityPlatformConfigSpecNotificationSendEmailRevertSecondFactorAdditionTemplate#replyTo
   */
  readonly replyTo?: string;

  /**
   * Sender display name
   *
   * @schema IdentityPlatformConfigSpecNotificationSendEmailRevertSecondFactorAdditionTemplate#senderDisplayName
   */
  readonly senderDisplayName?: string;

  /**
   * Local part of From address
   *
   * @schema IdentityPlatformConfigSpecNotificationSendEmailRevertSecondFactorAdditionTemplate#senderLocalPart
   */
  readonly senderLocalPart?: string;

  /**
   * Subject of the email
   *
   * @schema IdentityPlatformConfigSpecNotificationSendEmailRevertSecondFactorAdditionTemplate#subject
   */
  readonly subject?: string;

}

/**
 * Converts an object of type 'IdentityPlatformConfigSpecNotificationSendEmailRevertSecondFactorAdditionTemplate' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPlatformConfigSpecNotificationSendEmailRevertSecondFactorAdditionTemplate(obj: IdentityPlatformConfigSpecNotificationSendEmailRevertSecondFactorAdditionTemplate | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'body': obj.body,
    'bodyFormat': obj.bodyFormat,
    'replyTo': obj.replyTo,
    'senderDisplayName': obj.senderDisplayName,
    'senderLocalPart': obj.senderLocalPart,
    'subject': obj.subject,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Use a custom SMTP relay
 *
 * @schema IdentityPlatformConfigSpecNotificationSendEmailSmtp
 */
export interface IdentityPlatformConfigSpecNotificationSendEmailSmtp {
  /**
   * SMTP relay host
   *
   * @schema IdentityPlatformConfigSpecNotificationSendEmailSmtp#host
   */
  readonly host?: string;

  /**
   * SMTP relay password
   *
   * @schema IdentityPlatformConfigSpecNotificationSendEmailSmtp#password
   */
  readonly password?: IdentityPlatformConfigSpecNotificationSendEmailSmtpPassword;

  /**
   * SMTP relay port
   *
   * @schema IdentityPlatformConfigSpecNotificationSendEmailSmtp#port
   */
  readonly port?: number;

  /**
   * SMTP security mode. Possible values: SECURITY_MODE_UNSPECIFIED, SSL, START_TLS
   *
   * @schema IdentityPlatformConfigSpecNotificationSendEmailSmtp#securityMode
   */
  readonly securityMode?: string;

  /**
   * Sender email for the SMTP relay
   *
   * @schema IdentityPlatformConfigSpecNotificationSendEmailSmtp#senderEmail
   */
  readonly senderEmail?: string;

  /**
   * SMTP relay username
   *
   * @schema IdentityPlatformConfigSpecNotificationSendEmailSmtp#username
   */
  readonly username?: string;

}

/**
 * Converts an object of type 'IdentityPlatformConfigSpecNotificationSendEmailSmtp' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPlatformConfigSpecNotificationSendEmailSmtp(obj: IdentityPlatformConfigSpecNotificationSendEmailSmtp | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'password': toJson_IdentityPlatformConfigSpecNotificationSendEmailSmtpPassword(obj.password),
    'port': obj.port,
    'securityMode': obj.securityMode,
    'senderEmail': obj.senderEmail,
    'username': obj.username,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Email template for verify email
 *
 * @schema IdentityPlatformConfigSpecNotificationSendEmailVerifyEmailTemplate
 */
export interface IdentityPlatformConfigSpecNotificationSendEmailVerifyEmailTemplate {
  /**
   * Immutable. Email body
   *
   * @schema IdentityPlatformConfigSpecNotificationSendEmailVerifyEmailTemplate#body
   */
  readonly body?: string;

  /**
   * Email body format Possible values: BODY_FORMAT_UNSPECIFIED, PLAIN_TEXT, HTML
   *
   * @schema IdentityPlatformConfigSpecNotificationSendEmailVerifyEmailTemplate#bodyFormat
   */
  readonly bodyFormat?: string;

  /**
   * Reply-to address
   *
   * @schema IdentityPlatformConfigSpecNotificationSendEmailVerifyEmailTemplate#replyTo
   */
  readonly replyTo?: string;

  /**
   * Sender display name
   *
   * @schema IdentityPlatformConfigSpecNotificationSendEmailVerifyEmailTemplate#senderDisplayName
   */
  readonly senderDisplayName?: string;

  /**
   * Local part of From address
   *
   * @schema IdentityPlatformConfigSpecNotificationSendEmailVerifyEmailTemplate#senderLocalPart
   */
  readonly senderLocalPart?: string;

  /**
   * Subject of the email
   *
   * @schema IdentityPlatformConfigSpecNotificationSendEmailVerifyEmailTemplate#subject
   */
  readonly subject?: string;

}

/**
 * Converts an object of type 'IdentityPlatformConfigSpecNotificationSendEmailVerifyEmailTemplate' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPlatformConfigSpecNotificationSendEmailVerifyEmailTemplate(obj: IdentityPlatformConfigSpecNotificationSendEmailVerifyEmailTemplate | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'body': obj.body,
    'bodyFormat': obj.bodyFormat,
    'replyTo': obj.replyTo,
    'senderDisplayName': obj.senderDisplayName,
    'senderLocalPart': obj.senderLocalPart,
    'subject': obj.subject,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SMTP relay password
 *
 * @schema IdentityPlatformConfigSpecNotificationSendEmailSmtpPassword
 */
export interface IdentityPlatformConfigSpecNotificationSendEmailSmtpPassword {
  /**
   * Value of the field. Cannot be used if 'valueFrom' is specified.
   *
   * @schema IdentityPlatformConfigSpecNotificationSendEmailSmtpPassword#value
   */
  readonly value?: string;

  /**
   * Source for the field's value. Cannot be used if 'value' is specified.
   *
   * @schema IdentityPlatformConfigSpecNotificationSendEmailSmtpPassword#valueFrom
   */
  readonly valueFrom?: IdentityPlatformConfigSpecNotificationSendEmailSmtpPasswordValueFrom;

}

/**
 * Converts an object of type 'IdentityPlatformConfigSpecNotificationSendEmailSmtpPassword' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPlatformConfigSpecNotificationSendEmailSmtpPassword(obj: IdentityPlatformConfigSpecNotificationSendEmailSmtpPassword | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'value': obj.value,
    'valueFrom': toJson_IdentityPlatformConfigSpecNotificationSendEmailSmtpPasswordValueFrom(obj.valueFrom),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Source for the field's value. Cannot be used if 'value' is specified.
 *
 * @schema IdentityPlatformConfigSpecNotificationSendEmailSmtpPasswordValueFrom
 */
export interface IdentityPlatformConfigSpecNotificationSendEmailSmtpPasswordValueFrom {
  /**
   * Reference to a value with the given key in the given Secret in the resource's namespace.
   *
   * @schema IdentityPlatformConfigSpecNotificationSendEmailSmtpPasswordValueFrom#secretKeyRef
   */
  readonly secretKeyRef?: IdentityPlatformConfigSpecNotificationSendEmailSmtpPasswordValueFromSecretKeyRef;

}

/**
 * Converts an object of type 'IdentityPlatformConfigSpecNotificationSendEmailSmtpPasswordValueFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPlatformConfigSpecNotificationSendEmailSmtpPasswordValueFrom(obj: IdentityPlatformConfigSpecNotificationSendEmailSmtpPasswordValueFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'secretKeyRef': toJson_IdentityPlatformConfigSpecNotificationSendEmailSmtpPasswordValueFromSecretKeyRef(obj.secretKeyRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to a value with the given key in the given Secret in the resource's namespace.
 *
 * @schema IdentityPlatformConfigSpecNotificationSendEmailSmtpPasswordValueFromSecretKeyRef
 */
export interface IdentityPlatformConfigSpecNotificationSendEmailSmtpPasswordValueFromSecretKeyRef {
  /**
   * Key that identifies the value to be extracted.
   *
   * @schema IdentityPlatformConfigSpecNotificationSendEmailSmtpPasswordValueFromSecretKeyRef#key
   */
  readonly key: string;

  /**
   * Name of the Secret to extract a value from.
   *
   * @schema IdentityPlatformConfigSpecNotificationSendEmailSmtpPasswordValueFromSecretKeyRef#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'IdentityPlatformConfigSpecNotificationSendEmailSmtpPasswordValueFromSecretKeyRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPlatformConfigSpecNotificationSendEmailSmtpPasswordValueFromSecretKeyRef(obj: IdentityPlatformConfigSpecNotificationSendEmailSmtpPasswordValueFromSecretKeyRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema IdentityPlatformOAuthIDPConfig
 */
export class IdentityPlatformOAuthIdpConfig extends ApiObject {
  /**
   * Returns the apiVersion and kind for "IdentityPlatformOAuthIDPConfig"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'identityplatform.cnrm.cloud.google.com/v1beta1',
    kind: 'IdentityPlatformOAuthIDPConfig',
  }

  /**
   * Renders a Kubernetes manifest for "IdentityPlatformOAuthIDPConfig".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: IdentityPlatformOAuthIdpConfigProps = {}): any {
    return {
      ...IdentityPlatformOAuthIdpConfig.GVK,
      ...toJson_IdentityPlatformOAuthIdpConfigProps(props),
    };
  }

  /**
   * Defines a "IdentityPlatformOAuthIDPConfig" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: IdentityPlatformOAuthIdpConfigProps = {}) {
    super(scope, id, {
      ...IdentityPlatformOAuthIdpConfig.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...IdentityPlatformOAuthIdpConfig.GVK,
      ...toJson_IdentityPlatformOAuthIdpConfigProps(resolved),
    };
  }
}

/**
 * @schema IdentityPlatformOAuthIDPConfig
 */
export interface IdentityPlatformOAuthIdpConfigProps {
  /**
   * @schema IdentityPlatformOAuthIDPConfig#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema IdentityPlatformOAuthIDPConfig#spec
   */
  readonly spec?: IdentityPlatformOAuthIdpConfigSpec;

}

/**
 * Converts an object of type 'IdentityPlatformOAuthIdpConfigProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPlatformOAuthIdpConfigProps(obj: IdentityPlatformOAuthIdpConfigProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_IdentityPlatformOAuthIdpConfigSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema IdentityPlatformOAuthIdpConfigSpec
 */
export interface IdentityPlatformOAuthIdpConfigSpec {
  /**
   * The client id of an OAuth client.
   *
   * @schema IdentityPlatformOAuthIdpConfigSpec#clientId
   */
  readonly clientId?: string;

  /**
   * The client secret of the OAuth client, to enable OIDC code flow.
   *
   * @schema IdentityPlatformOAuthIdpConfigSpec#clientSecret
   */
  readonly clientSecret?: IdentityPlatformOAuthIdpConfigSpecClientSecret;

  /**
   * The config's display name set by developers.
   *
   * @schema IdentityPlatformOAuthIdpConfigSpec#displayName
   */
  readonly displayName?: string;

  /**
   * True if allows the user to sign in with the provider.
   *
   * @schema IdentityPlatformOAuthIdpConfigSpec#enabled
   */
  readonly enabled?: boolean;

  /**
   * For OIDC Idps, the issuer identifier.
   *
   * @schema IdentityPlatformOAuthIdpConfigSpec#issuer
   */
  readonly issuer?: string;

  /**
   * Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
   *
   * @schema IdentityPlatformOAuthIdpConfigSpec#resourceID
   */
  readonly resourceId?: string;

  /**
   * The multiple response type to request for in the OAuth authorization flow. This can possibly be a combination of set bits (e.g.: {id\_token, token}).
   *
   * @schema IdentityPlatformOAuthIdpConfigSpec#responseType
   */
  readonly responseType?: IdentityPlatformOAuthIdpConfigSpecResponseType;

}

/**
 * Converts an object of type 'IdentityPlatformOAuthIdpConfigSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPlatformOAuthIdpConfigSpec(obj: IdentityPlatformOAuthIdpConfigSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'clientId': obj.clientId,
    'clientSecret': toJson_IdentityPlatformOAuthIdpConfigSpecClientSecret(obj.clientSecret),
    'displayName': obj.displayName,
    'enabled': obj.enabled,
    'issuer': obj.issuer,
    'resourceID': obj.resourceId,
    'responseType': toJson_IdentityPlatformOAuthIdpConfigSpecResponseType(obj.responseType),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The client secret of the OAuth client, to enable OIDC code flow.
 *
 * @schema IdentityPlatformOAuthIdpConfigSpecClientSecret
 */
export interface IdentityPlatformOAuthIdpConfigSpecClientSecret {
  /**
   * Value of the field. Cannot be used if 'valueFrom' is specified.
   *
   * @schema IdentityPlatformOAuthIdpConfigSpecClientSecret#value
   */
  readonly value?: string;

  /**
   * Source for the field's value. Cannot be used if 'value' is specified.
   *
   * @schema IdentityPlatformOAuthIdpConfigSpecClientSecret#valueFrom
   */
  readonly valueFrom?: IdentityPlatformOAuthIdpConfigSpecClientSecretValueFrom;

}

/**
 * Converts an object of type 'IdentityPlatformOAuthIdpConfigSpecClientSecret' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPlatformOAuthIdpConfigSpecClientSecret(obj: IdentityPlatformOAuthIdpConfigSpecClientSecret | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'value': obj.value,
    'valueFrom': toJson_IdentityPlatformOAuthIdpConfigSpecClientSecretValueFrom(obj.valueFrom),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The multiple response type to request for in the OAuth authorization flow. This can possibly be a combination of set bits (e.g.: {id\_token, token}).
 *
 * @schema IdentityPlatformOAuthIdpConfigSpecResponseType
 */
export interface IdentityPlatformOAuthIdpConfigSpecResponseType {
  /**
   * If true, authorization code is returned from IdP's authorization endpoint.
   *
   * @schema IdentityPlatformOAuthIdpConfigSpecResponseType#code
   */
  readonly code?: boolean;

  /**
   * If true, ID token is returned from IdP's authorization endpoint.
   *
   * @schema IdentityPlatformOAuthIdpConfigSpecResponseType#idToken
   */
  readonly idToken?: boolean;

  /**
   * If true, access token is returned from IdP's authorization endpoint.
   *
   * @schema IdentityPlatformOAuthIdpConfigSpecResponseType#token
   */
  readonly token?: boolean;

}

/**
 * Converts an object of type 'IdentityPlatformOAuthIdpConfigSpecResponseType' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPlatformOAuthIdpConfigSpecResponseType(obj: IdentityPlatformOAuthIdpConfigSpecResponseType | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'code': obj.code,
    'idToken': obj.idToken,
    'token': obj.token,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Source for the field's value. Cannot be used if 'value' is specified.
 *
 * @schema IdentityPlatformOAuthIdpConfigSpecClientSecretValueFrom
 */
export interface IdentityPlatformOAuthIdpConfigSpecClientSecretValueFrom {
  /**
   * Reference to a value with the given key in the given Secret in the resource's namespace.
   *
   * @schema IdentityPlatformOAuthIdpConfigSpecClientSecretValueFrom#secretKeyRef
   */
  readonly secretKeyRef?: IdentityPlatformOAuthIdpConfigSpecClientSecretValueFromSecretKeyRef;

}

/**
 * Converts an object of type 'IdentityPlatformOAuthIdpConfigSpecClientSecretValueFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPlatformOAuthIdpConfigSpecClientSecretValueFrom(obj: IdentityPlatformOAuthIdpConfigSpecClientSecretValueFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'secretKeyRef': toJson_IdentityPlatformOAuthIdpConfigSpecClientSecretValueFromSecretKeyRef(obj.secretKeyRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to a value with the given key in the given Secret in the resource's namespace.
 *
 * @schema IdentityPlatformOAuthIdpConfigSpecClientSecretValueFromSecretKeyRef
 */
export interface IdentityPlatformOAuthIdpConfigSpecClientSecretValueFromSecretKeyRef {
  /**
   * Key that identifies the value to be extracted.
   *
   * @schema IdentityPlatformOAuthIdpConfigSpecClientSecretValueFromSecretKeyRef#key
   */
  readonly key: string;

  /**
   * Name of the Secret to extract a value from.
   *
   * @schema IdentityPlatformOAuthIdpConfigSpecClientSecretValueFromSecretKeyRef#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'IdentityPlatformOAuthIdpConfigSpecClientSecretValueFromSecretKeyRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPlatformOAuthIdpConfigSpecClientSecretValueFromSecretKeyRef(obj: IdentityPlatformOAuthIdpConfigSpecClientSecretValueFromSecretKeyRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema IdentityPlatformTenant
 */
export class IdentityPlatformTenant extends ApiObject {
  /**
   * Returns the apiVersion and kind for "IdentityPlatformTenant"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'identityplatform.cnrm.cloud.google.com/v1beta1',
    kind: 'IdentityPlatformTenant',
  }

  /**
   * Renders a Kubernetes manifest for "IdentityPlatformTenant".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: IdentityPlatformTenantProps = {}): any {
    return {
      ...IdentityPlatformTenant.GVK,
      ...toJson_IdentityPlatformTenantProps(props),
    };
  }

  /**
   * Defines a "IdentityPlatformTenant" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: IdentityPlatformTenantProps = {}) {
    super(scope, id, {
      ...IdentityPlatformTenant.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...IdentityPlatformTenant.GVK,
      ...toJson_IdentityPlatformTenantProps(resolved),
    };
  }
}

/**
 * @schema IdentityPlatformTenant
 */
export interface IdentityPlatformTenantProps {
  /**
   * @schema IdentityPlatformTenant#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema IdentityPlatformTenant#spec
   */
  readonly spec?: IdentityPlatformTenantSpec;

}

/**
 * Converts an object of type 'IdentityPlatformTenantProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPlatformTenantProps(obj: IdentityPlatformTenantProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_IdentityPlatformTenantSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema IdentityPlatformTenantSpec
 */
export interface IdentityPlatformTenantSpec {
  /**
   * Whether to allow email/password user authentication.
   *
   * @schema IdentityPlatformTenantSpec#allowPasswordSignup
   */
  readonly allowPasswordSignup?: boolean;

  /**
   * Whether authentication is disabled for the tenant. If true, the users under the disabled tenant are not allowed to sign-in. Admins of the disabled tenant are not able to manage its users.
   *
   * @schema IdentityPlatformTenantSpec#disableAuth
   */
  readonly disableAuth?: boolean;

  /**
   * Display name of the tenant.
   *
   * @schema IdentityPlatformTenantSpec#displayName
   */
  readonly displayName?: string;

  /**
   * Whether to enable anonymous user authentication.
   *
   * @schema IdentityPlatformTenantSpec#enableAnonymousUser
   */
  readonly enableAnonymousUser?: boolean;

  /**
   * Whether to enable email link user authentication.
   *
   * @schema IdentityPlatformTenantSpec#enableEmailLinkSignin
   */
  readonly enableEmailLinkSignin?: boolean;

  /**
   * The tenant-level configuration of MFA options.
   *
   * @schema IdentityPlatformTenantSpec#mfaConfig
   */
  readonly mfaConfig?: IdentityPlatformTenantSpecMfaConfig;

  /**
   * Immutable. Optional. The service-generated name of the resource. Used for acquisition only. Leave unset to create a new resource.
   *
   * @schema IdentityPlatformTenantSpec#resourceID
   */
  readonly resourceId?: string;

  /**
   * A map of <test phone number, fake code> pairs that can be used for MFA. The phone number should be in E.164 format (https://www.itu.int/rec/T-REC-E.164/) and a maximum of 10 pairs can be added (error will be thrown once exceeded).
   *
   * @schema IdentityPlatformTenantSpec#testPhoneNumbers
   */
  readonly testPhoneNumbers?: { [key: string]: string };

}

/**
 * Converts an object of type 'IdentityPlatformTenantSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPlatformTenantSpec(obj: IdentityPlatformTenantSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'allowPasswordSignup': obj.allowPasswordSignup,
    'disableAuth': obj.disableAuth,
    'displayName': obj.displayName,
    'enableAnonymousUser': obj.enableAnonymousUser,
    'enableEmailLinkSignin': obj.enableEmailLinkSignin,
    'mfaConfig': toJson_IdentityPlatformTenantSpecMfaConfig(obj.mfaConfig),
    'resourceID': obj.resourceId,
    'testPhoneNumbers': ((obj.testPhoneNumbers) === undefined) ? undefined : (Object.entries(obj.testPhoneNumbers).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The tenant-level configuration of MFA options.
 *
 * @schema IdentityPlatformTenantSpecMfaConfig
 */
export interface IdentityPlatformTenantSpecMfaConfig {
  /**
   * A list of usable second factors for this project.
   *
   * @schema IdentityPlatformTenantSpecMfaConfig#enabledProviders
   */
  readonly enabledProviders?: string[];

  /**
   * Whether MultiFactor Authentication has been enabled for this project. Possible values: STATE_UNSPECIFIED, DISABLED, ENABLED, MANDATORY
   *
   * @schema IdentityPlatformTenantSpecMfaConfig#state
   */
  readonly state?: string;

}

/**
 * Converts an object of type 'IdentityPlatformTenantSpecMfaConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPlatformTenantSpecMfaConfig(obj: IdentityPlatformTenantSpecMfaConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabledProviders': obj.enabledProviders?.map(y => y),
    'state': obj.state,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema IdentityPlatformTenantOAuthIDPConfig
 */
export class IdentityPlatformTenantOAuthIdpConfig extends ApiObject {
  /**
   * Returns the apiVersion and kind for "IdentityPlatformTenantOAuthIDPConfig"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'identityplatform.cnrm.cloud.google.com/v1beta1',
    kind: 'IdentityPlatformTenantOAuthIDPConfig',
  }

  /**
   * Renders a Kubernetes manifest for "IdentityPlatformTenantOAuthIDPConfig".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: IdentityPlatformTenantOAuthIdpConfigProps): any {
    return {
      ...IdentityPlatformTenantOAuthIdpConfig.GVK,
      ...toJson_IdentityPlatformTenantOAuthIdpConfigProps(props),
    };
  }

  /**
   * Defines a "IdentityPlatformTenantOAuthIDPConfig" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: IdentityPlatformTenantOAuthIdpConfigProps) {
    super(scope, id, {
      ...IdentityPlatformTenantOAuthIdpConfig.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...IdentityPlatformTenantOAuthIdpConfig.GVK,
      ...toJson_IdentityPlatformTenantOAuthIdpConfigProps(resolved),
    };
  }
}

/**
 * @schema IdentityPlatformTenantOAuthIDPConfig
 */
export interface IdentityPlatformTenantOAuthIdpConfigProps {
  /**
   * @schema IdentityPlatformTenantOAuthIDPConfig#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema IdentityPlatformTenantOAuthIDPConfig#spec
   */
  readonly spec: IdentityPlatformTenantOAuthIdpConfigSpec;

}

/**
 * Converts an object of type 'IdentityPlatformTenantOAuthIdpConfigProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPlatformTenantOAuthIdpConfigProps(obj: IdentityPlatformTenantOAuthIdpConfigProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_IdentityPlatformTenantOAuthIdpConfigSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema IdentityPlatformTenantOAuthIdpConfigSpec
 */
export interface IdentityPlatformTenantOAuthIdpConfigSpec {
  /**
   * The client id of an OAuth client.
   *
   * @schema IdentityPlatformTenantOAuthIdpConfigSpec#clientId
   */
  readonly clientId?: string;

  /**
   * The client secret of the OAuth client, to enable OIDC code flow.
   *
   * @schema IdentityPlatformTenantOAuthIdpConfigSpec#clientSecret
   */
  readonly clientSecret?: IdentityPlatformTenantOAuthIdpConfigSpecClientSecret;

  /**
   * The config's display name set by developers.
   *
   * @schema IdentityPlatformTenantOAuthIdpConfigSpec#displayName
   */
  readonly displayName?: string;

  /**
   * True if allows the user to sign in with the provider.
   *
   * @schema IdentityPlatformTenantOAuthIdpConfigSpec#enabled
   */
  readonly enabled?: boolean;

  /**
   * For OIDC Idps, the issuer identifier.
   *
   * @schema IdentityPlatformTenantOAuthIdpConfigSpec#issuer
   */
  readonly issuer?: string;

  /**
   * Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
   *
   * @schema IdentityPlatformTenantOAuthIdpConfigSpec#resourceID
   */
  readonly resourceId?: string;

  /**
   * The multiple response type to request for in the OAuth authorization flow. This can possibly be a combination of set bits (e.g.: {id\_token, token}).
   *
   * @schema IdentityPlatformTenantOAuthIdpConfigSpec#responseType
   */
  readonly responseType?: IdentityPlatformTenantOAuthIdpConfigSpecResponseType;

  /**
   * Immutable.
   *
   * @schema IdentityPlatformTenantOAuthIdpConfigSpec#tenantRef
   */
  readonly tenantRef: IdentityPlatformTenantOAuthIdpConfigSpecTenantRef;

}

/**
 * Converts an object of type 'IdentityPlatformTenantOAuthIdpConfigSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPlatformTenantOAuthIdpConfigSpec(obj: IdentityPlatformTenantOAuthIdpConfigSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'clientId': obj.clientId,
    'clientSecret': toJson_IdentityPlatformTenantOAuthIdpConfigSpecClientSecret(obj.clientSecret),
    'displayName': obj.displayName,
    'enabled': obj.enabled,
    'issuer': obj.issuer,
    'resourceID': obj.resourceId,
    'responseType': toJson_IdentityPlatformTenantOAuthIdpConfigSpecResponseType(obj.responseType),
    'tenantRef': toJson_IdentityPlatformTenantOAuthIdpConfigSpecTenantRef(obj.tenantRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The client secret of the OAuth client, to enable OIDC code flow.
 *
 * @schema IdentityPlatformTenantOAuthIdpConfigSpecClientSecret
 */
export interface IdentityPlatformTenantOAuthIdpConfigSpecClientSecret {
  /**
   * Value of the field. Cannot be used if 'valueFrom' is specified.
   *
   * @schema IdentityPlatformTenantOAuthIdpConfigSpecClientSecret#value
   */
  readonly value?: string;

  /**
   * Source for the field's value. Cannot be used if 'value' is specified.
   *
   * @schema IdentityPlatformTenantOAuthIdpConfigSpecClientSecret#valueFrom
   */
  readonly valueFrom?: IdentityPlatformTenantOAuthIdpConfigSpecClientSecretValueFrom;

}

/**
 * Converts an object of type 'IdentityPlatformTenantOAuthIdpConfigSpecClientSecret' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPlatformTenantOAuthIdpConfigSpecClientSecret(obj: IdentityPlatformTenantOAuthIdpConfigSpecClientSecret | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'value': obj.value,
    'valueFrom': toJson_IdentityPlatformTenantOAuthIdpConfigSpecClientSecretValueFrom(obj.valueFrom),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The multiple response type to request for in the OAuth authorization flow. This can possibly be a combination of set bits (e.g.: {id\_token, token}).
 *
 * @schema IdentityPlatformTenantOAuthIdpConfigSpecResponseType
 */
export interface IdentityPlatformTenantOAuthIdpConfigSpecResponseType {
  /**
   * If true, authorization code is returned from IdP's authorization endpoint.
   *
   * @schema IdentityPlatformTenantOAuthIdpConfigSpecResponseType#code
   */
  readonly code?: boolean;

  /**
   * If true, ID token is returned from IdP's authorization endpoint.
   *
   * @schema IdentityPlatformTenantOAuthIdpConfigSpecResponseType#idToken
   */
  readonly idToken?: boolean;

  /**
   * If true, access token is returned from IdP's authorization endpoint.
   *
   * @schema IdentityPlatformTenantOAuthIdpConfigSpecResponseType#token
   */
  readonly token?: boolean;

}

/**
 * Converts an object of type 'IdentityPlatformTenantOAuthIdpConfigSpecResponseType' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPlatformTenantOAuthIdpConfigSpecResponseType(obj: IdentityPlatformTenantOAuthIdpConfigSpecResponseType | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'code': obj.code,
    'idToken': obj.idToken,
    'token': obj.token,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable.
 *
 * @schema IdentityPlatformTenantOAuthIdpConfigSpecTenantRef
 */
export interface IdentityPlatformTenantOAuthIdpConfigSpecTenantRef {
  /**
   * The tenant for the resource
   *
   * Allowed value: The Google Cloud resource name of an `IdentityPlatformTenant` resource (format: `projects/{{project}}/tenants/{{name}}`).
   *
   * @schema IdentityPlatformTenantOAuthIdpConfigSpecTenantRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema IdentityPlatformTenantOAuthIdpConfigSpecTenantRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema IdentityPlatformTenantOAuthIdpConfigSpecTenantRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'IdentityPlatformTenantOAuthIdpConfigSpecTenantRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPlatformTenantOAuthIdpConfigSpecTenantRef(obj: IdentityPlatformTenantOAuthIdpConfigSpecTenantRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Source for the field's value. Cannot be used if 'value' is specified.
 *
 * @schema IdentityPlatformTenantOAuthIdpConfigSpecClientSecretValueFrom
 */
export interface IdentityPlatformTenantOAuthIdpConfigSpecClientSecretValueFrom {
  /**
   * Reference to a value with the given key in the given Secret in the resource's namespace.
   *
   * @schema IdentityPlatformTenantOAuthIdpConfigSpecClientSecretValueFrom#secretKeyRef
   */
  readonly secretKeyRef?: IdentityPlatformTenantOAuthIdpConfigSpecClientSecretValueFromSecretKeyRef;

}

/**
 * Converts an object of type 'IdentityPlatformTenantOAuthIdpConfigSpecClientSecretValueFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPlatformTenantOAuthIdpConfigSpecClientSecretValueFrom(obj: IdentityPlatformTenantOAuthIdpConfigSpecClientSecretValueFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'secretKeyRef': toJson_IdentityPlatformTenantOAuthIdpConfigSpecClientSecretValueFromSecretKeyRef(obj.secretKeyRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to a value with the given key in the given Secret in the resource's namespace.
 *
 * @schema IdentityPlatformTenantOAuthIdpConfigSpecClientSecretValueFromSecretKeyRef
 */
export interface IdentityPlatformTenantOAuthIdpConfigSpecClientSecretValueFromSecretKeyRef {
  /**
   * Key that identifies the value to be extracted.
   *
   * @schema IdentityPlatformTenantOAuthIdpConfigSpecClientSecretValueFromSecretKeyRef#key
   */
  readonly key: string;

  /**
   * Name of the Secret to extract a value from.
   *
   * @schema IdentityPlatformTenantOAuthIdpConfigSpecClientSecretValueFromSecretKeyRef#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'IdentityPlatformTenantOAuthIdpConfigSpecClientSecretValueFromSecretKeyRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPlatformTenantOAuthIdpConfigSpecClientSecretValueFromSecretKeyRef(obj: IdentityPlatformTenantOAuthIdpConfigSpecClientSecretValueFromSecretKeyRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

