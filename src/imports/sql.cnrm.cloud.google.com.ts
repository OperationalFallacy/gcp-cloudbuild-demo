// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 *
 *
 * @schema SQLDatabase
 */
export class SqlDatabase extends ApiObject {
  /**
   * Returns the apiVersion and kind for "SQLDatabase"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'sql.cnrm.cloud.google.com/v1beta1',
    kind: 'SQLDatabase',
  }

  /**
   * Renders a Kubernetes manifest for "SQLDatabase".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: SqlDatabaseProps): any {
    return {
      ...SqlDatabase.GVK,
      ...toJson_SqlDatabaseProps(props),
    };
  }

  /**
   * Defines a "SQLDatabase" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: SqlDatabaseProps) {
    super(scope, id, {
      ...SqlDatabase.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...SqlDatabase.GVK,
      ...toJson_SqlDatabaseProps(resolved),
    };
  }
}

/**
 * @schema SQLDatabase
 */
export interface SqlDatabaseProps {
  /**
   * @schema SQLDatabase#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema SQLDatabase#spec
   */
  readonly spec: SqlDatabaseSpec;

}

/**
 * Converts an object of type 'SqlDatabaseProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SqlDatabaseProps(obj: SqlDatabaseProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_SqlDatabaseSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema SqlDatabaseSpec
 */
export interface SqlDatabaseSpec {
  /**
   * The charset value. See MySQL's
   * [Supported Character Sets and Collations](https://dev.mysql.com/doc/refman/5.7/en/charset-charsets.html)
   * and Postgres' [Character Set Support](https://www.postgresql.org/docs/9.6/static/multibyte.html)
   * for more details and supported values. Postgres databases only support
   * a value of 'UTF8' at creation time.
   *
   * @schema SqlDatabaseSpec#charset
   */
  readonly charset?: string;

  /**
   * The collation value. See MySQL's
   * [Supported Character Sets and Collations](https://dev.mysql.com/doc/refman/5.7/en/charset-charsets.html)
   * and Postgres' [Collation Support](https://www.postgresql.org/docs/9.6/static/collation.html)
   * for more details and supported values. Postgres databases only support
   * a value of 'en_US.UTF8' at creation time.
   *
   * @schema SqlDatabaseSpec#collation
   */
  readonly collation?: string;

  /**
   * The deletion policy for the database. Setting ABANDON allows the resource
   * to be abandoned rather than deleted. This is useful for Postgres, where databases cannot be
   * deleted from the API if there are users other than cloudsqlsuperuser with access. Possible
   * values are: "ABANDON", "DELETE". Defaults to "DELETE".
   *
   * @default DELETE".
   * @schema SqlDatabaseSpec#deletionPolicy
   */
  readonly deletionPolicy?: string;

  /**
   * The Cloud SQL instance.
   *
   * @schema SqlDatabaseSpec#instanceRef
   */
  readonly instanceRef: SqlDatabaseSpecInstanceRef;

  /**
   * Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
   *
   * @schema SqlDatabaseSpec#resourceID
   */
  readonly resourceId?: string;

}

/**
 * Converts an object of type 'SqlDatabaseSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SqlDatabaseSpec(obj: SqlDatabaseSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'charset': obj.charset,
    'collation': obj.collation,
    'deletionPolicy': obj.deletionPolicy,
    'instanceRef': toJson_SqlDatabaseSpecInstanceRef(obj.instanceRef),
    'resourceID': obj.resourceId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The Cloud SQL instance.
 *
 * @schema SqlDatabaseSpecInstanceRef
 */
export interface SqlDatabaseSpecInstanceRef {
  /**
   * Allowed value: The `name` field of a `SQLInstance` resource.
   *
   * @schema SqlDatabaseSpecInstanceRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema SqlDatabaseSpecInstanceRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema SqlDatabaseSpecInstanceRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'SqlDatabaseSpecInstanceRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SqlDatabaseSpecInstanceRef(obj: SqlDatabaseSpecInstanceRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema SQLInstance
 */
export class SqlInstance extends ApiObject {
  /**
   * Returns the apiVersion and kind for "SQLInstance"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'sql.cnrm.cloud.google.com/v1beta1',
    kind: 'SQLInstance',
  }

  /**
   * Renders a Kubernetes manifest for "SQLInstance".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: SqlInstanceProps): any {
    return {
      ...SqlInstance.GVK,
      ...toJson_SqlInstanceProps(props),
    };
  }

  /**
   * Defines a "SQLInstance" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: SqlInstanceProps) {
    super(scope, id, {
      ...SqlInstance.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...SqlInstance.GVK,
      ...toJson_SqlInstanceProps(resolved),
    };
  }
}

/**
 * @schema SQLInstance
 */
export interface SqlInstanceProps {
  /**
   * @schema SQLInstance#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema SQLInstance#spec
   */
  readonly spec: SqlInstanceSpec;

}

/**
 * Converts an object of type 'SqlInstanceProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SqlInstanceProps(obj: SqlInstanceProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_SqlInstanceSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema SqlInstanceSpec
 */
export interface SqlInstanceSpec {
  /**
   * The MySQL, PostgreSQL or SQL Server (beta) version to use. Supported values include MYSQL_5_6, MYSQL_5_7, MYSQL_8_0, POSTGRES_9_6, POSTGRES_10, POSTGRES_11, POSTGRES_12, POSTGRES_13, POSTGRES_14, POSTGRES_15, SQLSERVER_2017_STANDARD, SQLSERVER_2017_ENTERPRISE, SQLSERVER_2017_EXPRESS, SQLSERVER_2017_WEB. Database Version Policies includes an up-to-date reference of supported versions.
   *
   * @schema SqlInstanceSpec#databaseVersion
   */
  readonly databaseVersion?: string;

  /**
   * @schema SqlInstanceSpec#encryptionKMSCryptoKeyRef
   */
  readonly encryptionKmsCryptoKeyRef?: SqlInstanceSpecEncryptionKmsCryptoKeyRef;

  /**
   * The type of the instance. The valid values are:- 'SQL_INSTANCE_TYPE_UNSPECIFIED', 'CLOUD_SQL_INSTANCE', 'ON_PREMISES_INSTANCE' and 'READ_REPLICA_INSTANCE'.
   *
   * @schema SqlInstanceSpec#instanceType
   */
  readonly instanceType?: string;

  /**
   * Maintenance version.
   *
   * @schema SqlInstanceSpec#maintenanceVersion
   */
  readonly maintenanceVersion?: string;

  /**
   * @schema SqlInstanceSpec#masterInstanceRef
   */
  readonly masterInstanceRef?: SqlInstanceSpecMasterInstanceRef;

  /**
   * Immutable. The region the instance will sit in. Note, Cloud SQL is not available in all regions. A valid region must be provided to use this resource. If a region is not provided in the resource definition, the provider region will be used instead, but this will be an apply-time error for instances if the provider region is not supported with Cloud SQL. If you choose not to provide the region argument for this resource, make sure you understand this.
   *
   * @schema SqlInstanceSpec#region
   */
  readonly region?: string;

  /**
   * The configuration for replication.
   *
   * @schema SqlInstanceSpec#replicaConfiguration
   */
  readonly replicaConfiguration?: SqlInstanceSpecReplicaConfiguration;

  /**
   * Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
   *
   * @schema SqlInstanceSpec#resourceID
   */
  readonly resourceId?: string;

  /**
   * Initial root password. Required for MS SQL Server.
   *
   * @schema SqlInstanceSpec#rootPassword
   */
  readonly rootPassword?: SqlInstanceSpecRootPassword;

  /**
   * The settings to use for the database. The configuration is detailed below.
   *
   * @schema SqlInstanceSpec#settings
   */
  readonly settings: SqlInstanceSpecSettings;

}

/**
 * Converts an object of type 'SqlInstanceSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SqlInstanceSpec(obj: SqlInstanceSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'databaseVersion': obj.databaseVersion,
    'encryptionKMSCryptoKeyRef': toJson_SqlInstanceSpecEncryptionKmsCryptoKeyRef(obj.encryptionKmsCryptoKeyRef),
    'instanceType': obj.instanceType,
    'maintenanceVersion': obj.maintenanceVersion,
    'masterInstanceRef': toJson_SqlInstanceSpecMasterInstanceRef(obj.masterInstanceRef),
    'region': obj.region,
    'replicaConfiguration': toJson_SqlInstanceSpecReplicaConfiguration(obj.replicaConfiguration),
    'resourceID': obj.resourceId,
    'rootPassword': toJson_SqlInstanceSpecRootPassword(obj.rootPassword),
    'settings': toJson_SqlInstanceSpecSettings(obj.settings),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema SqlInstanceSpecEncryptionKmsCryptoKeyRef
 */
export interface SqlInstanceSpecEncryptionKmsCryptoKeyRef {
  /**
   * Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.
   *
   * @schema SqlInstanceSpecEncryptionKmsCryptoKeyRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema SqlInstanceSpecEncryptionKmsCryptoKeyRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema SqlInstanceSpecEncryptionKmsCryptoKeyRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'SqlInstanceSpecEncryptionKmsCryptoKeyRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SqlInstanceSpecEncryptionKmsCryptoKeyRef(obj: SqlInstanceSpecEncryptionKmsCryptoKeyRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema SqlInstanceSpecMasterInstanceRef
 */
export interface SqlInstanceSpecMasterInstanceRef {
  /**
   * Allowed value: The `name` field of a `SQLInstance` resource.
   *
   * @schema SqlInstanceSpecMasterInstanceRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema SqlInstanceSpecMasterInstanceRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema SqlInstanceSpecMasterInstanceRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'SqlInstanceSpecMasterInstanceRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SqlInstanceSpecMasterInstanceRef(obj: SqlInstanceSpecMasterInstanceRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The configuration for replication.
 *
 * @schema SqlInstanceSpecReplicaConfiguration
 */
export interface SqlInstanceSpecReplicaConfiguration {
  /**
   * Immutable. PEM representation of the trusted CA's x509 certificate.
   *
   * @schema SqlInstanceSpecReplicaConfiguration#caCertificate
   */
  readonly caCertificate?: string;

  /**
   * Immutable. PEM representation of the replica's x509 certificate.
   *
   * @schema SqlInstanceSpecReplicaConfiguration#clientCertificate
   */
  readonly clientCertificate?: string;

  /**
   * Immutable. PEM representation of the replica's private key. The corresponding public key in encoded in the client_certificate.
   *
   * @schema SqlInstanceSpecReplicaConfiguration#clientKey
   */
  readonly clientKey?: string;

  /**
   * Immutable. The number of seconds between connect retries. MySQL's default is 60 seconds.
   *
   * @schema SqlInstanceSpecReplicaConfiguration#connectRetryInterval
   */
  readonly connectRetryInterval?: number;

  /**
   * Immutable. Path to a SQL file in Google Cloud Storage from which replica instances are created. Format is gs://bucket/filename.
   *
   * @schema SqlInstanceSpecReplicaConfiguration#dumpFilePath
   */
  readonly dumpFilePath?: string;

  /**
   * Immutable. Specifies if the replica is the failover target. If the field is set to true the replica will be designated as a failover replica. If the master instance fails, the replica instance will be promoted as the new master instance.
   *
   * @schema SqlInstanceSpecReplicaConfiguration#failoverTarget
   */
  readonly failoverTarget?: boolean;

  /**
   * Immutable. Time in ms between replication heartbeats.
   *
   * @schema SqlInstanceSpecReplicaConfiguration#masterHeartbeatPeriod
   */
  readonly masterHeartbeatPeriod?: number;

  /**
   * Immutable. Password for the replication connection.
   *
   * @schema SqlInstanceSpecReplicaConfiguration#password
   */
  readonly password?: SqlInstanceSpecReplicaConfigurationPassword;

  /**
   * Immutable. Permissible ciphers for use in SSL encryption.
   *
   * @schema SqlInstanceSpecReplicaConfiguration#sslCipher
   */
  readonly sslCipher?: string;

  /**
   * Immutable. Username for replication connection.
   *
   * @schema SqlInstanceSpecReplicaConfiguration#username
   */
  readonly username?: string;

  /**
   * Immutable. True if the master's common name value is checked during the SSL handshake.
   *
   * @schema SqlInstanceSpecReplicaConfiguration#verifyServerCertificate
   */
  readonly verifyServerCertificate?: boolean;

}

/**
 * Converts an object of type 'SqlInstanceSpecReplicaConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SqlInstanceSpecReplicaConfiguration(obj: SqlInstanceSpecReplicaConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'caCertificate': obj.caCertificate,
    'clientCertificate': obj.clientCertificate,
    'clientKey': obj.clientKey,
    'connectRetryInterval': obj.connectRetryInterval,
    'dumpFilePath': obj.dumpFilePath,
    'failoverTarget': obj.failoverTarget,
    'masterHeartbeatPeriod': obj.masterHeartbeatPeriod,
    'password': toJson_SqlInstanceSpecReplicaConfigurationPassword(obj.password),
    'sslCipher': obj.sslCipher,
    'username': obj.username,
    'verifyServerCertificate': obj.verifyServerCertificate,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Initial root password. Required for MS SQL Server.
 *
 * @schema SqlInstanceSpecRootPassword
 */
export interface SqlInstanceSpecRootPassword {
  /**
   * Value of the field. Cannot be used if 'valueFrom' is specified.
   *
   * @schema SqlInstanceSpecRootPassword#value
   */
  readonly value?: string;

  /**
   * Source for the field's value. Cannot be used if 'value' is specified.
   *
   * @schema SqlInstanceSpecRootPassword#valueFrom
   */
  readonly valueFrom?: SqlInstanceSpecRootPasswordValueFrom;

}

/**
 * Converts an object of type 'SqlInstanceSpecRootPassword' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SqlInstanceSpecRootPassword(obj: SqlInstanceSpecRootPassword | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'value': obj.value,
    'valueFrom': toJson_SqlInstanceSpecRootPasswordValueFrom(obj.valueFrom),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The settings to use for the database. The configuration is detailed below.
 *
 * @schema SqlInstanceSpecSettings
 */
export interface SqlInstanceSpecSettings {
  /**
   * This specifies when the instance should be active. Can be either ALWAYS, NEVER or ON_DEMAND.
   *
   * @schema SqlInstanceSpecSettings#activationPolicy
   */
  readonly activationPolicy?: string;

  /**
   * @schema SqlInstanceSpecSettings#activeDirectoryConfig
   */
  readonly activeDirectoryConfig?: SqlInstanceSpecSettingsActiveDirectoryConfig;

  /**
   * @schema SqlInstanceSpecSettings#advancedMachineFeatures
   */
  readonly advancedMachineFeatures?: SqlInstanceSpecSettingsAdvancedMachineFeatures;

  /**
   * DEPRECATED. This property is only applicable to First Generation instances, and First Generation instances are now deprecated. see https://cloud.google.com/sql/docs/mysql/deprecation-notice for information on how to upgrade to Second Generation instances.
   * Specifying this field has no-ops; it's recommended to remove this field from your configuration.
   *
   * @schema SqlInstanceSpecSettings#authorizedGaeApplications
   */
  readonly authorizedGaeApplications?: string[];

  /**
   * The availability type of the Cloud SQL instance, high availability
   * (REGIONAL) or single zone (ZONAL). For all instances, ensure that
   * settings.backup_configuration.enabled is set to true.
   * For MySQL instances, ensure that settings.backup_configuration.binary_log_enabled is set to true.
   * For Postgres instances, ensure that settings.backup_configuration.point_in_time_recovery_enabled
   * is set to true. Defaults to ZONAL.
   *
   * @default ZONAL.
   * @schema SqlInstanceSpecSettings#availabilityType
   */
  readonly availabilityType?: string;

  /**
   * @schema SqlInstanceSpecSettings#backupConfiguration
   */
  readonly backupConfiguration?: SqlInstanceSpecSettingsBackupConfiguration;

  /**
   * Immutable. The name of server instance collation.
   *
   * @schema SqlInstanceSpecSettings#collation
   */
  readonly collation?: string;

  /**
   * Specifies if connections must use Cloud SQL connectors.
   *
   * @schema SqlInstanceSpecSettings#connectorEnforcement
   */
  readonly connectorEnforcement?: string;

  /**
   * DEPRECATED. This property is only applicable to First Generation instances, and First Generation instances are now deprecated. see https://cloud.google.com/sql/docs/mysql/deprecation-notice for information on how to upgrade to Second Generation instances.
   * Specifying this field has no-ops; it's recommended to remove this field from your configuration.
   *
   * @schema SqlInstanceSpecSettings#crashSafeReplication
   */
  readonly crashSafeReplication?: boolean;

  /**
   * Data cache configurations.
   *
   * @schema SqlInstanceSpecSettings#dataCacheConfig
   */
  readonly dataCacheConfig?: SqlInstanceSpecSettingsDataCacheConfig;

  /**
   * @schema SqlInstanceSpecSettings#databaseFlags
   */
  readonly databaseFlags?: SqlInstanceSpecSettingsDatabaseFlags[];

  /**
   * Configuration to protect against accidental instance deletion.
   *
   * @schema SqlInstanceSpecSettings#deletionProtectionEnabled
   */
  readonly deletionProtectionEnabled?: boolean;

  /**
   * @schema SqlInstanceSpecSettings#denyMaintenancePeriod
   */
  readonly denyMaintenancePeriod?: SqlInstanceSpecSettingsDenyMaintenancePeriod;

  /**
   * Enables auto-resizing of the storage size. Defaults to true.
   *
   * @default true.
   * @schema SqlInstanceSpecSettings#diskAutoresize
   */
  readonly diskAutoresize?: boolean;

  /**
   * The maximum size, in GB, to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.
   *
   * @schema SqlInstanceSpecSettings#diskAutoresizeLimit
   */
  readonly diskAutoresizeLimit?: number;

  /**
   * The size of data disk, in GB. Size of a running instance cannot be reduced but can be increased. The minimum value is 10GB.
   *
   * @schema SqlInstanceSpecSettings#diskSize
   */
  readonly diskSize?: number;

  /**
   * Immutable. The type of data disk: PD_SSD or PD_HDD. Defaults to PD_SSD.
   *
   * @default PD_SSD.
   * @schema SqlInstanceSpecSettings#diskType
   */
  readonly diskType?: string;

  /**
   * The edition of the instance, can be ENTERPRISE or ENTERPRISE_PLUS.
   *
   * @schema SqlInstanceSpecSettings#edition
   */
  readonly edition?: string;

  /**
   * Configuration of Query Insights.
   *
   * @schema SqlInstanceSpecSettings#insightsConfig
   */
  readonly insightsConfig?: SqlInstanceSpecSettingsInsightsConfig;

  /**
   * @schema SqlInstanceSpecSettings#ipConfiguration
   */
  readonly ipConfiguration?: SqlInstanceSpecSettingsIpConfiguration;

  /**
   * @schema SqlInstanceSpecSettings#locationPreference
   */
  readonly locationPreference?: SqlInstanceSpecSettingsLocationPreference;

  /**
   * Declares a one-hour maintenance window when an Instance can automatically restart to apply updates. The maintenance window is specified in UTC time.
   *
   * @schema SqlInstanceSpecSettings#maintenanceWindow
   */
  readonly maintenanceWindow?: SqlInstanceSpecSettingsMaintenanceWindow;

  /**
   * @schema SqlInstanceSpecSettings#passwordValidationPolicy
   */
  readonly passwordValidationPolicy?: SqlInstanceSpecSettingsPasswordValidationPolicy;

  /**
   * Pricing plan for this instance, can only be PER_USE.
   *
   * @schema SqlInstanceSpecSettings#pricingPlan
   */
  readonly pricingPlan?: string;

  /**
   * DEPRECATED. This property is only applicable to First Generation instances, and First Generation instances are now deprecated. see https://cloud.google.com/sql/docs/mysql/deprecation-notice for information on how to upgrade to Second Generation instances.
   * Specifying this field has no-ops; it's recommended to remove this field from your configuration.
   *
   * @schema SqlInstanceSpecSettings#replicationType
   */
  readonly replicationType?: string;

  /**
   * @schema SqlInstanceSpecSettings#sqlServerAuditConfig
   */
  readonly sqlServerAuditConfig?: SqlInstanceSpecSettingsSqlServerAuditConfig;

  /**
   * The machine type to use. See tiers for more details and supported versions. Postgres supports only shared-core machine types, and custom machine types such as db-custom-2-13312. See the Custom Machine Type Documentation to learn about specifying custom machine types.
   *
   * @schema SqlInstanceSpecSettings#tier
   */
  readonly tier: string;

  /**
   * Immutable. The time_zone to be used by the database engine (supported only for SQL Server), in SQL Server timezone format.
   *
   * @schema SqlInstanceSpecSettings#timeZone
   */
  readonly timeZone?: string;

}

/**
 * Converts an object of type 'SqlInstanceSpecSettings' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SqlInstanceSpecSettings(obj: SqlInstanceSpecSettings | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'activationPolicy': obj.activationPolicy,
    'activeDirectoryConfig': toJson_SqlInstanceSpecSettingsActiveDirectoryConfig(obj.activeDirectoryConfig),
    'advancedMachineFeatures': toJson_SqlInstanceSpecSettingsAdvancedMachineFeatures(obj.advancedMachineFeatures),
    'authorizedGaeApplications': obj.authorizedGaeApplications?.map(y => y),
    'availabilityType': obj.availabilityType,
    'backupConfiguration': toJson_SqlInstanceSpecSettingsBackupConfiguration(obj.backupConfiguration),
    'collation': obj.collation,
    'connectorEnforcement': obj.connectorEnforcement,
    'crashSafeReplication': obj.crashSafeReplication,
    'dataCacheConfig': toJson_SqlInstanceSpecSettingsDataCacheConfig(obj.dataCacheConfig),
    'databaseFlags': obj.databaseFlags?.map(y => toJson_SqlInstanceSpecSettingsDatabaseFlags(y)),
    'deletionProtectionEnabled': obj.deletionProtectionEnabled,
    'denyMaintenancePeriod': toJson_SqlInstanceSpecSettingsDenyMaintenancePeriod(obj.denyMaintenancePeriod),
    'diskAutoresize': obj.diskAutoresize,
    'diskAutoresizeLimit': obj.diskAutoresizeLimit,
    'diskSize': obj.diskSize,
    'diskType': obj.diskType,
    'edition': obj.edition,
    'insightsConfig': toJson_SqlInstanceSpecSettingsInsightsConfig(obj.insightsConfig),
    'ipConfiguration': toJson_SqlInstanceSpecSettingsIpConfiguration(obj.ipConfiguration),
    'locationPreference': toJson_SqlInstanceSpecSettingsLocationPreference(obj.locationPreference),
    'maintenanceWindow': toJson_SqlInstanceSpecSettingsMaintenanceWindow(obj.maintenanceWindow),
    'passwordValidationPolicy': toJson_SqlInstanceSpecSettingsPasswordValidationPolicy(obj.passwordValidationPolicy),
    'pricingPlan': obj.pricingPlan,
    'replicationType': obj.replicationType,
    'sqlServerAuditConfig': toJson_SqlInstanceSpecSettingsSqlServerAuditConfig(obj.sqlServerAuditConfig),
    'tier': obj.tier,
    'timeZone': obj.timeZone,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Password for the replication connection.
 *
 * @schema SqlInstanceSpecReplicaConfigurationPassword
 */
export interface SqlInstanceSpecReplicaConfigurationPassword {
  /**
   * Value of the field. Cannot be used if 'valueFrom' is specified.
   *
   * @schema SqlInstanceSpecReplicaConfigurationPassword#value
   */
  readonly value?: string;

  /**
   * Source for the field's value. Cannot be used if 'value' is specified.
   *
   * @schema SqlInstanceSpecReplicaConfigurationPassword#valueFrom
   */
  readonly valueFrom?: SqlInstanceSpecReplicaConfigurationPasswordValueFrom;

}

/**
 * Converts an object of type 'SqlInstanceSpecReplicaConfigurationPassword' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SqlInstanceSpecReplicaConfigurationPassword(obj: SqlInstanceSpecReplicaConfigurationPassword | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'value': obj.value,
    'valueFrom': toJson_SqlInstanceSpecReplicaConfigurationPasswordValueFrom(obj.valueFrom),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Source for the field's value. Cannot be used if 'value' is specified.
 *
 * @schema SqlInstanceSpecRootPasswordValueFrom
 */
export interface SqlInstanceSpecRootPasswordValueFrom {
  /**
   * Reference to a value with the given key in the given Secret in the resource's namespace.
   *
   * @schema SqlInstanceSpecRootPasswordValueFrom#secretKeyRef
   */
  readonly secretKeyRef?: SqlInstanceSpecRootPasswordValueFromSecretKeyRef;

}

/**
 * Converts an object of type 'SqlInstanceSpecRootPasswordValueFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SqlInstanceSpecRootPasswordValueFrom(obj: SqlInstanceSpecRootPasswordValueFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'secretKeyRef': toJson_SqlInstanceSpecRootPasswordValueFromSecretKeyRef(obj.secretKeyRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema SqlInstanceSpecSettingsActiveDirectoryConfig
 */
export interface SqlInstanceSpecSettingsActiveDirectoryConfig {
  /**
   * Domain name of the Active Directory for SQL Server (e.g., mydomain.com).
   *
   * @schema SqlInstanceSpecSettingsActiveDirectoryConfig#domain
   */
  readonly domain: string;

}

/**
 * Converts an object of type 'SqlInstanceSpecSettingsActiveDirectoryConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SqlInstanceSpecSettingsActiveDirectoryConfig(obj: SqlInstanceSpecSettingsActiveDirectoryConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'domain': obj.domain,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema SqlInstanceSpecSettingsAdvancedMachineFeatures
 */
export interface SqlInstanceSpecSettingsAdvancedMachineFeatures {
  /**
   * The number of threads per physical core. Can be 1 or 2.
   *
   * @schema SqlInstanceSpecSettingsAdvancedMachineFeatures#threadsPerCore
   */
  readonly threadsPerCore?: number;

}

/**
 * Converts an object of type 'SqlInstanceSpecSettingsAdvancedMachineFeatures' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SqlInstanceSpecSettingsAdvancedMachineFeatures(obj: SqlInstanceSpecSettingsAdvancedMachineFeatures | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'threadsPerCore': obj.threadsPerCore,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema SqlInstanceSpecSettingsBackupConfiguration
 */
export interface SqlInstanceSpecSettingsBackupConfiguration {
  /**
   * @schema SqlInstanceSpecSettingsBackupConfiguration#backupRetentionSettings
   */
  readonly backupRetentionSettings?: SqlInstanceSpecSettingsBackupConfigurationBackupRetentionSettings;

  /**
   * True if binary logging is enabled. If settings.backup_configuration.enabled is false, this must be as well. Can only be used with MySQL.
   *
   * @schema SqlInstanceSpecSettingsBackupConfiguration#binaryLogEnabled
   */
  readonly binaryLogEnabled?: boolean;

  /**
   * True if backup configuration is enabled.
   *
   * @schema SqlInstanceSpecSettingsBackupConfiguration#enabled
   */
  readonly enabled?: boolean;

  /**
   * Location of the backup configuration.
   *
   * @schema SqlInstanceSpecSettingsBackupConfiguration#location
   */
  readonly location?: string;

  /**
   * True if Point-in-time recovery is enabled.
   *
   * @schema SqlInstanceSpecSettingsBackupConfiguration#pointInTimeRecoveryEnabled
   */
  readonly pointInTimeRecoveryEnabled?: boolean;

  /**
   * HH:MM format time indicating when backup configuration starts.
   *
   * @schema SqlInstanceSpecSettingsBackupConfiguration#startTime
   */
  readonly startTime?: string;

  /**
   * The number of days of transaction logs we retain for point in time restore, from 1-7.
   *
   * @schema SqlInstanceSpecSettingsBackupConfiguration#transactionLogRetentionDays
   */
  readonly transactionLogRetentionDays?: number;

}

/**
 * Converts an object of type 'SqlInstanceSpecSettingsBackupConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SqlInstanceSpecSettingsBackupConfiguration(obj: SqlInstanceSpecSettingsBackupConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'backupRetentionSettings': toJson_SqlInstanceSpecSettingsBackupConfigurationBackupRetentionSettings(obj.backupRetentionSettings),
    'binaryLogEnabled': obj.binaryLogEnabled,
    'enabled': obj.enabled,
    'location': obj.location,
    'pointInTimeRecoveryEnabled': obj.pointInTimeRecoveryEnabled,
    'startTime': obj.startTime,
    'transactionLogRetentionDays': obj.transactionLogRetentionDays,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Data cache configurations.
 *
 * @schema SqlInstanceSpecSettingsDataCacheConfig
 */
export interface SqlInstanceSpecSettingsDataCacheConfig {
  /**
   * Whether data cache is enabled for the instance.
   *
   * @schema SqlInstanceSpecSettingsDataCacheConfig#dataCacheEnabled
   */
  readonly dataCacheEnabled?: boolean;

}

/**
 * Converts an object of type 'SqlInstanceSpecSettingsDataCacheConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SqlInstanceSpecSettingsDataCacheConfig(obj: SqlInstanceSpecSettingsDataCacheConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'dataCacheEnabled': obj.dataCacheEnabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema SqlInstanceSpecSettingsDatabaseFlags
 */
export interface SqlInstanceSpecSettingsDatabaseFlags {
  /**
   * Name of the flag.
   *
   * @schema SqlInstanceSpecSettingsDatabaseFlags#name
   */
  readonly name: string;

  /**
   * Value of the flag.
   *
   * @schema SqlInstanceSpecSettingsDatabaseFlags#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'SqlInstanceSpecSettingsDatabaseFlags' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SqlInstanceSpecSettingsDatabaseFlags(obj: SqlInstanceSpecSettingsDatabaseFlags | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema SqlInstanceSpecSettingsDenyMaintenancePeriod
 */
export interface SqlInstanceSpecSettingsDenyMaintenancePeriod {
  /**
   * End date before which maintenance will not take place. The date is in format yyyy-mm-dd i.e., 2020-11-01, or mm-dd, i.e., 11-01.
   *
   * @schema SqlInstanceSpecSettingsDenyMaintenancePeriod#endDate
   */
  readonly endDate: string;

  /**
   * Start date after which maintenance will not take place. The date is in format yyyy-mm-dd i.e., 2020-11-01, or mm-dd, i.e., 11-01.
   *
   * @schema SqlInstanceSpecSettingsDenyMaintenancePeriod#startDate
   */
  readonly startDate: string;

  /**
   * Time in UTC when the "deny maintenance period" starts on start_date and ends on end_date. The time is in format: HH:mm:SS, i.e., 00:00:00.
   *
   * @schema SqlInstanceSpecSettingsDenyMaintenancePeriod#time
   */
  readonly time: string;

}

/**
 * Converts an object of type 'SqlInstanceSpecSettingsDenyMaintenancePeriod' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SqlInstanceSpecSettingsDenyMaintenancePeriod(obj: SqlInstanceSpecSettingsDenyMaintenancePeriod | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'endDate': obj.endDate,
    'startDate': obj.startDate,
    'time': obj.time,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration of Query Insights.
 *
 * @schema SqlInstanceSpecSettingsInsightsConfig
 */
export interface SqlInstanceSpecSettingsInsightsConfig {
  /**
   * True if Query Insights feature is enabled.
   *
   * @schema SqlInstanceSpecSettingsInsightsConfig#queryInsightsEnabled
   */
  readonly queryInsightsEnabled?: boolean;

  /**
   * Number of query execution plans captured by Insights per minute for all queries combined. Between 0 and 20. Default to 5.
   *
   * @default 5.
   * @schema SqlInstanceSpecSettingsInsightsConfig#queryPlansPerMinute
   */
  readonly queryPlansPerMinute?: number;

  /**
   * Maximum query length stored in bytes. Between 256 and 4500. Default to 1024.
   *
   * @default 1024.
   * @schema SqlInstanceSpecSettingsInsightsConfig#queryStringLength
   */
  readonly queryStringLength?: number;

  /**
   * True if Query Insights will record application tags from query when enabled.
   *
   * @schema SqlInstanceSpecSettingsInsightsConfig#recordApplicationTags
   */
  readonly recordApplicationTags?: boolean;

  /**
   * True if Query Insights will record client address when enabled.
   *
   * @schema SqlInstanceSpecSettingsInsightsConfig#recordClientAddress
   */
  readonly recordClientAddress?: boolean;

}

/**
 * Converts an object of type 'SqlInstanceSpecSettingsInsightsConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SqlInstanceSpecSettingsInsightsConfig(obj: SqlInstanceSpecSettingsInsightsConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'queryInsightsEnabled': obj.queryInsightsEnabled,
    'queryPlansPerMinute': obj.queryPlansPerMinute,
    'queryStringLength': obj.queryStringLength,
    'recordApplicationTags': obj.recordApplicationTags,
    'recordClientAddress': obj.recordClientAddress,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema SqlInstanceSpecSettingsIpConfiguration
 */
export interface SqlInstanceSpecSettingsIpConfiguration {
  /**
   * The name of the allocated ip range for the private ip CloudSQL instance. For example: "google-managed-services-default". If set, the instance ip will be created in the allocated range. The range name must comply with RFC 1035. Specifically, the name must be 1-63 characters long and match the regular expression [a-z]([-a-z0-9]*[a-z0-9])?.
   *
   * @schema SqlInstanceSpecSettingsIpConfiguration#allocatedIpRange
   */
  readonly allocatedIpRange?: string;

  /**
   * @schema SqlInstanceSpecSettingsIpConfiguration#authorizedNetworks
   */
  readonly authorizedNetworks?: SqlInstanceSpecSettingsIpConfigurationAuthorizedNetworks[];

  /**
   * Whether Google Cloud services such as BigQuery are allowed to access data in this Cloud SQL instance over a private IP connection. SQLSERVER database type is not supported.
   *
   * @schema SqlInstanceSpecSettingsIpConfiguration#enablePrivatePathForGoogleCloudServices
   */
  readonly enablePrivatePathForGoogleCloudServices?: boolean;

  /**
   * Whether this Cloud SQL instance should be assigned a public IPV4 address. At least ipv4_enabled must be enabled or a private_network must be configured.
   *
   * @schema SqlInstanceSpecSettingsIpConfiguration#ipv4Enabled
   */
  readonly ipv4Enabled?: boolean;

  /**
   * @schema SqlInstanceSpecSettingsIpConfiguration#privateNetworkRef
   */
  readonly privateNetworkRef?: SqlInstanceSpecSettingsIpConfigurationPrivateNetworkRef;

  /**
   * @schema SqlInstanceSpecSettingsIpConfiguration#requireSsl
   */
  readonly requireSsl?: boolean;

}

/**
 * Converts an object of type 'SqlInstanceSpecSettingsIpConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SqlInstanceSpecSettingsIpConfiguration(obj: SqlInstanceSpecSettingsIpConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'allocatedIpRange': obj.allocatedIpRange,
    'authorizedNetworks': obj.authorizedNetworks?.map(y => toJson_SqlInstanceSpecSettingsIpConfigurationAuthorizedNetworks(y)),
    'enablePrivatePathForGoogleCloudServices': obj.enablePrivatePathForGoogleCloudServices,
    'ipv4Enabled': obj.ipv4Enabled,
    'privateNetworkRef': toJson_SqlInstanceSpecSettingsIpConfigurationPrivateNetworkRef(obj.privateNetworkRef),
    'requireSsl': obj.requireSsl,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema SqlInstanceSpecSettingsLocationPreference
 */
export interface SqlInstanceSpecSettingsLocationPreference {
  /**
   * A Google App Engine application whose zone to remain in. Must be in the same region as this instance.
   *
   * @schema SqlInstanceSpecSettingsLocationPreference#followGaeApplication
   */
  readonly followGaeApplication?: string;

  /**
   * The preferred Compute Engine zone for the secondary/failover.
   *
   * @schema SqlInstanceSpecSettingsLocationPreference#secondaryZone
   */
  readonly secondaryZone?: string;

  /**
   * The preferred compute engine zone.
   *
   * @schema SqlInstanceSpecSettingsLocationPreference#zone
   */
  readonly zone?: string;

}

/**
 * Converts an object of type 'SqlInstanceSpecSettingsLocationPreference' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SqlInstanceSpecSettingsLocationPreference(obj: SqlInstanceSpecSettingsLocationPreference | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'followGaeApplication': obj.followGaeApplication,
    'secondaryZone': obj.secondaryZone,
    'zone': obj.zone,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Declares a one-hour maintenance window when an Instance can automatically restart to apply updates. The maintenance window is specified in UTC time.
 *
 * @schema SqlInstanceSpecSettingsMaintenanceWindow
 */
export interface SqlInstanceSpecSettingsMaintenanceWindow {
  /**
   * Day of week (1-7), starting on Monday.
   *
   * @schema SqlInstanceSpecSettingsMaintenanceWindow#day
   */
  readonly day?: number;

  /**
   * Hour of day (0-23), ignored if day not set.
   *
   * @schema SqlInstanceSpecSettingsMaintenanceWindow#hour
   */
  readonly hour?: number;

  /**
   * Receive updates earlier (canary) or later (stable).
   *
   * @schema SqlInstanceSpecSettingsMaintenanceWindow#updateTrack
   */
  readonly updateTrack?: string;

}

/**
 * Converts an object of type 'SqlInstanceSpecSettingsMaintenanceWindow' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SqlInstanceSpecSettingsMaintenanceWindow(obj: SqlInstanceSpecSettingsMaintenanceWindow | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'day': obj.day,
    'hour': obj.hour,
    'updateTrack': obj.updateTrack,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema SqlInstanceSpecSettingsPasswordValidationPolicy
 */
export interface SqlInstanceSpecSettingsPasswordValidationPolicy {
  /**
   * Password complexity.
   *
   * @schema SqlInstanceSpecSettingsPasswordValidationPolicy#complexity
   */
  readonly complexity?: string;

  /**
   * Disallow username as a part of the password.
   *
   * @schema SqlInstanceSpecSettingsPasswordValidationPolicy#disallowUsernameSubstring
   */
  readonly disallowUsernameSubstring?: boolean;

  /**
   * Whether the password policy is enabled or not.
   *
   * @schema SqlInstanceSpecSettingsPasswordValidationPolicy#enablePasswordPolicy
   */
  readonly enablePasswordPolicy: boolean;

  /**
   * Minimum number of characters allowed.
   *
   * @schema SqlInstanceSpecSettingsPasswordValidationPolicy#minLength
   */
  readonly minLength?: number;

  /**
   * Minimum interval after which the password can be changed. This flag is only supported for PostgresSQL.
   *
   * @schema SqlInstanceSpecSettingsPasswordValidationPolicy#passwordChangeInterval
   */
  readonly passwordChangeInterval?: string;

  /**
   * Number of previous passwords that cannot be reused.
   *
   * @schema SqlInstanceSpecSettingsPasswordValidationPolicy#reuseInterval
   */
  readonly reuseInterval?: number;

}

/**
 * Converts an object of type 'SqlInstanceSpecSettingsPasswordValidationPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SqlInstanceSpecSettingsPasswordValidationPolicy(obj: SqlInstanceSpecSettingsPasswordValidationPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'complexity': obj.complexity,
    'disallowUsernameSubstring': obj.disallowUsernameSubstring,
    'enablePasswordPolicy': obj.enablePasswordPolicy,
    'minLength': obj.minLength,
    'passwordChangeInterval': obj.passwordChangeInterval,
    'reuseInterval': obj.reuseInterval,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema SqlInstanceSpecSettingsSqlServerAuditConfig
 */
export interface SqlInstanceSpecSettingsSqlServerAuditConfig {
  /**
   * The name of the destination bucket (e.g., gs://mybucket).
   *
   * @schema SqlInstanceSpecSettingsSqlServerAuditConfig#bucketRef
   */
  readonly bucketRef?: SqlInstanceSpecSettingsSqlServerAuditConfigBucketRef;

  /**
   * How long to keep generated audit files. A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s"..
   *
   * @schema SqlInstanceSpecSettingsSqlServerAuditConfig#retentionInterval
   */
  readonly retentionInterval?: string;

  /**
   * How often to upload generated audit files. A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
   *
   * @schema SqlInstanceSpecSettingsSqlServerAuditConfig#uploadInterval
   */
  readonly uploadInterval?: string;

}

/**
 * Converts an object of type 'SqlInstanceSpecSettingsSqlServerAuditConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SqlInstanceSpecSettingsSqlServerAuditConfig(obj: SqlInstanceSpecSettingsSqlServerAuditConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bucketRef': toJson_SqlInstanceSpecSettingsSqlServerAuditConfigBucketRef(obj.bucketRef),
    'retentionInterval': obj.retentionInterval,
    'uploadInterval': obj.uploadInterval,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Source for the field's value. Cannot be used if 'value' is specified.
 *
 * @schema SqlInstanceSpecReplicaConfigurationPasswordValueFrom
 */
export interface SqlInstanceSpecReplicaConfigurationPasswordValueFrom {
  /**
   * Reference to a value with the given key in the given Secret in the resource's namespace.
   *
   * @schema SqlInstanceSpecReplicaConfigurationPasswordValueFrom#secretKeyRef
   */
  readonly secretKeyRef?: SqlInstanceSpecReplicaConfigurationPasswordValueFromSecretKeyRef;

}

/**
 * Converts an object of type 'SqlInstanceSpecReplicaConfigurationPasswordValueFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SqlInstanceSpecReplicaConfigurationPasswordValueFrom(obj: SqlInstanceSpecReplicaConfigurationPasswordValueFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'secretKeyRef': toJson_SqlInstanceSpecReplicaConfigurationPasswordValueFromSecretKeyRef(obj.secretKeyRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to a value with the given key in the given Secret in the resource's namespace.
 *
 * @schema SqlInstanceSpecRootPasswordValueFromSecretKeyRef
 */
export interface SqlInstanceSpecRootPasswordValueFromSecretKeyRef {
  /**
   * Key that identifies the value to be extracted.
   *
   * @schema SqlInstanceSpecRootPasswordValueFromSecretKeyRef#key
   */
  readonly key: string;

  /**
   * Name of the Secret to extract a value from.
   *
   * @schema SqlInstanceSpecRootPasswordValueFromSecretKeyRef#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'SqlInstanceSpecRootPasswordValueFromSecretKeyRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SqlInstanceSpecRootPasswordValueFromSecretKeyRef(obj: SqlInstanceSpecRootPasswordValueFromSecretKeyRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema SqlInstanceSpecSettingsBackupConfigurationBackupRetentionSettings
 */
export interface SqlInstanceSpecSettingsBackupConfigurationBackupRetentionSettings {
  /**
   * Number of backups to retain.
   *
   * @schema SqlInstanceSpecSettingsBackupConfigurationBackupRetentionSettings#retainedBackups
   */
  readonly retainedBackups: number;

  /**
   * The unit that 'retainedBackups' represents. Defaults to COUNT.
   *
   * @default COUNT.
   * @schema SqlInstanceSpecSettingsBackupConfigurationBackupRetentionSettings#retentionUnit
   */
  readonly retentionUnit?: string;

}

/**
 * Converts an object of type 'SqlInstanceSpecSettingsBackupConfigurationBackupRetentionSettings' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SqlInstanceSpecSettingsBackupConfigurationBackupRetentionSettings(obj: SqlInstanceSpecSettingsBackupConfigurationBackupRetentionSettings | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'retainedBackups': obj.retainedBackups,
    'retentionUnit': obj.retentionUnit,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema SqlInstanceSpecSettingsIpConfigurationAuthorizedNetworks
 */
export interface SqlInstanceSpecSettingsIpConfigurationAuthorizedNetworks {
  /**
   * @schema SqlInstanceSpecSettingsIpConfigurationAuthorizedNetworks#expirationTime
   */
  readonly expirationTime?: string;

  /**
   * @schema SqlInstanceSpecSettingsIpConfigurationAuthorizedNetworks#name
   */
  readonly name?: string;

  /**
   * @schema SqlInstanceSpecSettingsIpConfigurationAuthorizedNetworks#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'SqlInstanceSpecSettingsIpConfigurationAuthorizedNetworks' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SqlInstanceSpecSettingsIpConfigurationAuthorizedNetworks(obj: SqlInstanceSpecSettingsIpConfigurationAuthorizedNetworks | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'expirationTime': obj.expirationTime,
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema SqlInstanceSpecSettingsIpConfigurationPrivateNetworkRef
 */
export interface SqlInstanceSpecSettingsIpConfigurationPrivateNetworkRef {
  /**
   * Allowed value: The `selfLink` field of a `ComputeNetwork` resource.
   *
   * @schema SqlInstanceSpecSettingsIpConfigurationPrivateNetworkRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema SqlInstanceSpecSettingsIpConfigurationPrivateNetworkRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema SqlInstanceSpecSettingsIpConfigurationPrivateNetworkRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'SqlInstanceSpecSettingsIpConfigurationPrivateNetworkRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SqlInstanceSpecSettingsIpConfigurationPrivateNetworkRef(obj: SqlInstanceSpecSettingsIpConfigurationPrivateNetworkRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The name of the destination bucket (e.g., gs://mybucket).
 *
 * @schema SqlInstanceSpecSettingsSqlServerAuditConfigBucketRef
 */
export interface SqlInstanceSpecSettingsSqlServerAuditConfigBucketRef {
  /**
   * Allowed value: The `url` field of a `StorageBucket` resource.
   *
   * @schema SqlInstanceSpecSettingsSqlServerAuditConfigBucketRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema SqlInstanceSpecSettingsSqlServerAuditConfigBucketRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema SqlInstanceSpecSettingsSqlServerAuditConfigBucketRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'SqlInstanceSpecSettingsSqlServerAuditConfigBucketRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SqlInstanceSpecSettingsSqlServerAuditConfigBucketRef(obj: SqlInstanceSpecSettingsSqlServerAuditConfigBucketRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to a value with the given key in the given Secret in the resource's namespace.
 *
 * @schema SqlInstanceSpecReplicaConfigurationPasswordValueFromSecretKeyRef
 */
export interface SqlInstanceSpecReplicaConfigurationPasswordValueFromSecretKeyRef {
  /**
   * Key that identifies the value to be extracted.
   *
   * @schema SqlInstanceSpecReplicaConfigurationPasswordValueFromSecretKeyRef#key
   */
  readonly key: string;

  /**
   * Name of the Secret to extract a value from.
   *
   * @schema SqlInstanceSpecReplicaConfigurationPasswordValueFromSecretKeyRef#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'SqlInstanceSpecReplicaConfigurationPasswordValueFromSecretKeyRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SqlInstanceSpecReplicaConfigurationPasswordValueFromSecretKeyRef(obj: SqlInstanceSpecReplicaConfigurationPasswordValueFromSecretKeyRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema SQLSSLCert
 */
export class SqlsslCert extends ApiObject {
  /**
   * Returns the apiVersion and kind for "SQLSSLCert"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'sql.cnrm.cloud.google.com/v1beta1',
    kind: 'SQLSSLCert',
  }

  /**
   * Renders a Kubernetes manifest for "SQLSSLCert".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: SqlsslCertProps): any {
    return {
      ...SqlsslCert.GVK,
      ...toJson_SqlsslCertProps(props),
    };
  }

  /**
   * Defines a "SQLSSLCert" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: SqlsslCertProps) {
    super(scope, id, {
      ...SqlsslCert.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...SqlsslCert.GVK,
      ...toJson_SqlsslCertProps(resolved),
    };
  }
}

/**
 * @schema SQLSSLCert
 */
export interface SqlsslCertProps {
  /**
   * @schema SQLSSLCert#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema SQLSSLCert#spec
   */
  readonly spec: SqlsslCertSpec;

}

/**
 * Converts an object of type 'SqlsslCertProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SqlsslCertProps(obj: SqlsslCertProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_SqlsslCertSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema SqlsslCertSpec
 */
export interface SqlsslCertSpec {
  /**
   * Immutable. The common name to be used in the certificate to identify the client. Constrained to [a-zA-Z.-_ ]+. Changing this forces a new resource to be created.
   *
   * @schema SqlsslCertSpec#commonName
   */
  readonly commonName: string;

  /**
   * The Cloud SQL instance.
   *
   * @schema SqlsslCertSpec#instanceRef
   */
  readonly instanceRef: SqlsslCertSpecInstanceRef;

  /**
   * Immutable. Optional. The service-generated sha1Fingerprint of the resource. Used for acquisition only. Leave unset to create a new resource.
   *
   * @schema SqlsslCertSpec#resourceID
   */
  readonly resourceId?: string;

}

/**
 * Converts an object of type 'SqlsslCertSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SqlsslCertSpec(obj: SqlsslCertSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'commonName': obj.commonName,
    'instanceRef': toJson_SqlsslCertSpecInstanceRef(obj.instanceRef),
    'resourceID': obj.resourceId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The Cloud SQL instance.
 *
 * @schema SqlsslCertSpecInstanceRef
 */
export interface SqlsslCertSpecInstanceRef {
  /**
   * Allowed value: The `name` field of a `SQLInstance` resource.
   *
   * @schema SqlsslCertSpecInstanceRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema SqlsslCertSpecInstanceRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema SqlsslCertSpecInstanceRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'SqlsslCertSpecInstanceRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SqlsslCertSpecInstanceRef(obj: SqlsslCertSpecInstanceRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema SQLUser
 */
export class SqlUser extends ApiObject {
  /**
   * Returns the apiVersion and kind for "SQLUser"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'sql.cnrm.cloud.google.com/v1beta1',
    kind: 'SQLUser',
  }

  /**
   * Renders a Kubernetes manifest for "SQLUser".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: SqlUserProps): any {
    return {
      ...SqlUser.GVK,
      ...toJson_SqlUserProps(props),
    };
  }

  /**
   * Defines a "SQLUser" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: SqlUserProps) {
    super(scope, id, {
      ...SqlUser.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...SqlUser.GVK,
      ...toJson_SqlUserProps(resolved),
    };
  }
}

/**
 * @schema SQLUser
 */
export interface SqlUserProps {
  /**
   * @schema SQLUser#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema SQLUser#spec
   */
  readonly spec: SqlUserSpec;

}

/**
 * Converts an object of type 'SqlUserProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SqlUserProps(obj: SqlUserProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_SqlUserSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema SqlUserSpec
 */
export interface SqlUserSpec {
  /**
   * Immutable. The host the user can connect from. This is only supported for MySQL instances. Don't set this field for PostgreSQL instances. Can be an IP address. Changing this forces a new resource to be created.
   *
   * @schema SqlUserSpec#host
   */
  readonly host?: string;

  /**
   * @schema SqlUserSpec#instanceRef
   */
  readonly instanceRef: SqlUserSpecInstanceRef;

  /**
   * The password for the user. Can be updated. For Postgres instances this is a Required field, unless type is set to
   * either CLOUD_IAM_USER or CLOUD_IAM_SERVICE_ACCOUNT.
   *
   * @schema SqlUserSpec#password
   */
  readonly password?: SqlUserSpecPassword;

  /**
   * @schema SqlUserSpec#passwordPolicy
   */
  readonly passwordPolicy?: SqlUserSpecPasswordPolicy;

  /**
   * Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
   *
   * @schema SqlUserSpec#resourceID
   */
  readonly resourceId?: string;

  /**
   * Immutable. The user type. It determines the method to authenticate the user during login.
   * The default is the database's built-in user type. Flags include "BUILT_IN", "CLOUD_IAM_USER", or "CLOUD_IAM_SERVICE_ACCOUNT".
   *
   * @schema SqlUserSpec#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'SqlUserSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SqlUserSpec(obj: SqlUserSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'instanceRef': toJson_SqlUserSpecInstanceRef(obj.instanceRef),
    'password': toJson_SqlUserSpecPassword(obj.password),
    'passwordPolicy': toJson_SqlUserSpecPasswordPolicy(obj.passwordPolicy),
    'resourceID': obj.resourceId,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema SqlUserSpecInstanceRef
 */
export interface SqlUserSpecInstanceRef {
  /**
   * Allowed value: The `name` field of a `SQLInstance` resource.
   *
   * @schema SqlUserSpecInstanceRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema SqlUserSpecInstanceRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema SqlUserSpecInstanceRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'SqlUserSpecInstanceRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SqlUserSpecInstanceRef(obj: SqlUserSpecInstanceRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The password for the user. Can be updated. For Postgres instances this is a Required field, unless type is set to
 * either CLOUD_IAM_USER or CLOUD_IAM_SERVICE_ACCOUNT.
 *
 * @schema SqlUserSpecPassword
 */
export interface SqlUserSpecPassword {
  /**
   * Value of the field. Cannot be used if 'valueFrom' is specified.
   *
   * @schema SqlUserSpecPassword#value
   */
  readonly value?: string;

  /**
   * Source for the field's value. Cannot be used if 'value' is specified.
   *
   * @schema SqlUserSpecPassword#valueFrom
   */
  readonly valueFrom?: SqlUserSpecPasswordValueFrom;

}

/**
 * Converts an object of type 'SqlUserSpecPassword' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SqlUserSpecPassword(obj: SqlUserSpecPassword | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'value': obj.value,
    'valueFrom': toJson_SqlUserSpecPasswordValueFrom(obj.valueFrom),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema SqlUserSpecPasswordPolicy
 */
export interface SqlUserSpecPasswordPolicy {
  /**
   * Number of failed attempts allowed before the user get locked.
   *
   * @schema SqlUserSpecPasswordPolicy#allowedFailedAttempts
   */
  readonly allowedFailedAttempts?: number;

  /**
   * If true, the check that will lock user after too many failed login attempts will be enabled.
   *
   * @schema SqlUserSpecPasswordPolicy#enableFailedAttemptsCheck
   */
  readonly enableFailedAttemptsCheck?: boolean;

  /**
   * If true, the user must specify the current password before changing the password. This flag is supported only for MySQL.
   *
   * @schema SqlUserSpecPasswordPolicy#enablePasswordVerification
   */
  readonly enablePasswordVerification?: boolean;

  /**
   * Password expiration duration with one week grace period.
   *
   * @schema SqlUserSpecPasswordPolicy#passwordExpirationDuration
   */
  readonly passwordExpirationDuration?: string;

  /**
   * @schema SqlUserSpecPasswordPolicy#status
   */
  readonly status?: SqlUserSpecPasswordPolicyStatus[];

}

/**
 * Converts an object of type 'SqlUserSpecPasswordPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SqlUserSpecPasswordPolicy(obj: SqlUserSpecPasswordPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'allowedFailedAttempts': obj.allowedFailedAttempts,
    'enableFailedAttemptsCheck': obj.enableFailedAttemptsCheck,
    'enablePasswordVerification': obj.enablePasswordVerification,
    'passwordExpirationDuration': obj.passwordExpirationDuration,
    'status': obj.status?.map(y => toJson_SqlUserSpecPasswordPolicyStatus(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Source for the field's value. Cannot be used if 'value' is specified.
 *
 * @schema SqlUserSpecPasswordValueFrom
 */
export interface SqlUserSpecPasswordValueFrom {
  /**
   * Reference to a value with the given key in the given Secret in the resource's namespace.
   *
   * @schema SqlUserSpecPasswordValueFrom#secretKeyRef
   */
  readonly secretKeyRef?: SqlUserSpecPasswordValueFromSecretKeyRef;

}

/**
 * Converts an object of type 'SqlUserSpecPasswordValueFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SqlUserSpecPasswordValueFrom(obj: SqlUserSpecPasswordValueFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'secretKeyRef': toJson_SqlUserSpecPasswordValueFromSecretKeyRef(obj.secretKeyRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema SqlUserSpecPasswordPolicyStatus
 */
export interface SqlUserSpecPasswordPolicyStatus {
  /**
   * If true, user does not have login privileges.
   *
   * @schema SqlUserSpecPasswordPolicyStatus#locked
   */
  readonly locked?: boolean;

  /**
   * Password expiration duration with one week grace period.
   *
   * @schema SqlUserSpecPasswordPolicyStatus#passwordExpirationTime
   */
  readonly passwordExpirationTime?: string;

}

/**
 * Converts an object of type 'SqlUserSpecPasswordPolicyStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SqlUserSpecPasswordPolicyStatus(obj: SqlUserSpecPasswordPolicyStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'locked': obj.locked,
    'passwordExpirationTime': obj.passwordExpirationTime,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to a value with the given key in the given Secret in the resource's namespace.
 *
 * @schema SqlUserSpecPasswordValueFromSecretKeyRef
 */
export interface SqlUserSpecPasswordValueFromSecretKeyRef {
  /**
   * Key that identifies the value to be extracted.
   *
   * @schema SqlUserSpecPasswordValueFromSecretKeyRef#key
   */
  readonly key: string;

  /**
   * Name of the Secret to extract a value from.
   *
   * @schema SqlUserSpecPasswordValueFromSecretKeyRef#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'SqlUserSpecPasswordValueFromSecretKeyRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SqlUserSpecPasswordValueFromSecretKeyRef(obj: SqlUserSpecPasswordValueFromSecretKeyRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

