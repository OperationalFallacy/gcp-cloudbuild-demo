// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 *
 *
 * @schema FirestoreIndex
 */
export class FirestoreIndex extends ApiObject {
  /**
   * Returns the apiVersion and kind for "FirestoreIndex"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'firestore.cnrm.cloud.google.com/v1beta1',
    kind: 'FirestoreIndex',
  }

  /**
   * Renders a Kubernetes manifest for "FirestoreIndex".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: FirestoreIndexProps): any {
    return {
      ...FirestoreIndex.GVK,
      ...toJson_FirestoreIndexProps(props),
    };
  }

  /**
   * Defines a "FirestoreIndex" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: FirestoreIndexProps) {
    super(scope, id, {
      ...FirestoreIndex.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...FirestoreIndex.GVK,
      ...toJson_FirestoreIndexProps(resolved),
    };
  }
}

/**
 * @schema FirestoreIndex
 */
export interface FirestoreIndexProps {
  /**
   * @schema FirestoreIndex#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema FirestoreIndex#spec
   */
  readonly spec: FirestoreIndexSpec;

}

/**
 * Converts an object of type 'FirestoreIndexProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_FirestoreIndexProps(obj: FirestoreIndexProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_FirestoreIndexSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema FirestoreIndexSpec
 */
export interface FirestoreIndexSpec {
  /**
   * Immutable. The collection being indexed.
   *
   * @schema FirestoreIndexSpec#collection
   */
  readonly collection: string;

  /**
   * Immutable. The Firestore database id. Defaults to '"(default)"'.
   *
   * @default default)"'.
   * @schema FirestoreIndexSpec#database
   */
  readonly database?: string;

  /**
   * Immutable. The fields supported by this index. The last field entry is always for
   * the field path '__name__'. If, on creation, '__name__' was not
   * specified as the last field, it will be added automatically with the
   * same direction as that of the last field defined. If the final field
   * in a composite index is not directional, the '__name__' will be
   * ordered '"ASCENDING"' (unless explicitly specified otherwise).
   *
   * @schema FirestoreIndexSpec#fields
   */
  readonly fields: FirestoreIndexSpecFields[];

  /**
   * Immutable. The scope at which a query is run. Default value: "COLLECTION" Possible values: ["COLLECTION", "COLLECTION_GROUP"].
   *
   * @schema FirestoreIndexSpec#queryScope
   */
  readonly queryScope?: string;

}

/**
 * Converts an object of type 'FirestoreIndexSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_FirestoreIndexSpec(obj: FirestoreIndexSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'collection': obj.collection,
    'database': obj.database,
    'fields': obj.fields?.map(y => toJson_FirestoreIndexSpecFields(y)),
    'queryScope': obj.queryScope,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema FirestoreIndexSpecFields
 */
export interface FirestoreIndexSpecFields {
  /**
   * Immutable. Indicates that this field supports operations on arrayValues. Only one of 'order' and 'arrayConfig' can
   * be specified. Possible values: ["CONTAINS"].
   *
   * @schema FirestoreIndexSpecFields#arrayConfig
   */
  readonly arrayConfig?: string;

  /**
   * Immutable. Name of the field.
   *
   * @schema FirestoreIndexSpecFields#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * Immutable. Indicates that this field supports ordering by the specified order or comparing using =, <, <=, >, >=.
   * Only one of 'order' and 'arrayConfig' can be specified. Possible values: ["ASCENDING", "DESCENDING"].
   *
   * @schema FirestoreIndexSpecFields#order
   */
  readonly order?: string;

}

/**
 * Converts an object of type 'FirestoreIndexSpecFields' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_FirestoreIndexSpecFields(obj: FirestoreIndexSpecFields | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'arrayConfig': obj.arrayConfig,
    'fieldPath': obj.fieldPath,
    'order': obj.order,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

