// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 *
 *
 * @schema LoggingLogBucket
 */
export class LoggingLogBucket extends ApiObject {
  /**
   * Returns the apiVersion and kind for "LoggingLogBucket"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'logging.cnrm.cloud.google.com/v1beta1',
    kind: 'LoggingLogBucket',
  }

  /**
   * Renders a Kubernetes manifest for "LoggingLogBucket".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: LoggingLogBucketProps): any {
    return {
      ...LoggingLogBucket.GVK,
      ...toJson_LoggingLogBucketProps(props),
    };
  }

  /**
   * Defines a "LoggingLogBucket" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: LoggingLogBucketProps) {
    super(scope, id, {
      ...LoggingLogBucket.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...LoggingLogBucket.GVK,
      ...toJson_LoggingLogBucketProps(resolved),
    };
  }
}

/**
 * @schema LoggingLogBucket
 */
export interface LoggingLogBucketProps {
  /**
   * @schema LoggingLogBucket#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema LoggingLogBucket#spec
   */
  readonly spec: LoggingLogBucketSpec;

}

/**
 * Converts an object of type 'LoggingLogBucketProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LoggingLogBucketProps(obj: LoggingLogBucketProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_LoggingLogBucketSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema LoggingLogBucketSpec
 */
export interface LoggingLogBucketSpec {
  /**
   * Immutable. The BillingAccount that this resource belongs to. Only one of [billingAccountRef, folderRef, organizationRef, projectRef] may be specified.
   *
   * @schema LoggingLogBucketSpec#billingAccountRef
   */
  readonly billingAccountRef?: LoggingLogBucketSpecBillingAccountRef;

  /**
   * Describes this bucket.
   *
   * @schema LoggingLogBucketSpec#description
   */
  readonly description?: string;

  /**
   * Immutable. The Folder that this resource belongs to. Only one of [billingAccountRef, folderRef, organizationRef, projectRef] may be specified.
   *
   * @schema LoggingLogBucketSpec#folderRef
   */
  readonly folderRef?: LoggingLogBucketSpecFolderRef;

  /**
   * Immutable. The location of the resource. The supported locations are: global, us-central1, us-east1, us-west1, asia-east1, europe-west1.
   *
   * @schema LoggingLogBucketSpec#location
   */
  readonly location: string;

  /**
   * Whether the bucket has been locked. The retention period on a locked bucket may not be changed. Locked buckets may only be deleted if they are empty.
   *
   * @schema LoggingLogBucketSpec#locked
   */
  readonly locked?: boolean;

  /**
   * Immutable. The Organization that this resource belongs to. Only one of [billingAccountRef, folderRef, organizationRef, projectRef] may be specified.
   *
   * @schema LoggingLogBucketSpec#organizationRef
   */
  readonly organizationRef?: LoggingLogBucketSpecOrganizationRef;

  /**
   * Immutable. The Project that this resource belongs to. Only one of [billingAccountRef, folderRef, organizationRef, projectRef] may be specified.
   *
   * @schema LoggingLogBucketSpec#projectRef
   */
  readonly projectRef?: LoggingLogBucketSpecProjectRef;

  /**
   * Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
   *
   * @schema LoggingLogBucketSpec#resourceID
   */
  readonly resourceId?: string;

  /**
   * Logs will be retained by default for this amount of time, after which they will automatically be deleted. The minimum retention period is 1 day. If this value is set to zero at bucket creation time, the default time of 30 days will be used.
   *
   * @schema LoggingLogBucketSpec#retentionDays
   */
  readonly retentionDays?: number;

}

/**
 * Converts an object of type 'LoggingLogBucketSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LoggingLogBucketSpec(obj: LoggingLogBucketSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'billingAccountRef': toJson_LoggingLogBucketSpecBillingAccountRef(obj.billingAccountRef),
    'description': obj.description,
    'folderRef': toJson_LoggingLogBucketSpecFolderRef(obj.folderRef),
    'location': obj.location,
    'locked': obj.locked,
    'organizationRef': toJson_LoggingLogBucketSpecOrganizationRef(obj.organizationRef),
    'projectRef': toJson_LoggingLogBucketSpecProjectRef(obj.projectRef),
    'resourceID': obj.resourceId,
    'retentionDays': obj.retentionDays,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. The BillingAccount that this resource belongs to. Only one of [billingAccountRef, folderRef, organizationRef, projectRef] may be specified.
 *
 * @schema LoggingLogBucketSpecBillingAccountRef
 */
export interface LoggingLogBucketSpecBillingAccountRef {
  /**
   * Allowed value: The Google Cloud resource name of a Google Cloud Billing Account (format: `billingAccounts/{{name}}`).
   *
   * @schema LoggingLogBucketSpecBillingAccountRef#external
   */
  readonly external?: string;

  /**
   * [WARNING] BillingAccount not yet supported in Config Connector, use 'external' field to reference existing resources.
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema LoggingLogBucketSpecBillingAccountRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema LoggingLogBucketSpecBillingAccountRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'LoggingLogBucketSpecBillingAccountRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LoggingLogBucketSpecBillingAccountRef(obj: LoggingLogBucketSpecBillingAccountRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. The Folder that this resource belongs to. Only one of [billingAccountRef, folderRef, organizationRef, projectRef] may be specified.
 *
 * @schema LoggingLogBucketSpecFolderRef
 */
export interface LoggingLogBucketSpecFolderRef {
  /**
   * Allowed value: The Google Cloud resource name of a `Folder` resource (format: `folders/{{name}}`).
   *
   * @schema LoggingLogBucketSpecFolderRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema LoggingLogBucketSpecFolderRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema LoggingLogBucketSpecFolderRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'LoggingLogBucketSpecFolderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LoggingLogBucketSpecFolderRef(obj: LoggingLogBucketSpecFolderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. The Organization that this resource belongs to. Only one of [billingAccountRef, folderRef, organizationRef, projectRef] may be specified.
 *
 * @schema LoggingLogBucketSpecOrganizationRef
 */
export interface LoggingLogBucketSpecOrganizationRef {
  /**
   * Allowed value: The Google Cloud resource name of a Google Cloud Organization (format: `organizations/{{name}}`).
   *
   * @schema LoggingLogBucketSpecOrganizationRef#external
   */
  readonly external?: string;

  /**
   * [WARNING] Organization not yet supported in Config Connector, use 'external' field to reference existing resources.
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema LoggingLogBucketSpecOrganizationRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema LoggingLogBucketSpecOrganizationRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'LoggingLogBucketSpecOrganizationRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LoggingLogBucketSpecOrganizationRef(obj: LoggingLogBucketSpecOrganizationRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. The Project that this resource belongs to. Only one of [billingAccountRef, folderRef, organizationRef, projectRef] may be specified.
 *
 * @schema LoggingLogBucketSpecProjectRef
 */
export interface LoggingLogBucketSpecProjectRef {
  /**
   * Allowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).
   *
   * @schema LoggingLogBucketSpecProjectRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema LoggingLogBucketSpecProjectRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema LoggingLogBucketSpecProjectRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'LoggingLogBucketSpecProjectRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LoggingLogBucketSpecProjectRef(obj: LoggingLogBucketSpecProjectRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema LoggingLogExclusion
 */
export class LoggingLogExclusion extends ApiObject {
  /**
   * Returns the apiVersion and kind for "LoggingLogExclusion"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'logging.cnrm.cloud.google.com/v1beta1',
    kind: 'LoggingLogExclusion',
  }

  /**
   * Renders a Kubernetes manifest for "LoggingLogExclusion".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: LoggingLogExclusionProps): any {
    return {
      ...LoggingLogExclusion.GVK,
      ...toJson_LoggingLogExclusionProps(props),
    };
  }

  /**
   * Defines a "LoggingLogExclusion" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: LoggingLogExclusionProps) {
    super(scope, id, {
      ...LoggingLogExclusion.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...LoggingLogExclusion.GVK,
      ...toJson_LoggingLogExclusionProps(resolved),
    };
  }
}

/**
 * @schema LoggingLogExclusion
 */
export interface LoggingLogExclusionProps {
  /**
   * @schema LoggingLogExclusion#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema LoggingLogExclusion#spec
   */
  readonly spec: LoggingLogExclusionSpec;

}

/**
 * Converts an object of type 'LoggingLogExclusionProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LoggingLogExclusionProps(obj: LoggingLogExclusionProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_LoggingLogExclusionSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema LoggingLogExclusionSpec
 */
export interface LoggingLogExclusionSpec {
  /**
   * Immutable. The BillingAccount that this resource belongs to. Only one of [projectRef, folderRef, organizationRef, billingAccountRef] may be specified.
   *
   * @schema LoggingLogExclusionSpec#billingAccountRef
   */
  readonly billingAccountRef?: LoggingLogExclusionSpecBillingAccountRef;

  /**
   * Optional. A description of this exclusion.
   *
   * @schema LoggingLogExclusionSpec#description
   */
  readonly description?: string;

  /**
   * Optional. If set to True, then this exclusion is disabled and it does not exclude any log entries. You can update an exclusion to change the value of this field.
   *
   * @schema LoggingLogExclusionSpec#disabled
   */
  readonly disabled?: boolean;

  /**
   * Required. An (https://cloud.google.com/logging/docs/view/advanced-queries#sample), you can exclude less than 100% of the matching log entries. For example, the following query matches 99% of low-severity log entries from Google Cloud Storage buckets: `"resource.type=gcs_bucket severity
   *
   * @schema LoggingLogExclusionSpec#filter
   */
  readonly filter: string;

  /**
   * Immutable. The Folder that this resource belongs to. Only one of [projectRef, folderRef, organizationRef, billingAccountRef] may be specified.
   *
   * @schema LoggingLogExclusionSpec#folderRef
   */
  readonly folderRef?: LoggingLogExclusionSpecFolderRef;

  /**
   * Immutable. The Organization that this resource belongs to. Only one of [projectRef, folderRef, organizationRef, billingAccountRef] may be specified.
   *
   * @schema LoggingLogExclusionSpec#organizationRef
   */
  readonly organizationRef?: LoggingLogExclusionSpecOrganizationRef;

  /**
   * Immutable. The Project that this resource belongs to. Only one of [projectRef, folderRef, organizationRef, billingAccountRef] may be specified.
   *
   * @schema LoggingLogExclusionSpec#projectRef
   */
  readonly projectRef?: LoggingLogExclusionSpecProjectRef;

  /**
   * Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
   *
   * @schema LoggingLogExclusionSpec#resourceID
   */
  readonly resourceId?: string;

}

/**
 * Converts an object of type 'LoggingLogExclusionSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LoggingLogExclusionSpec(obj: LoggingLogExclusionSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'billingAccountRef': toJson_LoggingLogExclusionSpecBillingAccountRef(obj.billingAccountRef),
    'description': obj.description,
    'disabled': obj.disabled,
    'filter': obj.filter,
    'folderRef': toJson_LoggingLogExclusionSpecFolderRef(obj.folderRef),
    'organizationRef': toJson_LoggingLogExclusionSpecOrganizationRef(obj.organizationRef),
    'projectRef': toJson_LoggingLogExclusionSpecProjectRef(obj.projectRef),
    'resourceID': obj.resourceId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. The BillingAccount that this resource belongs to. Only one of [projectRef, folderRef, organizationRef, billingAccountRef] may be specified.
 *
 * @schema LoggingLogExclusionSpecBillingAccountRef
 */
export interface LoggingLogExclusionSpecBillingAccountRef {
  /**
   * Allowed value: The Google Cloud resource name of a Google Cloud Billing Account (format: `billingAccounts/{{name}}`).
   *
   * @schema LoggingLogExclusionSpecBillingAccountRef#external
   */
  readonly external?: string;

  /**
   * [WARNING] BillingAccount not yet supported in Config Connector, use 'external' field to reference existing resources.
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema LoggingLogExclusionSpecBillingAccountRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema LoggingLogExclusionSpecBillingAccountRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'LoggingLogExclusionSpecBillingAccountRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LoggingLogExclusionSpecBillingAccountRef(obj: LoggingLogExclusionSpecBillingAccountRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. The Folder that this resource belongs to. Only one of [projectRef, folderRef, organizationRef, billingAccountRef] may be specified.
 *
 * @schema LoggingLogExclusionSpecFolderRef
 */
export interface LoggingLogExclusionSpecFolderRef {
  /**
   * Allowed value: The Google Cloud resource name of a `Folder` resource (format: `folders/{{name}}`).
   *
   * @schema LoggingLogExclusionSpecFolderRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema LoggingLogExclusionSpecFolderRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema LoggingLogExclusionSpecFolderRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'LoggingLogExclusionSpecFolderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LoggingLogExclusionSpecFolderRef(obj: LoggingLogExclusionSpecFolderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. The Organization that this resource belongs to. Only one of [projectRef, folderRef, organizationRef, billingAccountRef] may be specified.
 *
 * @schema LoggingLogExclusionSpecOrganizationRef
 */
export interface LoggingLogExclusionSpecOrganizationRef {
  /**
   * Allowed value: The Google Cloud resource name of a Google Cloud Organization (format: `organizations/{{name}}`).
   *
   * @schema LoggingLogExclusionSpecOrganizationRef#external
   */
  readonly external?: string;

  /**
   * [WARNING] Organization not yet supported in Config Connector, use 'external' field to reference existing resources.
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema LoggingLogExclusionSpecOrganizationRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema LoggingLogExclusionSpecOrganizationRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'LoggingLogExclusionSpecOrganizationRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LoggingLogExclusionSpecOrganizationRef(obj: LoggingLogExclusionSpecOrganizationRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. The Project that this resource belongs to. Only one of [projectRef, folderRef, organizationRef, billingAccountRef] may be specified.
 *
 * @schema LoggingLogExclusionSpecProjectRef
 */
export interface LoggingLogExclusionSpecProjectRef {
  /**
   * Allowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).
   *
   * @schema LoggingLogExclusionSpecProjectRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema LoggingLogExclusionSpecProjectRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema LoggingLogExclusionSpecProjectRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'LoggingLogExclusionSpecProjectRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LoggingLogExclusionSpecProjectRef(obj: LoggingLogExclusionSpecProjectRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema LoggingLogMetric
 */
export class LoggingLogMetric extends ApiObject {
  /**
   * Returns the apiVersion and kind for "LoggingLogMetric"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'logging.cnrm.cloud.google.com/v1beta1',
    kind: 'LoggingLogMetric',
  }

  /**
   * Renders a Kubernetes manifest for "LoggingLogMetric".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: LoggingLogMetricProps): any {
    return {
      ...LoggingLogMetric.GVK,
      ...toJson_LoggingLogMetricProps(props),
    };
  }

  /**
   * Defines a "LoggingLogMetric" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: LoggingLogMetricProps) {
    super(scope, id, {
      ...LoggingLogMetric.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...LoggingLogMetric.GVK,
      ...toJson_LoggingLogMetricProps(resolved),
    };
  }
}

/**
 * @schema LoggingLogMetric
 */
export interface LoggingLogMetricProps {
  /**
   * @schema LoggingLogMetric#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema LoggingLogMetric#spec
   */
  readonly spec: LoggingLogMetricSpec;

}

/**
 * Converts an object of type 'LoggingLogMetricProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LoggingLogMetricProps(obj: LoggingLogMetricProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_LoggingLogMetricSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema LoggingLogMetricSpec
 */
export interface LoggingLogMetricSpec {
  /**
   * Optional. The `bucket_options` are required when the logs-based metric is using a DISTRIBUTION value type and it describes the bucket boundaries used to create a histogram of the extracted values.
   *
   * @schema LoggingLogMetricSpec#bucketOptions
   */
  readonly bucketOptions?: LoggingLogMetricSpecBucketOptions;

  /**
   * Optional. A description of this metric, which is used in documentation. The maximum length of the description is 8000 characters.
   *
   * @schema LoggingLogMetricSpec#description
   */
  readonly description?: string;

  /**
   * Optional. If set to True, then this metric is disabled and it does not generate any points.
   *
   * @schema LoggingLogMetricSpec#disabled
   */
  readonly disabled?: boolean;

  /**
   * Required. An [advanced logs filter](https://cloud.google.com/logging/docs/view/advanced_filters) which is used to match log entries. Example: "resource.type=gae_app AND severity>=ERROR" The maximum length of the filter is 20000 characters.
   *
   * @schema LoggingLogMetricSpec#filter
   */
  readonly filter: string;

  /**
   * Optional. A map from a label key string to an extractor expression which is used to extract data from a log entry field and assign as the label value. Each label key specified in the LabelDescriptor must have an associated extractor expression in this map. The syntax of the extractor expression is the same as for the `value_extractor` field. The extracted value is converted to the type defined in the label descriptor. If the either the extraction or the type conversion fails, the label will have a default value. The default value for a string label is an empty string, for an integer label its 0, and for a boolean label its `false`. Note that there are upper bounds on the maximum number of labels and the number of active time series that are allowed in a project.
   *
   * @schema LoggingLogMetricSpec#labelExtractors
   */
  readonly labelExtractors?: { [key: string]: string };

  /**
   * Optional. The metric descriptor associated with the logs-based metric. If unspecified, it uses a default metric descriptor with a DELTA metric kind, INT64 value type, with no labels and a unit of "1". Such a metric counts the number of log entries matching the `filter` expression. The `name`, `type`, and `description` fields in the `metric_descriptor` are output only, and is constructed using the `name` and `description` field in the LogMetric. To create a logs-based metric that records a distribution of log values, a DELTA metric kind with a DISTRIBUTION value type must be used along with a `value_extractor` expression in the LogMetric. Each label in the metric descriptor must have a matching label name as the key and an extractor expression as the value in the `label_extractors` map. The `metric_kind` and `value_type` fields in the `metric_descriptor` cannot be updated once initially configured. New labels can be added in the `metric_descriptor`, but existing labels cannot be modified except for their description.
   *
   * @schema LoggingLogMetricSpec#metricDescriptor
   */
  readonly metricDescriptor?: LoggingLogMetricSpecMetricDescriptor;

  /**
   * Immutable. The Project that this resource belongs to.
   *
   * @schema LoggingLogMetricSpec#projectRef
   */
  readonly projectRef: LoggingLogMetricSpecProjectRef;

  /**
   * Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
   *
   * @schema LoggingLogMetricSpec#resourceID
   */
  readonly resourceId?: string;

  /**
   * Optional. A `value_extractor` is required when using a distribution logs-based metric to extract the values to record from a log entry. Two functions are supported for value extraction: `EXTRACT(field)` or `REGEXP_EXTRACT(field, regex)`. The argument are: 1. field: The name of the log entry field from which the value is to be extracted. 2. regex: A regular expression using the Google RE2 syntax (https://github.com/google/re2/wiki/Syntax) with a single capture group to extract data from the specified log entry field. The value of the field is converted to a string before applying the regex. It is an error to specify a regex that does not include exactly one capture group. The result of the extraction must be convertible to a double type, as the distribution always records double values. If either the extraction or the conversion to double fails, then those values are not recorded in the distribution. Example: `REGEXP_EXTRACT(jsonPayload.request, ".*quantity=(d+).*")`
   *
   * @schema LoggingLogMetricSpec#valueExtractor
   */
  readonly valueExtractor?: string;

}

/**
 * Converts an object of type 'LoggingLogMetricSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LoggingLogMetricSpec(obj: LoggingLogMetricSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bucketOptions': toJson_LoggingLogMetricSpecBucketOptions(obj.bucketOptions),
    'description': obj.description,
    'disabled': obj.disabled,
    'filter': obj.filter,
    'labelExtractors': ((obj.labelExtractors) === undefined) ? undefined : (Object.entries(obj.labelExtractors).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'metricDescriptor': toJson_LoggingLogMetricSpecMetricDescriptor(obj.metricDescriptor),
    'projectRef': toJson_LoggingLogMetricSpecProjectRef(obj.projectRef),
    'resourceID': obj.resourceId,
    'valueExtractor': obj.valueExtractor,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional. The `bucket_options` are required when the logs-based metric is using a DISTRIBUTION value type and it describes the bucket boundaries used to create a histogram of the extracted values.
 *
 * @schema LoggingLogMetricSpecBucketOptions
 */
export interface LoggingLogMetricSpecBucketOptions {
  /**
   * The explicit buckets.
   *
   * @schema LoggingLogMetricSpecBucketOptions#explicitBuckets
   */
  readonly explicitBuckets?: LoggingLogMetricSpecBucketOptionsExplicitBuckets;

  /**
   * The exponential buckets.
   *
   * @schema LoggingLogMetricSpecBucketOptions#exponentialBuckets
   */
  readonly exponentialBuckets?: LoggingLogMetricSpecBucketOptionsExponentialBuckets;

  /**
   * The linear bucket.
   *
   * @schema LoggingLogMetricSpecBucketOptions#linearBuckets
   */
  readonly linearBuckets?: LoggingLogMetricSpecBucketOptionsLinearBuckets;

}

/**
 * Converts an object of type 'LoggingLogMetricSpecBucketOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LoggingLogMetricSpecBucketOptions(obj: LoggingLogMetricSpecBucketOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'explicitBuckets': toJson_LoggingLogMetricSpecBucketOptionsExplicitBuckets(obj.explicitBuckets),
    'exponentialBuckets': toJson_LoggingLogMetricSpecBucketOptionsExponentialBuckets(obj.exponentialBuckets),
    'linearBuckets': toJson_LoggingLogMetricSpecBucketOptionsLinearBuckets(obj.linearBuckets),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional. The metric descriptor associated with the logs-based metric. If unspecified, it uses a default metric descriptor with a DELTA metric kind, INT64 value type, with no labels and a unit of "1". Such a metric counts the number of log entries matching the `filter` expression. The `name`, `type`, and `description` fields in the `metric_descriptor` are output only, and is constructed using the `name` and `description` field in the LogMetric. To create a logs-based metric that records a distribution of log values, a DELTA metric kind with a DISTRIBUTION value type must be used along with a `value_extractor` expression in the LogMetric. Each label in the metric descriptor must have a matching label name as the key and an extractor expression as the value in the `label_extractors` map. The `metric_kind` and `value_type` fields in the `metric_descriptor` cannot be updated once initially configured. New labels can be added in the `metric_descriptor`, but existing labels cannot be modified except for their description.
 *
 * @schema LoggingLogMetricSpecMetricDescriptor
 */
export interface LoggingLogMetricSpecMetricDescriptor {
  /**
   * A concise name for the metric, which can be displayed in user interfaces. Use sentence case without an ending period, for example "Request count". This field is optional but it is recommended to be set for any metrics associated with user-visible concepts, such as Quota.
   *
   * @schema LoggingLogMetricSpecMetricDescriptor#displayName
   */
  readonly displayName?: string;

  /**
   * The set of labels that can be used to describe a specific instance of this metric type. For example, the `appengine.googleapis.com/http/server/response_latencies` metric type has a label for the HTTP response code, `response_code`, so you can look at latencies for successful responses or just for responses that failed.
   *
   * @schema LoggingLogMetricSpecMetricDescriptor#labels
   */
  readonly labels?: LoggingLogMetricSpecMetricDescriptorLabels[];

  /**
   * Optional. The launch stage of the metric definition. Possible values: UNIMPLEMENTED, PRELAUNCH, EARLY_ACCESS, ALPHA, BETA, GA, DEPRECATED
   *
   * @schema LoggingLogMetricSpecMetricDescriptor#launchStage
   */
  readonly launchStage?: string;

  /**
   * Optional. Metadata which can be used to guide usage of the metric.
   *
   * @schema LoggingLogMetricSpecMetricDescriptor#metadata
   */
  readonly metadata?: LoggingLogMetricSpecMetricDescriptorMetadata;

  /**
   * Immutable. Whether the metric records instantaneous values, changes to a value, etc. Some combinations of `metric_kind` and `value_type` might not be supported. Possible values: GAUGE, DELTA, CUMULATIVE
   *
   * @schema LoggingLogMetricSpecMetricDescriptor#metricKind
   */
  readonly metricKind?: string;

  /**
   * The units in which the metric value is reported. It is only applicable if the `value_type` is `INT64`, `DOUBLE`, or `DISTRIBUTION`. The `unit` defines the representation of the stored metric values. Different systems might scale the values to be more easily displayed (so a value of `0.02kBy` _might_ be displayed as `20By`, and a value of `3523kBy` _might_ be displayed as `3.5MBy`). However, if the `unit` is `kBy`, then the value of the metric is always in thousands of bytes, no matter how it might be displayed. If you want a custom metric to record the exact number of CPU-seconds used by a job, you can create an `INT64 CUMULATIVE` metric whose `unit` is `s{CPU}` (or equivalently `1s{CPU}` or just `s`). If the job uses 12,005 CPU-seconds, then the value is written as `12005`. Alternatively, if you want a custom metric to record data in a more granular way, you can create a `DOUBLE CUMULATIVE` metric whose `unit` is `ks{CPU}`, and then write the value `12.005` (which is `12005/1000`), or use `Kis{CPU}` and write `11.723` (which is `12005/1024`). The supported units are a subset of [The Unified Code for Units of Measure](https://unitsofmeasure.org/ucum.html) standard: **Basic units (UNIT)** * `bit` bit * `By` byte * `s` second * `min` minute * `h` hour * `d` day * `1` dimensionless **Prefixes (PREFIX)** * `k` kilo (10^3) * `M` mega (10^6) * `G` giga (10^9) * `T` tera (10^12) * `P` peta (10^15) * `E` exa (10^18) * `Z` zetta (10^21) * `Y` yotta (10^24) * `m` milli (10^-3) * `u` micro (10^-6) * `n` nano (10^-9) * `p` pico (10^-12) * `f` femto (10^-15) * `a` atto (10^-18) * `z` zepto (10^-21) * `y` yocto (10^-24) * `Ki` kibi (2^10) * `Mi` mebi (2^20) * `Gi` gibi (2^30) * `Ti` tebi (2^40) * `Pi` pebi (2^50) **Grammar** The grammar also includes these connectors: * `/` division or ratio (as an infix operator). For examples, `kBy/{email}` or `MiBy/10ms` (although you should almost never have `/s` in a metric `unit`; rates should always be computed at query time from the underlying cumulative or delta value). * `.` multiplication or composition (as an infix operator). For examples, `GBy.d` or `k{watt}.h`. The grammar for a unit is as follows: Expression = Component: { "." Component } { "/" Component } ; Component = ( [ PREFIX ] UNIT | "%" ) [ Annotation ] | Annotation | "1" ; Annotation = "{" NAME "}" ; Notes: * `Annotation` is just a comment if it follows a `UNIT`. If the annotation is used alone, then the unit is equivalent to `1`. For examples, `{request}/s == 1/s`, `By{transmitted}/s == By/s`. * `NAME` is a sequence of non-blank printable ASCII characters not containing `{` or `}`. * `1` represents a unitary [dimensionless unit](https://en.wikipedia.org/wiki/Dimensionless_quantity) of 1, such as in `1/s`. It is typically used when none of the basic units are appropriate. For example, "new users per day" can be represented as `1/d` or `{new-users}/d` (and a metric value `5` would mean "5 new users). Alternatively, "thousands of page views per day" would be represented as `1000/d` or `k1/d` or `k{page_views}/d` (and a metric value of `5.3` would mean "5300 page views per day"). * `%` represents dimensionless value of 1/100, and annotates values giving a percentage (so the metric values are typically in the range of 0..100, and a metric value `3` means "3 percent"). * `10^2.%` indicates a metric contains a ratio, typically in the range 0..1, that will be multiplied by 100 and displayed as a percentage (so a metric value `0.03` means "3 percent").
   *
   * @schema LoggingLogMetricSpecMetricDescriptor#unit
   */
  readonly unit?: string;

  /**
   * Immutable. Whether the measurement is an integer, a floating-point number, etc. Some combinations of `metric_kind` and `value_type` might not be supported. Possible values: STRING, BOOL, INT64, DOUBLE, DISTRIBUTION, MONEY
   *
   * @schema LoggingLogMetricSpecMetricDescriptor#valueType
   */
  readonly valueType?: string;

}

/**
 * Converts an object of type 'LoggingLogMetricSpecMetricDescriptor' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LoggingLogMetricSpecMetricDescriptor(obj: LoggingLogMetricSpecMetricDescriptor | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'displayName': obj.displayName,
    'labels': obj.labels?.map(y => toJson_LoggingLogMetricSpecMetricDescriptorLabels(y)),
    'launchStage': obj.launchStage,
    'metadata': toJson_LoggingLogMetricSpecMetricDescriptorMetadata(obj.metadata),
    'metricKind': obj.metricKind,
    'unit': obj.unit,
    'valueType': obj.valueType,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. The Project that this resource belongs to.
 *
 * @schema LoggingLogMetricSpecProjectRef
 */
export interface LoggingLogMetricSpecProjectRef {
  /**
   * The resource name of the project in which to create the metric.
   *
   * Allowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).
   *
   * @schema LoggingLogMetricSpecProjectRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema LoggingLogMetricSpecProjectRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema LoggingLogMetricSpecProjectRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'LoggingLogMetricSpecProjectRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LoggingLogMetricSpecProjectRef(obj: LoggingLogMetricSpecProjectRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The explicit buckets.
 *
 * @schema LoggingLogMetricSpecBucketOptionsExplicitBuckets
 */
export interface LoggingLogMetricSpecBucketOptionsExplicitBuckets {
  /**
   * The values must be monotonically increasing.
   *
   * @schema LoggingLogMetricSpecBucketOptionsExplicitBuckets#bounds
   */
  readonly bounds?: number[];

}

/**
 * Converts an object of type 'LoggingLogMetricSpecBucketOptionsExplicitBuckets' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LoggingLogMetricSpecBucketOptionsExplicitBuckets(obj: LoggingLogMetricSpecBucketOptionsExplicitBuckets | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bounds': obj.bounds?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The exponential buckets.
 *
 * @schema LoggingLogMetricSpecBucketOptionsExponentialBuckets
 */
export interface LoggingLogMetricSpecBucketOptionsExponentialBuckets {
  /**
   * Must be greater than 1.
   *
   * @schema LoggingLogMetricSpecBucketOptionsExponentialBuckets#growthFactor
   */
  readonly growthFactor?: number;

  /**
   * Must be greater than 0.
   *
   * @schema LoggingLogMetricSpecBucketOptionsExponentialBuckets#numFiniteBuckets
   */
  readonly numFiniteBuckets?: number;

  /**
   * Must be greater than 0.
   *
   * @schema LoggingLogMetricSpecBucketOptionsExponentialBuckets#scale
   */
  readonly scale?: number;

}

/**
 * Converts an object of type 'LoggingLogMetricSpecBucketOptionsExponentialBuckets' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LoggingLogMetricSpecBucketOptionsExponentialBuckets(obj: LoggingLogMetricSpecBucketOptionsExponentialBuckets | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'growthFactor': obj.growthFactor,
    'numFiniteBuckets': obj.numFiniteBuckets,
    'scale': obj.scale,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The linear bucket.
 *
 * @schema LoggingLogMetricSpecBucketOptionsLinearBuckets
 */
export interface LoggingLogMetricSpecBucketOptionsLinearBuckets {
  /**
   * Must be greater than 0.
   *
   * @schema LoggingLogMetricSpecBucketOptionsLinearBuckets#numFiniteBuckets
   */
  readonly numFiniteBuckets?: number;

  /**
   * Lower bound of the first bucket.
   *
   * @schema LoggingLogMetricSpecBucketOptionsLinearBuckets#offset
   */
  readonly offset?: number;

  /**
   * Must be greater than 0.
   *
   * @schema LoggingLogMetricSpecBucketOptionsLinearBuckets#width
   */
  readonly width?: number;

}

/**
 * Converts an object of type 'LoggingLogMetricSpecBucketOptionsLinearBuckets' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LoggingLogMetricSpecBucketOptionsLinearBuckets(obj: LoggingLogMetricSpecBucketOptionsLinearBuckets | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'numFiniteBuckets': obj.numFiniteBuckets,
    'offset': obj.offset,
    'width': obj.width,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema LoggingLogMetricSpecMetricDescriptorLabels
 */
export interface LoggingLogMetricSpecMetricDescriptorLabels {
  /**
   * Immutable. A human-readable description for the label.
   *
   * @schema LoggingLogMetricSpecMetricDescriptorLabels#description
   */
  readonly description?: string;

  /**
   * Immutable. The label key.
   *
   * @schema LoggingLogMetricSpecMetricDescriptorLabels#key
   */
  readonly key?: string;

  /**
   * Immutable. The type of data that can be assigned to the label. Possible values: STRING, BOOL, INT64, DOUBLE, DISTRIBUTION, MONEY
   *
   * @schema LoggingLogMetricSpecMetricDescriptorLabels#valueType
   */
  readonly valueType?: string;

}

/**
 * Converts an object of type 'LoggingLogMetricSpecMetricDescriptorLabels' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LoggingLogMetricSpecMetricDescriptorLabels(obj: LoggingLogMetricSpecMetricDescriptorLabels | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'description': obj.description,
    'key': obj.key,
    'valueType': obj.valueType,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional. Metadata which can be used to guide usage of the metric.
 *
 * @schema LoggingLogMetricSpecMetricDescriptorMetadata
 */
export interface LoggingLogMetricSpecMetricDescriptorMetadata {
  /**
   * The delay of data points caused by ingestion. Data points older than this age are guaranteed to be ingested and available to be read, excluding data loss due to errors.
   *
   * @schema LoggingLogMetricSpecMetricDescriptorMetadata#ingestDelay
   */
  readonly ingestDelay?: string;

  /**
   * The sampling period of metric data points. For metrics which are written periodically, consecutive data points are stored at this time interval, excluding data loss due to errors. Metrics with a higher granularity have a smaller sampling period.
   *
   * @schema LoggingLogMetricSpecMetricDescriptorMetadata#samplePeriod
   */
  readonly samplePeriod?: string;

}

/**
 * Converts an object of type 'LoggingLogMetricSpecMetricDescriptorMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LoggingLogMetricSpecMetricDescriptorMetadata(obj: LoggingLogMetricSpecMetricDescriptorMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ingestDelay': obj.ingestDelay,
    'samplePeriod': obj.samplePeriod,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema LoggingLogSink
 */
export class LoggingLogSink extends ApiObject {
  /**
   * Returns the apiVersion and kind for "LoggingLogSink"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'logging.cnrm.cloud.google.com/v1beta1',
    kind: 'LoggingLogSink',
  }

  /**
   * Renders a Kubernetes manifest for "LoggingLogSink".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: LoggingLogSinkProps): any {
    return {
      ...LoggingLogSink.GVK,
      ...toJson_LoggingLogSinkProps(props),
    };
  }

  /**
   * Defines a "LoggingLogSink" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: LoggingLogSinkProps) {
    super(scope, id, {
      ...LoggingLogSink.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...LoggingLogSink.GVK,
      ...toJson_LoggingLogSinkProps(resolved),
    };
  }
}

/**
 * @schema LoggingLogSink
 */
export interface LoggingLogSinkProps {
  /**
   * @schema LoggingLogSink#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema LoggingLogSink#spec
   */
  readonly spec: LoggingLogSinkSpec;

}

/**
 * Converts an object of type 'LoggingLogSinkProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LoggingLogSinkProps(obj: LoggingLogSinkProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_LoggingLogSinkSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema LoggingLogSinkSpec
 */
export interface LoggingLogSinkSpec {
  /**
   * Options that affect sinks exporting data to BigQuery.
   *
   * @schema LoggingLogSinkSpec#bigqueryOptions
   */
  readonly bigqueryOptions?: LoggingLogSinkSpecBigqueryOptions;

  /**
   * A description of this sink. The maximum length of the description is 8000 characters.
   *
   * @schema LoggingLogSinkSpec#description
   */
  readonly description?: string;

  /**
   * @schema LoggingLogSinkSpec#destination
   */
  readonly destination: LoggingLogSinkSpecDestination;

  /**
   * If set to True, then this sink is disabled and it does not export any log entries.
   *
   * @schema LoggingLogSinkSpec#disabled
   */
  readonly disabled?: boolean;

  /**
   * Log entries that match any of the exclusion filters will not be exported. If a log entry is matched by both filter and one of exclusion's filters, it will not be exported.
   *
   * @schema LoggingLogSinkSpec#exclusions
   */
  readonly exclusions?: LoggingLogSinkSpecExclusions[];

  /**
   * The filter to apply when exporting logs. Only log entries that match the filter are exported.
   *
   * @schema LoggingLogSinkSpec#filter
   */
  readonly filter?: string;

  /**
   * The folder in which to create the sink. Only one of projectRef,
   * folderRef, or organizationRef may be specified.
   *
   * @schema LoggingLogSinkSpec#folderRef
   */
  readonly folderRef?: LoggingLogSinkSpecFolderRef;

  /**
   * Immutable. Whether or not to include children organizations in the sink export. If true, logs associated with child projects are also exported; otherwise only logs relating to the provided organization are included.
   *
   * @schema LoggingLogSinkSpec#includeChildren
   */
  readonly includeChildren?: boolean;

  /**
   * The organization in which to create the sink. Only one of projectRef,
   * folderRef, or organizationRef may be specified.
   *
   * @schema LoggingLogSinkSpec#organizationRef
   */
  readonly organizationRef?: LoggingLogSinkSpecOrganizationRef;

  /**
   * The project in which to create the sink. Only one of projectRef,
   * folderRef, or organizationRef may be specified.
   *
   * @schema LoggingLogSinkSpec#projectRef
   */
  readonly projectRef?: LoggingLogSinkSpecProjectRef;

  /**
   * Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
   *
   * @schema LoggingLogSinkSpec#resourceID
   */
  readonly resourceId?: string;

  /**
   * Immutable. Whether or not to create a unique identity associated with this sink. If false (the default), then the writer_identity used is serviceAccount:cloud-logs@system.gserviceaccount.com. If true, then a unique service account is created and used for this sink. If you wish to publish logs across projects, you must set unique_writer_identity to true.
   *
   * @schema LoggingLogSinkSpec#uniqueWriterIdentity
   */
  readonly uniqueWriterIdentity?: boolean;

}

/**
 * Converts an object of type 'LoggingLogSinkSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LoggingLogSinkSpec(obj: LoggingLogSinkSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bigqueryOptions': toJson_LoggingLogSinkSpecBigqueryOptions(obj.bigqueryOptions),
    'description': obj.description,
    'destination': toJson_LoggingLogSinkSpecDestination(obj.destination),
    'disabled': obj.disabled,
    'exclusions': obj.exclusions?.map(y => toJson_LoggingLogSinkSpecExclusions(y)),
    'filter': obj.filter,
    'folderRef': toJson_LoggingLogSinkSpecFolderRef(obj.folderRef),
    'includeChildren': obj.includeChildren,
    'organizationRef': toJson_LoggingLogSinkSpecOrganizationRef(obj.organizationRef),
    'projectRef': toJson_LoggingLogSinkSpecProjectRef(obj.projectRef),
    'resourceID': obj.resourceId,
    'uniqueWriterIdentity': obj.uniqueWriterIdentity,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Options that affect sinks exporting data to BigQuery.
 *
 * @schema LoggingLogSinkSpecBigqueryOptions
 */
export interface LoggingLogSinkSpecBigqueryOptions {
  /**
   * Whether to use BigQuery's partition tables. By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned tables the date suffix is no longer present and special query syntax has to be used instead. In both cases, tables are sharded based on UTC timezone.
   *
   * @schema LoggingLogSinkSpecBigqueryOptions#usePartitionedTables
   */
  readonly usePartitionedTables: boolean;

}

/**
 * Converts an object of type 'LoggingLogSinkSpecBigqueryOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LoggingLogSinkSpecBigqueryOptions(obj: LoggingLogSinkSpecBigqueryOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'usePartitionedTables': obj.usePartitionedTables,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema LoggingLogSinkSpecDestination
 */
export interface LoggingLogSinkSpecDestination {
  /**
   * @schema LoggingLogSinkSpecDestination#bigQueryDatasetRef
   */
  readonly bigQueryDatasetRef?: LoggingLogSinkSpecDestinationBigQueryDatasetRef;

  /**
   * Only `external` field is supported to configure the reference.
   *
   * @schema LoggingLogSinkSpecDestination#loggingLogBucketRef
   */
  readonly loggingLogBucketRef?: LoggingLogSinkSpecDestinationLoggingLogBucketRef;

  /**
   * @schema LoggingLogSinkSpecDestination#pubSubTopicRef
   */
  readonly pubSubTopicRef?: LoggingLogSinkSpecDestinationPubSubTopicRef;

  /**
   * @schema LoggingLogSinkSpecDestination#storageBucketRef
   */
  readonly storageBucketRef?: LoggingLogSinkSpecDestinationStorageBucketRef;

}

/**
 * Converts an object of type 'LoggingLogSinkSpecDestination' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LoggingLogSinkSpecDestination(obj: LoggingLogSinkSpecDestination | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bigQueryDatasetRef': toJson_LoggingLogSinkSpecDestinationBigQueryDatasetRef(obj.bigQueryDatasetRef),
    'loggingLogBucketRef': toJson_LoggingLogSinkSpecDestinationLoggingLogBucketRef(obj.loggingLogBucketRef),
    'pubSubTopicRef': toJson_LoggingLogSinkSpecDestinationPubSubTopicRef(obj.pubSubTopicRef),
    'storageBucketRef': toJson_LoggingLogSinkSpecDestinationStorageBucketRef(obj.storageBucketRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema LoggingLogSinkSpecExclusions
 */
export interface LoggingLogSinkSpecExclusions {
  /**
   * A description of this exclusion.
   *
   * @schema LoggingLogSinkSpecExclusions#description
   */
  readonly description?: string;

  /**
   * If set to True, then this exclusion is disabled and it does not exclude any log entries.
   *
   * @schema LoggingLogSinkSpecExclusions#disabled
   */
  readonly disabled?: boolean;

  /**
   * An advanced logs filter that matches the log entries to be excluded. By using the sample function, you can exclude less than 100% of the matching log entries.
   *
   * @schema LoggingLogSinkSpecExclusions#filter
   */
  readonly filter: string;

  /**
   * A client-assigned identifier, such as "load-balancer-exclusion". Identifiers are limited to 100 characters and can include only letters, digits, underscores, hyphens, and periods. First character has to be alphanumeric.
   *
   * @schema LoggingLogSinkSpecExclusions#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'LoggingLogSinkSpecExclusions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LoggingLogSinkSpecExclusions(obj: LoggingLogSinkSpecExclusions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'description': obj.description,
    'disabled': obj.disabled,
    'filter': obj.filter,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The folder in which to create the sink. Only one of projectRef,
 * folderRef, or organizationRef may be specified.
 *
 * @schema LoggingLogSinkSpecFolderRef
 */
export interface LoggingLogSinkSpecFolderRef {
  /**
   * Allowed value: The `folderId` field of a `Folder` resource.
   *
   * @schema LoggingLogSinkSpecFolderRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema LoggingLogSinkSpecFolderRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema LoggingLogSinkSpecFolderRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'LoggingLogSinkSpecFolderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LoggingLogSinkSpecFolderRef(obj: LoggingLogSinkSpecFolderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The organization in which to create the sink. Only one of projectRef,
 * folderRef, or organizationRef may be specified.
 *
 * @schema LoggingLogSinkSpecOrganizationRef
 */
export interface LoggingLogSinkSpecOrganizationRef {
  /**
   * Allowed value: The `name` field of an `Organization` resource.
   *
   * @schema LoggingLogSinkSpecOrganizationRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema LoggingLogSinkSpecOrganizationRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema LoggingLogSinkSpecOrganizationRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'LoggingLogSinkSpecOrganizationRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LoggingLogSinkSpecOrganizationRef(obj: LoggingLogSinkSpecOrganizationRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The project in which to create the sink. Only one of projectRef,
 * folderRef, or organizationRef may be specified.
 *
 * @schema LoggingLogSinkSpecProjectRef
 */
export interface LoggingLogSinkSpecProjectRef {
  /**
   * Allowed value: The `name` field of a `Project` resource.
   *
   * @schema LoggingLogSinkSpecProjectRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema LoggingLogSinkSpecProjectRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema LoggingLogSinkSpecProjectRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'LoggingLogSinkSpecProjectRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LoggingLogSinkSpecProjectRef(obj: LoggingLogSinkSpecProjectRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema LoggingLogSinkSpecDestinationBigQueryDatasetRef
 */
export interface LoggingLogSinkSpecDestinationBigQueryDatasetRef {
  /**
   * Allowed value: string of the format `bigquery.googleapis.com/projects/{{project}}/datasets/{{value}}`, where {{value}} is the `name` field of a `BigQueryDataset` resource.
   *
   * @schema LoggingLogSinkSpecDestinationBigQueryDatasetRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema LoggingLogSinkSpecDestinationBigQueryDatasetRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema LoggingLogSinkSpecDestinationBigQueryDatasetRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'LoggingLogSinkSpecDestinationBigQueryDatasetRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LoggingLogSinkSpecDestinationBigQueryDatasetRef(obj: LoggingLogSinkSpecDestinationBigQueryDatasetRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Only `external` field is supported to configure the reference.
 *
 * @schema LoggingLogSinkSpecDestinationLoggingLogBucketRef
 */
export interface LoggingLogSinkSpecDestinationLoggingLogBucketRef {
  /**
   * Allowed value: string of the format `logging.googleapis.com/projects/{{project}}/locations/{{location}}/buckets/{{value}}`, where {{value}} is the `name` field of a `LoggingLogBucket` resource.
   *
   * @schema LoggingLogSinkSpecDestinationLoggingLogBucketRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema LoggingLogSinkSpecDestinationLoggingLogBucketRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema LoggingLogSinkSpecDestinationLoggingLogBucketRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'LoggingLogSinkSpecDestinationLoggingLogBucketRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LoggingLogSinkSpecDestinationLoggingLogBucketRef(obj: LoggingLogSinkSpecDestinationLoggingLogBucketRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema LoggingLogSinkSpecDestinationPubSubTopicRef
 */
export interface LoggingLogSinkSpecDestinationPubSubTopicRef {
  /**
   * Allowed value: string of the format `pubsub.googleapis.com/projects/{{project}}/topics/{{value}}`, where {{value}} is the `name` field of a `PubSubTopic` resource.
   *
   * @schema LoggingLogSinkSpecDestinationPubSubTopicRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema LoggingLogSinkSpecDestinationPubSubTopicRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema LoggingLogSinkSpecDestinationPubSubTopicRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'LoggingLogSinkSpecDestinationPubSubTopicRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LoggingLogSinkSpecDestinationPubSubTopicRef(obj: LoggingLogSinkSpecDestinationPubSubTopicRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema LoggingLogSinkSpecDestinationStorageBucketRef
 */
export interface LoggingLogSinkSpecDestinationStorageBucketRef {
  /**
   * Allowed value: string of the format `storage.googleapis.com/{{value}}`, where {{value}} is the `name` field of a `StorageBucket` resource.
   *
   * @schema LoggingLogSinkSpecDestinationStorageBucketRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema LoggingLogSinkSpecDestinationStorageBucketRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema LoggingLogSinkSpecDestinationStorageBucketRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'LoggingLogSinkSpecDestinationStorageBucketRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LoggingLogSinkSpecDestinationStorageBucketRef(obj: LoggingLogSinkSpecDestinationStorageBucketRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema LoggingLogView
 */
export class LoggingLogView extends ApiObject {
  /**
   * Returns the apiVersion and kind for "LoggingLogView"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'logging.cnrm.cloud.google.com/v1beta1',
    kind: 'LoggingLogView',
  }

  /**
   * Renders a Kubernetes manifest for "LoggingLogView".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: LoggingLogViewProps): any {
    return {
      ...LoggingLogView.GVK,
      ...toJson_LoggingLogViewProps(props),
    };
  }

  /**
   * Defines a "LoggingLogView" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: LoggingLogViewProps) {
    super(scope, id, {
      ...LoggingLogView.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...LoggingLogView.GVK,
      ...toJson_LoggingLogViewProps(resolved),
    };
  }
}

/**
 * @schema LoggingLogView
 */
export interface LoggingLogViewProps {
  /**
   * @schema LoggingLogView#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema LoggingLogView#spec
   */
  readonly spec: LoggingLogViewSpec;

}

/**
 * Converts an object of type 'LoggingLogViewProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LoggingLogViewProps(obj: LoggingLogViewProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_LoggingLogViewSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema LoggingLogViewSpec
 */
export interface LoggingLogViewSpec {
  /**
   * Immutable. The BillingAccount that this resource belongs to. Only one of [billingAccountRef, folderRef, organizationRef, projectRef] may be specified.
   *
   * @schema LoggingLogViewSpec#billingAccountRef
   */
  readonly billingAccountRef?: LoggingLogViewSpecBillingAccountRef;

  /**
   * Immutable.
   *
   * @schema LoggingLogViewSpec#bucketRef
   */
  readonly bucketRef: LoggingLogViewSpecBucketRef;

  /**
   * Describes this view.
   *
   * @schema LoggingLogViewSpec#description
   */
  readonly description?: string;

  /**
   * Filter that restricts which log entries in a bucket are visible in this view. Filters are restricted to be a logical AND of ==/!= of any of the following: - originating project/folder/organization/billing account. - resource type - log id For example: SOURCE("projects/myproject") AND resource.type = "gce_instance" AND LOG_ID("stdout")
   *
   * @schema LoggingLogViewSpec#filter
   */
  readonly filter?: string;

  /**
   * Immutable. The Folder that this resource belongs to. Only one of [billingAccountRef, folderRef, organizationRef, projectRef] may be specified.
   *
   * @schema LoggingLogViewSpec#folderRef
   */
  readonly folderRef?: LoggingLogViewSpecFolderRef;

  /**
   * Immutable. The location of the resource. The supported locations are: global, us-central1, us-east1, us-west1, asia-east1, europe-west1.
   *
   * @schema LoggingLogViewSpec#location
   */
  readonly location?: string;

  /**
   * Immutable. The Organization that this resource belongs to. Only one of [billingAccountRef, folderRef, organizationRef, projectRef] may be specified.
   *
   * @schema LoggingLogViewSpec#organizationRef
   */
  readonly organizationRef?: LoggingLogViewSpecOrganizationRef;

  /**
   * Immutable. The Project that this resource belongs to. Only one of [billingAccountRef, folderRef, organizationRef, projectRef] may be specified.
   *
   * @schema LoggingLogViewSpec#projectRef
   */
  readonly projectRef?: LoggingLogViewSpecProjectRef;

  /**
   * Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
   *
   * @schema LoggingLogViewSpec#resourceID
   */
  readonly resourceId?: string;

}

/**
 * Converts an object of type 'LoggingLogViewSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LoggingLogViewSpec(obj: LoggingLogViewSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'billingAccountRef': toJson_LoggingLogViewSpecBillingAccountRef(obj.billingAccountRef),
    'bucketRef': toJson_LoggingLogViewSpecBucketRef(obj.bucketRef),
    'description': obj.description,
    'filter': obj.filter,
    'folderRef': toJson_LoggingLogViewSpecFolderRef(obj.folderRef),
    'location': obj.location,
    'organizationRef': toJson_LoggingLogViewSpecOrganizationRef(obj.organizationRef),
    'projectRef': toJson_LoggingLogViewSpecProjectRef(obj.projectRef),
    'resourceID': obj.resourceId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. The BillingAccount that this resource belongs to. Only one of [billingAccountRef, folderRef, organizationRef, projectRef] may be specified.
 *
 * @schema LoggingLogViewSpecBillingAccountRef
 */
export interface LoggingLogViewSpecBillingAccountRef {
  /**
   * Allowed value: The Google Cloud resource name of a Google Cloud Billing Account (format: `billingAccounts/{{name}}`).
   *
   * @schema LoggingLogViewSpecBillingAccountRef#external
   */
  readonly external?: string;

  /**
   * [WARNING] BillingAccount not yet supported in Config Connector, use 'external' field to reference existing resources.
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema LoggingLogViewSpecBillingAccountRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema LoggingLogViewSpecBillingAccountRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'LoggingLogViewSpecBillingAccountRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LoggingLogViewSpecBillingAccountRef(obj: LoggingLogViewSpecBillingAccountRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable.
 *
 * @schema LoggingLogViewSpecBucketRef
 */
export interface LoggingLogViewSpecBucketRef {
  /**
   * The bucket of the resource
   *
   * Allowed value: The Google Cloud resource name of a `LoggingLogBucket` resource (format: `{{parent}}/locations/{{location}}/buckets/{{name}}`).
   *
   * @schema LoggingLogViewSpecBucketRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema LoggingLogViewSpecBucketRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema LoggingLogViewSpecBucketRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'LoggingLogViewSpecBucketRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LoggingLogViewSpecBucketRef(obj: LoggingLogViewSpecBucketRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. The Folder that this resource belongs to. Only one of [billingAccountRef, folderRef, organizationRef, projectRef] may be specified.
 *
 * @schema LoggingLogViewSpecFolderRef
 */
export interface LoggingLogViewSpecFolderRef {
  /**
   * Allowed value: The Google Cloud resource name of a `Folder` resource (format: `folders/{{name}}`).
   *
   * @schema LoggingLogViewSpecFolderRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema LoggingLogViewSpecFolderRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema LoggingLogViewSpecFolderRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'LoggingLogViewSpecFolderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LoggingLogViewSpecFolderRef(obj: LoggingLogViewSpecFolderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. The Organization that this resource belongs to. Only one of [billingAccountRef, folderRef, organizationRef, projectRef] may be specified.
 *
 * @schema LoggingLogViewSpecOrganizationRef
 */
export interface LoggingLogViewSpecOrganizationRef {
  /**
   * Allowed value: The Google Cloud resource name of a Google Cloud Organization (format: `organizations/{{name}}`).
   *
   * @schema LoggingLogViewSpecOrganizationRef#external
   */
  readonly external?: string;

  /**
   * [WARNING] Organization not yet supported in Config Connector, use 'external' field to reference existing resources.
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema LoggingLogViewSpecOrganizationRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema LoggingLogViewSpecOrganizationRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'LoggingLogViewSpecOrganizationRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LoggingLogViewSpecOrganizationRef(obj: LoggingLogViewSpecOrganizationRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. The Project that this resource belongs to. Only one of [billingAccountRef, folderRef, organizationRef, projectRef] may be specified.
 *
 * @schema LoggingLogViewSpecProjectRef
 */
export interface LoggingLogViewSpecProjectRef {
  /**
   * Allowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).
   *
   * @schema LoggingLogViewSpecProjectRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema LoggingLogViewSpecProjectRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema LoggingLogViewSpecProjectRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'LoggingLogViewSpecProjectRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LoggingLogViewSpecProjectRef(obj: LoggingLogViewSpecProjectRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

