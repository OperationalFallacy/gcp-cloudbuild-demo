// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 *
 *
 * @schema StorageTransferJob
 */
export class StorageTransferJob extends ApiObject {
  /**
   * Returns the apiVersion and kind for "StorageTransferJob"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'storagetransfer.cnrm.cloud.google.com/v1beta1',
    kind: 'StorageTransferJob',
  }

  /**
   * Renders a Kubernetes manifest for "StorageTransferJob".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: StorageTransferJobProps): any {
    return {
      ...StorageTransferJob.GVK,
      ...toJson_StorageTransferJobProps(props),
    };
  }

  /**
   * Defines a "StorageTransferJob" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: StorageTransferJobProps) {
    super(scope, id, {
      ...StorageTransferJob.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...StorageTransferJob.GVK,
      ...toJson_StorageTransferJobProps(resolved),
    };
  }
}

/**
 * @schema StorageTransferJob
 */
export interface StorageTransferJobProps {
  /**
   * @schema StorageTransferJob#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema StorageTransferJob#spec
   */
  readonly spec: StorageTransferJobSpec;

}

/**
 * Converts an object of type 'StorageTransferJobProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StorageTransferJobProps(obj: StorageTransferJobProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_StorageTransferJobSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema StorageTransferJobSpec
 */
export interface StorageTransferJobSpec {
  /**
   * Unique description to identify the Transfer Job.
   *
   * @schema StorageTransferJobSpec#description
   */
  readonly description: string;

  /**
   * Notification configuration.
   *
   * @schema StorageTransferJobSpec#notificationConfig
   */
  readonly notificationConfig?: StorageTransferJobSpecNotificationConfig;

  /**
   * Immutable. Optional. The service-generated name of the resource. Used for acquisition only. Leave unset to create a new resource.
   *
   * @schema StorageTransferJobSpec#resourceID
   */
  readonly resourceId?: string;

  /**
   * Schedule specification defining when the Transfer Job should be scheduled to start, end and what time to run.
   *
   * @schema StorageTransferJobSpec#schedule
   */
  readonly schedule?: StorageTransferJobSpecSchedule;

  /**
   * Status of the job. Default: ENABLED. NOTE: The effect of the new job status takes place during a subsequent job run. For example, if you change the job status from ENABLED to DISABLED, and an operation spawned by the transfer is running, the status change would not affect the current operation.
   *
   * @schema StorageTransferJobSpec#status
   */
  readonly status?: string;

  /**
   * Transfer specification.
   *
   * @schema StorageTransferJobSpec#transferSpec
   */
  readonly transferSpec: StorageTransferJobSpecTransferSpec;

}

/**
 * Converts an object of type 'StorageTransferJobSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StorageTransferJobSpec(obj: StorageTransferJobSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'description': obj.description,
    'notificationConfig': toJson_StorageTransferJobSpecNotificationConfig(obj.notificationConfig),
    'resourceID': obj.resourceId,
    'schedule': toJson_StorageTransferJobSpecSchedule(obj.schedule),
    'status': obj.status,
    'transferSpec': toJson_StorageTransferJobSpecTransferSpec(obj.transferSpec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Notification configuration.
 *
 * @schema StorageTransferJobSpecNotificationConfig
 */
export interface StorageTransferJobSpecNotificationConfig {
  /**
   * Event types for which a notification is desired. If empty, send notifications for all event types. The valid types are "TRANSFER_OPERATION_SUCCESS", "TRANSFER_OPERATION_FAILED", "TRANSFER_OPERATION_ABORTED".
   *
   * @schema StorageTransferJobSpecNotificationConfig#eventTypes
   */
  readonly eventTypes?: string[];

  /**
   * The desired format of the notification message payloads. One of "NONE" or "JSON".
   *
   * @schema StorageTransferJobSpecNotificationConfig#payloadFormat
   */
  readonly payloadFormat: string;

  /**
   * The PubSubTopic to which to publish notifications.
   *
   * @schema StorageTransferJobSpecNotificationConfig#topicRef
   */
  readonly topicRef: StorageTransferJobSpecNotificationConfigTopicRef;

}

/**
 * Converts an object of type 'StorageTransferJobSpecNotificationConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StorageTransferJobSpecNotificationConfig(obj: StorageTransferJobSpecNotificationConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'eventTypes': obj.eventTypes?.map(y => y),
    'payloadFormat': obj.payloadFormat,
    'topicRef': toJson_StorageTransferJobSpecNotificationConfigTopicRef(obj.topicRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Schedule specification defining when the Transfer Job should be scheduled to start, end and what time to run.
 *
 * @schema StorageTransferJobSpecSchedule
 */
export interface StorageTransferJobSpecSchedule {
  /**
   * Interval between the start of each scheduled transfer. If unspecified, the default value is 24 hours. This value may not be less than 1 hour. A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
   *
   * @schema StorageTransferJobSpecSchedule#repeatInterval
   */
  readonly repeatInterval?: string;

  /**
   * The last day the recurring transfer will be run. If schedule_end_date is the same as schedule_start_date, the transfer will be executed only once.
   *
   * @schema StorageTransferJobSpecSchedule#scheduleEndDate
   */
  readonly scheduleEndDate?: StorageTransferJobSpecScheduleScheduleEndDate;

  /**
   * The first day the recurring transfer is scheduled to run. If schedule_start_date is in the past, the transfer will run for the first time on the following day.
   *
   * @schema StorageTransferJobSpecSchedule#scheduleStartDate
   */
  readonly scheduleStartDate: StorageTransferJobSpecScheduleScheduleStartDate;

  /**
   * The time in UTC at which the transfer will be scheduled to start in a day. Transfers may start later than this time. If not specified, recurring and one-time transfers that are scheduled to run today will run immediately; recurring transfers that are scheduled to run on a future date will start at approximately midnight UTC on that date. Note that when configuring a transfer with the Cloud Platform Console, the transfer's start time in a day is specified in your local timezone.
   *
   * @schema StorageTransferJobSpecSchedule#startTimeOfDay
   */
  readonly startTimeOfDay?: StorageTransferJobSpecScheduleStartTimeOfDay;

}

/**
 * Converts an object of type 'StorageTransferJobSpecSchedule' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StorageTransferJobSpecSchedule(obj: StorageTransferJobSpecSchedule | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'repeatInterval': obj.repeatInterval,
    'scheduleEndDate': toJson_StorageTransferJobSpecScheduleScheduleEndDate(obj.scheduleEndDate),
    'scheduleStartDate': toJson_StorageTransferJobSpecScheduleScheduleStartDate(obj.scheduleStartDate),
    'startTimeOfDay': toJson_StorageTransferJobSpecScheduleStartTimeOfDay(obj.startTimeOfDay),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Transfer specification.
 *
 * @schema StorageTransferJobSpecTransferSpec
 */
export interface StorageTransferJobSpecTransferSpec {
  /**
   * An AWS S3 data source.
   *
   * @schema StorageTransferJobSpecTransferSpec#awsS3DataSource
   */
  readonly awsS3DataSource?: StorageTransferJobSpecTransferSpecAwsS3DataSource;

  /**
   * An Azure Blob Storage data source.
   *
   * @schema StorageTransferJobSpecTransferSpec#azureBlobStorageDataSource
   */
  readonly azureBlobStorageDataSource?: StorageTransferJobSpecTransferSpecAzureBlobStorageDataSource;

  /**
   * A Google Cloud Storage data sink.
   *
   * @schema StorageTransferJobSpecTransferSpec#gcsDataSink
   */
  readonly gcsDataSink?: StorageTransferJobSpecTransferSpecGcsDataSink;

  /**
   * A Google Cloud Storage data source.
   *
   * @schema StorageTransferJobSpecTransferSpec#gcsDataSource
   */
  readonly gcsDataSource?: StorageTransferJobSpecTransferSpecGcsDataSource;

  /**
   * A HTTP URL data source.
   *
   * @schema StorageTransferJobSpecTransferSpec#httpDataSource
   */
  readonly httpDataSource?: StorageTransferJobSpecTransferSpecHttpDataSource;

  /**
   * Only objects that satisfy these object conditions are included in the set of data source and data sink objects. Object conditions based on objects' last_modification_time do not exclude objects in a data sink.
   *
   * @schema StorageTransferJobSpecTransferSpec#objectConditions
   */
  readonly objectConditions?: StorageTransferJobSpecTransferSpecObjectConditions;

  /**
   * A POSIX filesystem data sink.
   *
   * @schema StorageTransferJobSpecTransferSpec#posixDataSink
   */
  readonly posixDataSink?: StorageTransferJobSpecTransferSpecPosixDataSink;

  /**
   * A POSIX filesystem data source.
   *
   * @schema StorageTransferJobSpecTransferSpec#posixDataSource
   */
  readonly posixDataSource?: StorageTransferJobSpecTransferSpecPosixDataSource;

  /**
   * Immutable. Specifies the agent pool name associated with the posix data source. When unspecified, the default name is used.
   *
   * @schema StorageTransferJobSpecTransferSpec#sinkAgentPoolName
   */
  readonly sinkAgentPoolName?: string;

  /**
   * Immutable. Specifies the agent pool name associated with the posix data source. When unspecified, the default name is used.
   *
   * @schema StorageTransferJobSpecTransferSpec#sourceAgentPoolName
   */
  readonly sourceAgentPoolName?: string;

  /**
   * Characteristics of how to treat files from datasource and sink during job. If the option delete_objects_unique_in_sink is true, object conditions based on objects' last_modification_time are ignored and do not exclude objects in a data source or a data sink.
   *
   * @schema StorageTransferJobSpecTransferSpec#transferOptions
   */
  readonly transferOptions?: StorageTransferJobSpecTransferSpecTransferOptions;

}

/**
 * Converts an object of type 'StorageTransferJobSpecTransferSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StorageTransferJobSpecTransferSpec(obj: StorageTransferJobSpecTransferSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'awsS3DataSource': toJson_StorageTransferJobSpecTransferSpecAwsS3DataSource(obj.awsS3DataSource),
    'azureBlobStorageDataSource': toJson_StorageTransferJobSpecTransferSpecAzureBlobStorageDataSource(obj.azureBlobStorageDataSource),
    'gcsDataSink': toJson_StorageTransferJobSpecTransferSpecGcsDataSink(obj.gcsDataSink),
    'gcsDataSource': toJson_StorageTransferJobSpecTransferSpecGcsDataSource(obj.gcsDataSource),
    'httpDataSource': toJson_StorageTransferJobSpecTransferSpecHttpDataSource(obj.httpDataSource),
    'objectConditions': toJson_StorageTransferJobSpecTransferSpecObjectConditions(obj.objectConditions),
    'posixDataSink': toJson_StorageTransferJobSpecTransferSpecPosixDataSink(obj.posixDataSink),
    'posixDataSource': toJson_StorageTransferJobSpecTransferSpecPosixDataSource(obj.posixDataSource),
    'sinkAgentPoolName': obj.sinkAgentPoolName,
    'sourceAgentPoolName': obj.sourceAgentPoolName,
    'transferOptions': toJson_StorageTransferJobSpecTransferSpecTransferOptions(obj.transferOptions),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The PubSubTopic to which to publish notifications.
 *
 * @schema StorageTransferJobSpecNotificationConfigTopicRef
 */
export interface StorageTransferJobSpecNotificationConfigTopicRef {
  /**
   * Allowed value: string of the format `projects/{{project}}/topics/{{value}}`, where {{value}} is the `name` field of a `PubSubTopic` resource.
   *
   * @schema StorageTransferJobSpecNotificationConfigTopicRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema StorageTransferJobSpecNotificationConfigTopicRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema StorageTransferJobSpecNotificationConfigTopicRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'StorageTransferJobSpecNotificationConfigTopicRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StorageTransferJobSpecNotificationConfigTopicRef(obj: StorageTransferJobSpecNotificationConfigTopicRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The last day the recurring transfer will be run. If schedule_end_date is the same as schedule_start_date, the transfer will be executed only once.
 *
 * @schema StorageTransferJobSpecScheduleScheduleEndDate
 */
export interface StorageTransferJobSpecScheduleScheduleEndDate {
  /**
   * Day of month. Must be from 1 to 31 and valid for the year and month.
   *
   * @schema StorageTransferJobSpecScheduleScheduleEndDate#day
   */
  readonly day: number;

  /**
   * Month of year. Must be from 1 to 12.
   *
   * @schema StorageTransferJobSpecScheduleScheduleEndDate#month
   */
  readonly month: number;

  /**
   * Year of date. Must be from 1 to 9999.
   *
   * @schema StorageTransferJobSpecScheduleScheduleEndDate#year
   */
  readonly year: number;

}

/**
 * Converts an object of type 'StorageTransferJobSpecScheduleScheduleEndDate' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StorageTransferJobSpecScheduleScheduleEndDate(obj: StorageTransferJobSpecScheduleScheduleEndDate | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'day': obj.day,
    'month': obj.month,
    'year': obj.year,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The first day the recurring transfer is scheduled to run. If schedule_start_date is in the past, the transfer will run for the first time on the following day.
 *
 * @schema StorageTransferJobSpecScheduleScheduleStartDate
 */
export interface StorageTransferJobSpecScheduleScheduleStartDate {
  /**
   * Day of month. Must be from 1 to 31 and valid for the year and month.
   *
   * @schema StorageTransferJobSpecScheduleScheduleStartDate#day
   */
  readonly day: number;

  /**
   * Month of year. Must be from 1 to 12.
   *
   * @schema StorageTransferJobSpecScheduleScheduleStartDate#month
   */
  readonly month: number;

  /**
   * Year of date. Must be from 1 to 9999.
   *
   * @schema StorageTransferJobSpecScheduleScheduleStartDate#year
   */
  readonly year: number;

}

/**
 * Converts an object of type 'StorageTransferJobSpecScheduleScheduleStartDate' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StorageTransferJobSpecScheduleScheduleStartDate(obj: StorageTransferJobSpecScheduleScheduleStartDate | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'day': obj.day,
    'month': obj.month,
    'year': obj.year,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The time in UTC at which the transfer will be scheduled to start in a day. Transfers may start later than this time. If not specified, recurring and one-time transfers that are scheduled to run today will run immediately; recurring transfers that are scheduled to run on a future date will start at approximately midnight UTC on that date. Note that when configuring a transfer with the Cloud Platform Console, the transfer's start time in a day is specified in your local timezone.
 *
 * @schema StorageTransferJobSpecScheduleStartTimeOfDay
 */
export interface StorageTransferJobSpecScheduleStartTimeOfDay {
  /**
   * Hours of day in 24 hour format. Should be from 0 to 23.
   *
   * @schema StorageTransferJobSpecScheduleStartTimeOfDay#hours
   */
  readonly hours: number;

  /**
   * Minutes of hour of day. Must be from 0 to 59.
   *
   * @schema StorageTransferJobSpecScheduleStartTimeOfDay#minutes
   */
  readonly minutes: number;

  /**
   * Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
   *
   * @schema StorageTransferJobSpecScheduleStartTimeOfDay#nanos
   */
  readonly nanos: number;

  /**
   * Seconds of minutes of the time. Must normally be from 0 to 59.
   *
   * @schema StorageTransferJobSpecScheduleStartTimeOfDay#seconds
   */
  readonly seconds: number;

}

/**
 * Converts an object of type 'StorageTransferJobSpecScheduleStartTimeOfDay' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StorageTransferJobSpecScheduleStartTimeOfDay(obj: StorageTransferJobSpecScheduleStartTimeOfDay | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'hours': obj.hours,
    'minutes': obj.minutes,
    'nanos': obj.nanos,
    'seconds': obj.seconds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An AWS S3 data source.
 *
 * @schema StorageTransferJobSpecTransferSpecAwsS3DataSource
 */
export interface StorageTransferJobSpecTransferSpecAwsS3DataSource {
  /**
   * AWS credentials block.
   *
   * @schema StorageTransferJobSpecTransferSpecAwsS3DataSource#awsAccessKey
   */
  readonly awsAccessKey?: StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKey;

  /**
   * S3 Bucket name.
   *
   * @schema StorageTransferJobSpecTransferSpecAwsS3DataSource#bucketName
   */
  readonly bucketName: string;

  /**
   * S3 Bucket path in bucket to transfer.
   *
   * @schema StorageTransferJobSpecTransferSpecAwsS3DataSource#path
   */
  readonly path?: string;

  /**
   * The Amazon Resource Name (ARN) of the role to support temporary credentials via 'AssumeRoleWithWebIdentity'. For more information about ARNs, see [IAM ARNs](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-arns). When a role ARN is provided, Transfer Service fetches temporary credentials for the session using a 'AssumeRoleWithWebIdentity' call for the provided role using the [GoogleServiceAccount][] for this project.
   *
   * @schema StorageTransferJobSpecTransferSpecAwsS3DataSource#roleArn
   */
  readonly roleArn?: string;

}

/**
 * Converts an object of type 'StorageTransferJobSpecTransferSpecAwsS3DataSource' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StorageTransferJobSpecTransferSpecAwsS3DataSource(obj: StorageTransferJobSpecTransferSpecAwsS3DataSource | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'awsAccessKey': toJson_StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKey(obj.awsAccessKey),
    'bucketName': obj.bucketName,
    'path': obj.path,
    'roleArn': obj.roleArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An Azure Blob Storage data source.
 *
 * @schema StorageTransferJobSpecTransferSpecAzureBlobStorageDataSource
 */
export interface StorageTransferJobSpecTransferSpecAzureBlobStorageDataSource {
  /**
   * Credentials used to authenticate API requests to Azure.
   *
   * @schema StorageTransferJobSpecTransferSpecAzureBlobStorageDataSource#azureCredentials
   */
  readonly azureCredentials: StorageTransferJobSpecTransferSpecAzureBlobStorageDataSourceAzureCredentials;

  /**
   * The container to transfer from the Azure Storage account.
   *
   * @schema StorageTransferJobSpecTransferSpecAzureBlobStorageDataSource#container
   */
  readonly container: string;

  /**
   * Root path to transfer objects. Must be an empty string or full path name that ends with a '/'. This field is treated as an object prefix. As such, it should generally not begin with a '/'.
   *
   * @schema StorageTransferJobSpecTransferSpecAzureBlobStorageDataSource#path
   */
  readonly path?: string;

  /**
   * The name of the Azure Storage account.
   *
   * @schema StorageTransferJobSpecTransferSpecAzureBlobStorageDataSource#storageAccount
   */
  readonly storageAccount: string;

}

/**
 * Converts an object of type 'StorageTransferJobSpecTransferSpecAzureBlobStorageDataSource' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StorageTransferJobSpecTransferSpecAzureBlobStorageDataSource(obj: StorageTransferJobSpecTransferSpecAzureBlobStorageDataSource | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'azureCredentials': toJson_StorageTransferJobSpecTransferSpecAzureBlobStorageDataSourceAzureCredentials(obj.azureCredentials),
    'container': obj.container,
    'path': obj.path,
    'storageAccount': obj.storageAccount,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Google Cloud Storage data sink.
 *
 * @schema StorageTransferJobSpecTransferSpecGcsDataSink
 */
export interface StorageTransferJobSpecTransferSpecGcsDataSink {
  /**
   * @schema StorageTransferJobSpecTransferSpecGcsDataSink#bucketRef
   */
  readonly bucketRef: StorageTransferJobSpecTransferSpecGcsDataSinkBucketRef;

  /**
   * Google Cloud Storage path in bucket to transfer.
   *
   * @schema StorageTransferJobSpecTransferSpecGcsDataSink#path
   */
  readonly path?: string;

}

/**
 * Converts an object of type 'StorageTransferJobSpecTransferSpecGcsDataSink' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StorageTransferJobSpecTransferSpecGcsDataSink(obj: StorageTransferJobSpecTransferSpecGcsDataSink | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bucketRef': toJson_StorageTransferJobSpecTransferSpecGcsDataSinkBucketRef(obj.bucketRef),
    'path': obj.path,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Google Cloud Storage data source.
 *
 * @schema StorageTransferJobSpecTransferSpecGcsDataSource
 */
export interface StorageTransferJobSpecTransferSpecGcsDataSource {
  /**
   * @schema StorageTransferJobSpecTransferSpecGcsDataSource#bucketRef
   */
  readonly bucketRef: StorageTransferJobSpecTransferSpecGcsDataSourceBucketRef;

  /**
   * Google Cloud Storage path in bucket to transfer.
   *
   * @schema StorageTransferJobSpecTransferSpecGcsDataSource#path
   */
  readonly path?: string;

}

/**
 * Converts an object of type 'StorageTransferJobSpecTransferSpecGcsDataSource' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StorageTransferJobSpecTransferSpecGcsDataSource(obj: StorageTransferJobSpecTransferSpecGcsDataSource | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bucketRef': toJson_StorageTransferJobSpecTransferSpecGcsDataSourceBucketRef(obj.bucketRef),
    'path': obj.path,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A HTTP URL data source.
 *
 * @schema StorageTransferJobSpecTransferSpecHttpDataSource
 */
export interface StorageTransferJobSpecTransferSpecHttpDataSource {
  /**
   * The URL that points to the file that stores the object list entries. This file must allow public access. Currently, only URLs with HTTP and HTTPS schemes are supported.
   *
   * @schema StorageTransferJobSpecTransferSpecHttpDataSource#listUrl
   */
  readonly listUrl: string;

}

/**
 * Converts an object of type 'StorageTransferJobSpecTransferSpecHttpDataSource' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StorageTransferJobSpecTransferSpecHttpDataSource(obj: StorageTransferJobSpecTransferSpecHttpDataSource | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'listUrl': obj.listUrl,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Only objects that satisfy these object conditions are included in the set of data source and data sink objects. Object conditions based on objects' last_modification_time do not exclude objects in a data sink.
 *
 * @schema StorageTransferJobSpecTransferSpecObjectConditions
 */
export interface StorageTransferJobSpecTransferSpecObjectConditions {
  /**
   * exclude_prefixes must follow the requirements described for include_prefixes.
   *
   * @schema StorageTransferJobSpecTransferSpecObjectConditions#excludePrefixes
   */
  readonly excludePrefixes?: string[];

  /**
   * If include_refixes is specified, objects that satisfy the object conditions must have names that start with one of the include_prefixes and that do not start with any of the exclude_prefixes. If include_prefixes is not specified, all objects except those that have names starting with one of the exclude_prefixes must satisfy the object conditions.
   *
   * @schema StorageTransferJobSpecTransferSpecObjectConditions#includePrefixes
   */
  readonly includePrefixes?: string[];

  /**
   * If specified, only objects with a "last modification time" before this timestamp and objects that don't have a "last modification time" are transferred. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
   *
   * @schema StorageTransferJobSpecTransferSpecObjectConditions#lastModifiedBefore
   */
  readonly lastModifiedBefore?: string;

  /**
   * If specified, only objects with a "last modification time" on or after this timestamp and objects that don't have a "last modification time" are transferred. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
   *
   * @schema StorageTransferJobSpecTransferSpecObjectConditions#lastModifiedSince
   */
  readonly lastModifiedSince?: string;

  /**
   * A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
   *
   * @schema StorageTransferJobSpecTransferSpecObjectConditions#maxTimeElapsedSinceLastModification
   */
  readonly maxTimeElapsedSinceLastModification?: string;

  /**
   * A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
   *
   * @schema StorageTransferJobSpecTransferSpecObjectConditions#minTimeElapsedSinceLastModification
   */
  readonly minTimeElapsedSinceLastModification?: string;

}

/**
 * Converts an object of type 'StorageTransferJobSpecTransferSpecObjectConditions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StorageTransferJobSpecTransferSpecObjectConditions(obj: StorageTransferJobSpecTransferSpecObjectConditions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'excludePrefixes': obj.excludePrefixes?.map(y => y),
    'includePrefixes': obj.includePrefixes?.map(y => y),
    'lastModifiedBefore': obj.lastModifiedBefore,
    'lastModifiedSince': obj.lastModifiedSince,
    'maxTimeElapsedSinceLastModification': obj.maxTimeElapsedSinceLastModification,
    'minTimeElapsedSinceLastModification': obj.minTimeElapsedSinceLastModification,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A POSIX filesystem data sink.
 *
 * @schema StorageTransferJobSpecTransferSpecPosixDataSink
 */
export interface StorageTransferJobSpecTransferSpecPosixDataSink {
  /**
   * Root directory path to the filesystem.
   *
   * @schema StorageTransferJobSpecTransferSpecPosixDataSink#rootDirectory
   */
  readonly rootDirectory: string;

}

/**
 * Converts an object of type 'StorageTransferJobSpecTransferSpecPosixDataSink' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StorageTransferJobSpecTransferSpecPosixDataSink(obj: StorageTransferJobSpecTransferSpecPosixDataSink | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'rootDirectory': obj.rootDirectory,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A POSIX filesystem data source.
 *
 * @schema StorageTransferJobSpecTransferSpecPosixDataSource
 */
export interface StorageTransferJobSpecTransferSpecPosixDataSource {
  /**
   * Root directory path to the filesystem.
   *
   * @schema StorageTransferJobSpecTransferSpecPosixDataSource#rootDirectory
   */
  readonly rootDirectory: string;

}

/**
 * Converts an object of type 'StorageTransferJobSpecTransferSpecPosixDataSource' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StorageTransferJobSpecTransferSpecPosixDataSource(obj: StorageTransferJobSpecTransferSpecPosixDataSource | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'rootDirectory': obj.rootDirectory,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Characteristics of how to treat files from datasource and sink during job. If the option delete_objects_unique_in_sink is true, object conditions based on objects' last_modification_time are ignored and do not exclude objects in a data source or a data sink.
 *
 * @schema StorageTransferJobSpecTransferSpecTransferOptions
 */
export interface StorageTransferJobSpecTransferSpecTransferOptions {
  /**
   * Whether objects should be deleted from the source after they are transferred to the sink. Note that this option and delete_objects_unique_in_sink are mutually exclusive.
   *
   * @schema StorageTransferJobSpecTransferSpecTransferOptions#deleteObjectsFromSourceAfterTransfer
   */
  readonly deleteObjectsFromSourceAfterTransfer?: boolean;

  /**
   * Whether objects that exist only in the sink should be deleted. Note that this option and delete_objects_from_source_after_transfer are mutually exclusive.
   *
   * @schema StorageTransferJobSpecTransferSpecTransferOptions#deleteObjectsUniqueInSink
   */
  readonly deleteObjectsUniqueInSink?: boolean;

  /**
   * Whether overwriting objects that already exist in the sink is allowed.
   *
   * @schema StorageTransferJobSpecTransferSpecTransferOptions#overwriteObjectsAlreadyExistingInSink
   */
  readonly overwriteObjectsAlreadyExistingInSink?: boolean;

  /**
   * When to overwrite objects that already exist in the sink. If not set, overwrite behavior is determined by overwriteObjectsAlreadyExistingInSink.
   *
   * @schema StorageTransferJobSpecTransferSpecTransferOptions#overwriteWhen
   */
  readonly overwriteWhen?: string;

}

/**
 * Converts an object of type 'StorageTransferJobSpecTransferSpecTransferOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StorageTransferJobSpecTransferSpecTransferOptions(obj: StorageTransferJobSpecTransferSpecTransferOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deleteObjectsFromSourceAfterTransfer': obj.deleteObjectsFromSourceAfterTransfer,
    'deleteObjectsUniqueInSink': obj.deleteObjectsUniqueInSink,
    'overwriteObjectsAlreadyExistingInSink': obj.overwriteObjectsAlreadyExistingInSink,
    'overwriteWhen': obj.overwriteWhen,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * AWS credentials block.
 *
 * @schema StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKey
 */
export interface StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKey {
  /**
   * AWS Key ID.
   *
   * @schema StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKey#accessKeyId
   */
  readonly accessKeyId: StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeyAccessKeyId;

  /**
   * AWS Secret Access Key.
   *
   * @schema StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKey#secretAccessKey
   */
  readonly secretAccessKey: StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeySecretAccessKey;

}

/**
 * Converts an object of type 'StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKey' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKey(obj: StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKey | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'accessKeyId': toJson_StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeyAccessKeyId(obj.accessKeyId),
    'secretAccessKey': toJson_StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeySecretAccessKey(obj.secretAccessKey),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Credentials used to authenticate API requests to Azure.
 *
 * @schema StorageTransferJobSpecTransferSpecAzureBlobStorageDataSourceAzureCredentials
 */
export interface StorageTransferJobSpecTransferSpecAzureBlobStorageDataSourceAzureCredentials {
  /**
   * Azure shared access signature.
   *
   * @schema StorageTransferJobSpecTransferSpecAzureBlobStorageDataSourceAzureCredentials#sasToken
   */
  readonly sasToken: StorageTransferJobSpecTransferSpecAzureBlobStorageDataSourceAzureCredentialsSasToken;

}

/**
 * Converts an object of type 'StorageTransferJobSpecTransferSpecAzureBlobStorageDataSourceAzureCredentials' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StorageTransferJobSpecTransferSpecAzureBlobStorageDataSourceAzureCredentials(obj: StorageTransferJobSpecTransferSpecAzureBlobStorageDataSourceAzureCredentials | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'sasToken': toJson_StorageTransferJobSpecTransferSpecAzureBlobStorageDataSourceAzureCredentialsSasToken(obj.sasToken),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema StorageTransferJobSpecTransferSpecGcsDataSinkBucketRef
 */
export interface StorageTransferJobSpecTransferSpecGcsDataSinkBucketRef {
  /**
   * Allowed value: The `name` field of a `StorageBucket` resource.
   *
   * @schema StorageTransferJobSpecTransferSpecGcsDataSinkBucketRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema StorageTransferJobSpecTransferSpecGcsDataSinkBucketRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema StorageTransferJobSpecTransferSpecGcsDataSinkBucketRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'StorageTransferJobSpecTransferSpecGcsDataSinkBucketRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StorageTransferJobSpecTransferSpecGcsDataSinkBucketRef(obj: StorageTransferJobSpecTransferSpecGcsDataSinkBucketRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema StorageTransferJobSpecTransferSpecGcsDataSourceBucketRef
 */
export interface StorageTransferJobSpecTransferSpecGcsDataSourceBucketRef {
  /**
   * Allowed value: The `name` field of a `StorageBucket` resource.
   *
   * @schema StorageTransferJobSpecTransferSpecGcsDataSourceBucketRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema StorageTransferJobSpecTransferSpecGcsDataSourceBucketRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema StorageTransferJobSpecTransferSpecGcsDataSourceBucketRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'StorageTransferJobSpecTransferSpecGcsDataSourceBucketRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StorageTransferJobSpecTransferSpecGcsDataSourceBucketRef(obj: StorageTransferJobSpecTransferSpecGcsDataSourceBucketRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * AWS Key ID.
 *
 * @schema StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeyAccessKeyId
 */
export interface StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeyAccessKeyId {
  /**
   * Value of the field. Cannot be used if 'valueFrom' is specified.
   *
   * @schema StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeyAccessKeyId#value
   */
  readonly value?: string;

  /**
   * Source for the field's value. Cannot be used if 'value' is specified.
   *
   * @schema StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeyAccessKeyId#valueFrom
   */
  readonly valueFrom?: StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeyAccessKeyIdValueFrom;

}

/**
 * Converts an object of type 'StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeyAccessKeyId' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeyAccessKeyId(obj: StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeyAccessKeyId | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'value': obj.value,
    'valueFrom': toJson_StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeyAccessKeyIdValueFrom(obj.valueFrom),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * AWS Secret Access Key.
 *
 * @schema StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeySecretAccessKey
 */
export interface StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeySecretAccessKey {
  /**
   * Value of the field. Cannot be used if 'valueFrom' is specified.
   *
   * @schema StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeySecretAccessKey#value
   */
  readonly value?: string;

  /**
   * Source for the field's value. Cannot be used if 'value' is specified.
   *
   * @schema StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeySecretAccessKey#valueFrom
   */
  readonly valueFrom?: StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeySecretAccessKeyValueFrom;

}

/**
 * Converts an object of type 'StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeySecretAccessKey' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeySecretAccessKey(obj: StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeySecretAccessKey | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'value': obj.value,
    'valueFrom': toJson_StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeySecretAccessKeyValueFrom(obj.valueFrom),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Azure shared access signature.
 *
 * @schema StorageTransferJobSpecTransferSpecAzureBlobStorageDataSourceAzureCredentialsSasToken
 */
export interface StorageTransferJobSpecTransferSpecAzureBlobStorageDataSourceAzureCredentialsSasToken {
  /**
   * Value of the field. Cannot be used if 'valueFrom' is specified.
   *
   * @schema StorageTransferJobSpecTransferSpecAzureBlobStorageDataSourceAzureCredentialsSasToken#value
   */
  readonly value?: string;

  /**
   * Source for the field's value. Cannot be used if 'value' is specified.
   *
   * @schema StorageTransferJobSpecTransferSpecAzureBlobStorageDataSourceAzureCredentialsSasToken#valueFrom
   */
  readonly valueFrom?: StorageTransferJobSpecTransferSpecAzureBlobStorageDataSourceAzureCredentialsSasTokenValueFrom;

}

/**
 * Converts an object of type 'StorageTransferJobSpecTransferSpecAzureBlobStorageDataSourceAzureCredentialsSasToken' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StorageTransferJobSpecTransferSpecAzureBlobStorageDataSourceAzureCredentialsSasToken(obj: StorageTransferJobSpecTransferSpecAzureBlobStorageDataSourceAzureCredentialsSasToken | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'value': obj.value,
    'valueFrom': toJson_StorageTransferJobSpecTransferSpecAzureBlobStorageDataSourceAzureCredentialsSasTokenValueFrom(obj.valueFrom),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Source for the field's value. Cannot be used if 'value' is specified.
 *
 * @schema StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeyAccessKeyIdValueFrom
 */
export interface StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeyAccessKeyIdValueFrom {
  /**
   * Reference to a value with the given key in the given Secret in the resource's namespace.
   *
   * @schema StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeyAccessKeyIdValueFrom#secretKeyRef
   */
  readonly secretKeyRef?: StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeyAccessKeyIdValueFromSecretKeyRef;

}

/**
 * Converts an object of type 'StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeyAccessKeyIdValueFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeyAccessKeyIdValueFrom(obj: StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeyAccessKeyIdValueFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'secretKeyRef': toJson_StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeyAccessKeyIdValueFromSecretKeyRef(obj.secretKeyRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Source for the field's value. Cannot be used if 'value' is specified.
 *
 * @schema StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeySecretAccessKeyValueFrom
 */
export interface StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeySecretAccessKeyValueFrom {
  /**
   * Reference to a value with the given key in the given Secret in the resource's namespace.
   *
   * @schema StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeySecretAccessKeyValueFrom#secretKeyRef
   */
  readonly secretKeyRef?: StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeySecretAccessKeyValueFromSecretKeyRef;

}

/**
 * Converts an object of type 'StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeySecretAccessKeyValueFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeySecretAccessKeyValueFrom(obj: StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeySecretAccessKeyValueFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'secretKeyRef': toJson_StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeySecretAccessKeyValueFromSecretKeyRef(obj.secretKeyRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Source for the field's value. Cannot be used if 'value' is specified.
 *
 * @schema StorageTransferJobSpecTransferSpecAzureBlobStorageDataSourceAzureCredentialsSasTokenValueFrom
 */
export interface StorageTransferJobSpecTransferSpecAzureBlobStorageDataSourceAzureCredentialsSasTokenValueFrom {
  /**
   * Reference to a value with the given key in the given Secret in the resource's namespace.
   *
   * @schema StorageTransferJobSpecTransferSpecAzureBlobStorageDataSourceAzureCredentialsSasTokenValueFrom#secretKeyRef
   */
  readonly secretKeyRef?: StorageTransferJobSpecTransferSpecAzureBlobStorageDataSourceAzureCredentialsSasTokenValueFromSecretKeyRef;

}

/**
 * Converts an object of type 'StorageTransferJobSpecTransferSpecAzureBlobStorageDataSourceAzureCredentialsSasTokenValueFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StorageTransferJobSpecTransferSpecAzureBlobStorageDataSourceAzureCredentialsSasTokenValueFrom(obj: StorageTransferJobSpecTransferSpecAzureBlobStorageDataSourceAzureCredentialsSasTokenValueFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'secretKeyRef': toJson_StorageTransferJobSpecTransferSpecAzureBlobStorageDataSourceAzureCredentialsSasTokenValueFromSecretKeyRef(obj.secretKeyRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to a value with the given key in the given Secret in the resource's namespace.
 *
 * @schema StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeyAccessKeyIdValueFromSecretKeyRef
 */
export interface StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeyAccessKeyIdValueFromSecretKeyRef {
  /**
   * Key that identifies the value to be extracted.
   *
   * @schema StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeyAccessKeyIdValueFromSecretKeyRef#key
   */
  readonly key: string;

  /**
   * Name of the Secret to extract a value from.
   *
   * @schema StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeyAccessKeyIdValueFromSecretKeyRef#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeyAccessKeyIdValueFromSecretKeyRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeyAccessKeyIdValueFromSecretKeyRef(obj: StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeyAccessKeyIdValueFromSecretKeyRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to a value with the given key in the given Secret in the resource's namespace.
 *
 * @schema StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeySecretAccessKeyValueFromSecretKeyRef
 */
export interface StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeySecretAccessKeyValueFromSecretKeyRef {
  /**
   * Key that identifies the value to be extracted.
   *
   * @schema StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeySecretAccessKeyValueFromSecretKeyRef#key
   */
  readonly key: string;

  /**
   * Name of the Secret to extract a value from.
   *
   * @schema StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeySecretAccessKeyValueFromSecretKeyRef#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeySecretAccessKeyValueFromSecretKeyRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeySecretAccessKeyValueFromSecretKeyRef(obj: StorageTransferJobSpecTransferSpecAwsS3DataSourceAwsAccessKeySecretAccessKeyValueFromSecretKeyRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to a value with the given key in the given Secret in the resource's namespace.
 *
 * @schema StorageTransferJobSpecTransferSpecAzureBlobStorageDataSourceAzureCredentialsSasTokenValueFromSecretKeyRef
 */
export interface StorageTransferJobSpecTransferSpecAzureBlobStorageDataSourceAzureCredentialsSasTokenValueFromSecretKeyRef {
  /**
   * Key that identifies the value to be extracted.
   *
   * @schema StorageTransferJobSpecTransferSpecAzureBlobStorageDataSourceAzureCredentialsSasTokenValueFromSecretKeyRef#key
   */
  readonly key: string;

  /**
   * Name of the Secret to extract a value from.
   *
   * @schema StorageTransferJobSpecTransferSpecAzureBlobStorageDataSourceAzureCredentialsSasTokenValueFromSecretKeyRef#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'StorageTransferJobSpecTransferSpecAzureBlobStorageDataSourceAzureCredentialsSasTokenValueFromSecretKeyRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StorageTransferJobSpecTransferSpecAzureBlobStorageDataSourceAzureCredentialsSasTokenValueFromSecretKeyRef(obj: StorageTransferJobSpecTransferSpecAzureBlobStorageDataSourceAzureCredentialsSasTokenValueFromSecretKeyRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

