// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 *
 *
 * @schema BinaryAuthorizationAttestor
 */
export class BinaryAuthorizationAttestor extends ApiObject {
  /**
   * Returns the apiVersion and kind for "BinaryAuthorizationAttestor"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'binaryauthorization.cnrm.cloud.google.com/v1beta1',
    kind: 'BinaryAuthorizationAttestor',
  }

  /**
   * Renders a Kubernetes manifest for "BinaryAuthorizationAttestor".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: BinaryAuthorizationAttestorProps): any {
    return {
      ...BinaryAuthorizationAttestor.GVK,
      ...toJson_BinaryAuthorizationAttestorProps(props),
    };
  }

  /**
   * Defines a "BinaryAuthorizationAttestor" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: BinaryAuthorizationAttestorProps) {
    super(scope, id, {
      ...BinaryAuthorizationAttestor.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...BinaryAuthorizationAttestor.GVK,
      ...toJson_BinaryAuthorizationAttestorProps(resolved),
    };
  }
}

/**
 * @schema BinaryAuthorizationAttestor
 */
export interface BinaryAuthorizationAttestorProps {
  /**
   * @schema BinaryAuthorizationAttestor#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema BinaryAuthorizationAttestor#spec
   */
  readonly spec: BinaryAuthorizationAttestorSpec;

}

/**
 * Converts an object of type 'BinaryAuthorizationAttestorProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BinaryAuthorizationAttestorProps(obj: BinaryAuthorizationAttestorProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_BinaryAuthorizationAttestorSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema BinaryAuthorizationAttestorSpec
 */
export interface BinaryAuthorizationAttestorSpec {
  /**
   * Optional. A descriptive comment. This field may be updated. The field may be displayed in chooser dialogs.
   *
   * @schema BinaryAuthorizationAttestorSpec#description
   */
  readonly description?: string;

  /**
   * Immutable. The Project that this resource belongs to.
   *
   * @schema BinaryAuthorizationAttestorSpec#projectRef
   */
  readonly projectRef: BinaryAuthorizationAttestorSpecProjectRef;

  /**
   * Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
   *
   * @schema BinaryAuthorizationAttestorSpec#resourceID
   */
  readonly resourceId?: string;

  /**
   * This specifies how an attestation will be read, and how it will be used during policy enforcement.
   *
   * @schema BinaryAuthorizationAttestorSpec#userOwnedDrydockNote
   */
  readonly userOwnedDrydockNote?: BinaryAuthorizationAttestorSpecUserOwnedDrydockNote;

}

/**
 * Converts an object of type 'BinaryAuthorizationAttestorSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BinaryAuthorizationAttestorSpec(obj: BinaryAuthorizationAttestorSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'description': obj.description,
    'projectRef': toJson_BinaryAuthorizationAttestorSpecProjectRef(obj.projectRef),
    'resourceID': obj.resourceId,
    'userOwnedDrydockNote': toJson_BinaryAuthorizationAttestorSpecUserOwnedDrydockNote(obj.userOwnedDrydockNote),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. The Project that this resource belongs to.
 *
 * @schema BinaryAuthorizationAttestorSpecProjectRef
 */
export interface BinaryAuthorizationAttestorSpecProjectRef {
  /**
   * The project for the resource
   *
   * Allowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).
   *
   * @schema BinaryAuthorizationAttestorSpecProjectRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema BinaryAuthorizationAttestorSpecProjectRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema BinaryAuthorizationAttestorSpecProjectRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'BinaryAuthorizationAttestorSpecProjectRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BinaryAuthorizationAttestorSpecProjectRef(obj: BinaryAuthorizationAttestorSpecProjectRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * This specifies how an attestation will be read, and how it will be used during policy enforcement.
 *
 * @schema BinaryAuthorizationAttestorSpecUserOwnedDrydockNote
 */
export interface BinaryAuthorizationAttestorSpecUserOwnedDrydockNote {
  /**
   * Immutable.
   *
   * @schema BinaryAuthorizationAttestorSpecUserOwnedDrydockNote#noteRef
   */
  readonly noteRef: BinaryAuthorizationAttestorSpecUserOwnedDrydockNoteNoteRef;

  /**
   * Optional. Public keys that verify attestations signed by this attestor. This field may be updated. If this field is non-empty, one of the specified public keys must verify that an attestation was signed by this attestor for the image specified in the admission request. If this field is empty, this attestor always returns that no valid attestations exist.
   *
   * @schema BinaryAuthorizationAttestorSpecUserOwnedDrydockNote#publicKeys
   */
  readonly publicKeys?: BinaryAuthorizationAttestorSpecUserOwnedDrydockNotePublicKeys[];

}

/**
 * Converts an object of type 'BinaryAuthorizationAttestorSpecUserOwnedDrydockNote' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BinaryAuthorizationAttestorSpecUserOwnedDrydockNote(obj: BinaryAuthorizationAttestorSpecUserOwnedDrydockNote | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'noteRef': toJson_BinaryAuthorizationAttestorSpecUserOwnedDrydockNoteNoteRef(obj.noteRef),
    'publicKeys': obj.publicKeys?.map(y => toJson_BinaryAuthorizationAttestorSpecUserOwnedDrydockNotePublicKeys(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable.
 *
 * @schema BinaryAuthorizationAttestorSpecUserOwnedDrydockNoteNoteRef
 */
export interface BinaryAuthorizationAttestorSpecUserOwnedDrydockNoteNoteRef {
  /**
   * Required. The Drydock resource name of a Attestation. Authority Note, created by the user, in the format: `projects/_/notes/*`. This field may not be updated. An attestation by this attestor is stored as a Grafeas Attestation. Authority Occurrence that names a container image and that links to this Note. Grafeas is an external dependency.
   *
   * Allowed value: The Google Cloud resource name of a `ContainerAnalysisNote` resource (format: `projects/{{project}}/notes/{{name}}`).
   *
   * @schema BinaryAuthorizationAttestorSpecUserOwnedDrydockNoteNoteRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema BinaryAuthorizationAttestorSpecUserOwnedDrydockNoteNoteRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema BinaryAuthorizationAttestorSpecUserOwnedDrydockNoteNoteRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'BinaryAuthorizationAttestorSpecUserOwnedDrydockNoteNoteRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BinaryAuthorizationAttestorSpecUserOwnedDrydockNoteNoteRef(obj: BinaryAuthorizationAttestorSpecUserOwnedDrydockNoteNoteRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema BinaryAuthorizationAttestorSpecUserOwnedDrydockNotePublicKeys
 */
export interface BinaryAuthorizationAttestorSpecUserOwnedDrydockNotePublicKeys {
  /**
   * ASCII-armored representation of a PGP public key, as the entire output by the command `gpg --export --armor foo@example.com` (either LF or CRLF line endings). When using this field, `id` should be left blank. The BinAuthz API handlers will calculate the ID and fill it in automatically. BinAuthz computes this ID as the OpenPGP RFC4880 V4 fingerprint, represented as upper-case hex. If `id` is provided by the caller, it will be overwritten by the API-calculated ID.
   *
   * @schema BinaryAuthorizationAttestorSpecUserOwnedDrydockNotePublicKeys#asciiArmoredPgpPublicKey
   */
  readonly asciiArmoredPgpPublicKey?: string;

  /**
   * Optional. A descriptive comment. This field may be updated.
   *
   * @schema BinaryAuthorizationAttestorSpecUserOwnedDrydockNotePublicKeys#comment
   */
  readonly comment?: string;

  /**
   * The ID of this public key. Signatures verified by BinAuthz must include the ID of the public key that can be used to verify them, and that ID must match the contents of this field exactly. Additional restrictions on this field can be imposed based on which public key type is encapsulated. See the documentation on `public_key` cases below for details.
   *
   * @schema BinaryAuthorizationAttestorSpecUserOwnedDrydockNotePublicKeys#id
   */
  readonly id?: string;

  /**
   * A raw PKIX SubjectPublicKeyInfo format public key. NOTE: `id` may be explicitly provided by the caller when using this type of public key, but it MUST be a valid RFC3986 URI. If `id` is left blank, a default one will be computed based on the digest of the DER encoding of the public key.
   *
   * @schema BinaryAuthorizationAttestorSpecUserOwnedDrydockNotePublicKeys#pkixPublicKey
   */
  readonly pkixPublicKey?: BinaryAuthorizationAttestorSpecUserOwnedDrydockNotePublicKeysPkixPublicKey;

}

/**
 * Converts an object of type 'BinaryAuthorizationAttestorSpecUserOwnedDrydockNotePublicKeys' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BinaryAuthorizationAttestorSpecUserOwnedDrydockNotePublicKeys(obj: BinaryAuthorizationAttestorSpecUserOwnedDrydockNotePublicKeys | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'asciiArmoredPgpPublicKey': obj.asciiArmoredPgpPublicKey,
    'comment': obj.comment,
    'id': obj.id,
    'pkixPublicKey': toJson_BinaryAuthorizationAttestorSpecUserOwnedDrydockNotePublicKeysPkixPublicKey(obj.pkixPublicKey),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A raw PKIX SubjectPublicKeyInfo format public key. NOTE: `id` may be explicitly provided by the caller when using this type of public key, but it MUST be a valid RFC3986 URI. If `id` is left blank, a default one will be computed based on the digest of the DER encoding of the public key.
 *
 * @schema BinaryAuthorizationAttestorSpecUserOwnedDrydockNotePublicKeysPkixPublicKey
 */
export interface BinaryAuthorizationAttestorSpecUserOwnedDrydockNotePublicKeysPkixPublicKey {
  /**
   * A PEM-encoded public key, as described in https://tools.ietf.org/html/rfc7468#section-13
   *
   * @schema BinaryAuthorizationAttestorSpecUserOwnedDrydockNotePublicKeysPkixPublicKey#publicKeyPem
   */
  readonly publicKeyPem?: string;

  /**
   * The signature algorithm used to verify a message against a signature using this key. These signature algorithm must match the structure and any object identifiers encoded in `public_key_pem` (i.e. this algorithm must match that of the public key). Possible values: SIGNATURE_ALGORITHM_UNSPECIFIED, RSA_PSS_2048_SHA256, RSA_PSS_3072_SHA256, RSA_PSS_4096_SHA256, RSA_PSS_4096_SHA512, RSA_SIGN_PKCS1_2048_SHA256, RSA_SIGN_PKCS1_3072_SHA256, RSA_SIGN_PKCS1_4096_SHA256, RSA_SIGN_PKCS1_4096_SHA512, ECDSA_P256_SHA256, EC_SIGN_P256_SHA256, ECDSA_P384_SHA384, EC_SIGN_P384_SHA384, ECDSA_P521_SHA512, EC_SIGN_P521_SHA512
   *
   * @schema BinaryAuthorizationAttestorSpecUserOwnedDrydockNotePublicKeysPkixPublicKey#signatureAlgorithm
   */
  readonly signatureAlgorithm?: string;

}

/**
 * Converts an object of type 'BinaryAuthorizationAttestorSpecUserOwnedDrydockNotePublicKeysPkixPublicKey' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BinaryAuthorizationAttestorSpecUserOwnedDrydockNotePublicKeysPkixPublicKey(obj: BinaryAuthorizationAttestorSpecUserOwnedDrydockNotePublicKeysPkixPublicKey | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'publicKeyPem': obj.publicKeyPem,
    'signatureAlgorithm': obj.signatureAlgorithm,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema BinaryAuthorizationPolicy
 */
export class BinaryAuthorizationPolicy extends ApiObject {
  /**
   * Returns the apiVersion and kind for "BinaryAuthorizationPolicy"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'binaryauthorization.cnrm.cloud.google.com/v1beta1',
    kind: 'BinaryAuthorizationPolicy',
  }

  /**
   * Renders a Kubernetes manifest for "BinaryAuthorizationPolicy".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: BinaryAuthorizationPolicyProps): any {
    return {
      ...BinaryAuthorizationPolicy.GVK,
      ...toJson_BinaryAuthorizationPolicyProps(props),
    };
  }

  /**
   * Defines a "BinaryAuthorizationPolicy" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: BinaryAuthorizationPolicyProps) {
    super(scope, id, {
      ...BinaryAuthorizationPolicy.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...BinaryAuthorizationPolicy.GVK,
      ...toJson_BinaryAuthorizationPolicyProps(resolved),
    };
  }
}

/**
 * @schema BinaryAuthorizationPolicy
 */
export interface BinaryAuthorizationPolicyProps {
  /**
   * @schema BinaryAuthorizationPolicy#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema BinaryAuthorizationPolicy#spec
   */
  readonly spec: BinaryAuthorizationPolicySpec;

}

/**
 * Converts an object of type 'BinaryAuthorizationPolicyProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BinaryAuthorizationPolicyProps(obj: BinaryAuthorizationPolicyProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_BinaryAuthorizationPolicySpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema BinaryAuthorizationPolicySpec
 */
export interface BinaryAuthorizationPolicySpec {
  /**
   * Optional. Admission policy allowlisting. A matching admission request will always be permitted. This feature is typically used to exclude Google or third-party infrastructure images from Binary Authorization policies.
   *
   * @schema BinaryAuthorizationPolicySpec#admissionWhitelistPatterns
   */
  readonly admissionWhitelistPatterns?: BinaryAuthorizationPolicySpecAdmissionWhitelistPatterns[];

  /**
   * Optional. Per-cluster admission rules. Cluster spec format: location.clusterId. There can be at most one admission rule per cluster spec. A location is either a compute zone (e.g. us-central1-a) or a region (e.g. us-central1). For clusterId syntax restrictions see https://cloud.google.com/container-engine/reference/rest/v1/projects.zones.clusters.
   *
   * @schema BinaryAuthorizationPolicySpec#clusterAdmissionRules
   */
  readonly clusterAdmissionRules?: { [key: string]: BinaryAuthorizationPolicySpecClusterAdmissionRules };

  /**
   * Required. Default admission rule for a cluster without a per-cluster, per-kubernetes-service-account, or per-istio-service-identity admission rule.
   *
   * @schema BinaryAuthorizationPolicySpec#defaultAdmissionRule
   */
  readonly defaultAdmissionRule: BinaryAuthorizationPolicySpecDefaultAdmissionRule;

  /**
   * Optional. A descriptive comment.
   *
   * @schema BinaryAuthorizationPolicySpec#description
   */
  readonly description?: string;

  /**
   * Optional. Controls the evaluation of a Google-maintained global admission policy for common system-level images. Images not covered by the global policy will be subject to the project admission policy. This setting has no effect when specified inside a global admission policy. Possible values: GLOBAL_POLICY_EVALUATION_MODE_UNSPECIFIED, ENABLE, DISABLE
   *
   * @schema BinaryAuthorizationPolicySpec#globalPolicyEvaluationMode
   */
  readonly globalPolicyEvaluationMode?: string;

  /**
   * Optional. Per-istio-service-identity admission rules. Istio service identity spec format: spiffe:///ns//sa/ or /ns//sa/ e.g. spiffe://example.com/ns/test-ns/sa/default
   *
   * @schema BinaryAuthorizationPolicySpec#istioServiceIdentityAdmissionRules
   */
  readonly istioServiceIdentityAdmissionRules?: { [key: string]: BinaryAuthorizationPolicySpecIstioServiceIdentityAdmissionRules };

  /**
   * Optional. Per-kubernetes-namespace admission rules. K8s namespace spec format: [a-z.-]+, e.g. 'some-namespace'
   *
   * @schema BinaryAuthorizationPolicySpec#kubernetesNamespaceAdmissionRules
   */
  readonly kubernetesNamespaceAdmissionRules?: { [key: string]: BinaryAuthorizationPolicySpecKubernetesNamespaceAdmissionRules };

  /**
   * Optional. Per-kubernetes-service-account admission rules. Service account spec format: namespace:serviceaccount. e.g. 'test-ns:default'
   *
   * @schema BinaryAuthorizationPolicySpec#kubernetesServiceAccountAdmissionRules
   */
  readonly kubernetesServiceAccountAdmissionRules?: { [key: string]: BinaryAuthorizationPolicySpecKubernetesServiceAccountAdmissionRules };

  /**
   * Immutable. The Project that this resource belongs to.
   *
   * @schema BinaryAuthorizationPolicySpec#projectRef
   */
  readonly projectRef: BinaryAuthorizationPolicySpecProjectRef;

}

/**
 * Converts an object of type 'BinaryAuthorizationPolicySpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BinaryAuthorizationPolicySpec(obj: BinaryAuthorizationPolicySpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'admissionWhitelistPatterns': obj.admissionWhitelistPatterns?.map(y => toJson_BinaryAuthorizationPolicySpecAdmissionWhitelistPatterns(y)),
    'clusterAdmissionRules': ((obj.clusterAdmissionRules) === undefined) ? undefined : (Object.entries(obj.clusterAdmissionRules).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: toJson_BinaryAuthorizationPolicySpecClusterAdmissionRules(i[1]) }), {})),
    'defaultAdmissionRule': toJson_BinaryAuthorizationPolicySpecDefaultAdmissionRule(obj.defaultAdmissionRule),
    'description': obj.description,
    'globalPolicyEvaluationMode': obj.globalPolicyEvaluationMode,
    'istioServiceIdentityAdmissionRules': ((obj.istioServiceIdentityAdmissionRules) === undefined) ? undefined : (Object.entries(obj.istioServiceIdentityAdmissionRules).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: toJson_BinaryAuthorizationPolicySpecIstioServiceIdentityAdmissionRules(i[1]) }), {})),
    'kubernetesNamespaceAdmissionRules': ((obj.kubernetesNamespaceAdmissionRules) === undefined) ? undefined : (Object.entries(obj.kubernetesNamespaceAdmissionRules).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: toJson_BinaryAuthorizationPolicySpecKubernetesNamespaceAdmissionRules(i[1]) }), {})),
    'kubernetesServiceAccountAdmissionRules': ((obj.kubernetesServiceAccountAdmissionRules) === undefined) ? undefined : (Object.entries(obj.kubernetesServiceAccountAdmissionRules).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: toJson_BinaryAuthorizationPolicySpecKubernetesServiceAccountAdmissionRules(i[1]) }), {})),
    'projectRef': toJson_BinaryAuthorizationPolicySpecProjectRef(obj.projectRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema BinaryAuthorizationPolicySpecAdmissionWhitelistPatterns
 */
export interface BinaryAuthorizationPolicySpecAdmissionWhitelistPatterns {
  /**
   * An image name pattern to allowlist, in the form `registry/path/to/image`. This supports a trailing `*` as a wildcard, but this is allowed only in text after the `registry/` part.
   *
   * @schema BinaryAuthorizationPolicySpecAdmissionWhitelistPatterns#namePattern
   */
  readonly namePattern?: string;

}

/**
 * Converts an object of type 'BinaryAuthorizationPolicySpecAdmissionWhitelistPatterns' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BinaryAuthorizationPolicySpecAdmissionWhitelistPatterns(obj: BinaryAuthorizationPolicySpecAdmissionWhitelistPatterns | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'namePattern': obj.namePattern,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema BinaryAuthorizationPolicySpecClusterAdmissionRules
 */
export interface BinaryAuthorizationPolicySpecClusterAdmissionRules {
  /**
   * Required. The action when a pod creation is denied by the admission rule. Possible values: ENFORCEMENT_MODE_UNSPECIFIED, ENFORCED_BLOCK_AND_AUDIT_LOG, DRYRUN_AUDIT_LOG_ONLY
   *
   * @schema BinaryAuthorizationPolicySpecClusterAdmissionRules#enforcementMode
   */
  readonly enforcementMode: string;

  /**
   * Required. How this admission rule will be evaluated. Possible values: ALWAYS_ALLOW, ALWAYS_DENY, REQUIRE_ATTESTATION
   *
   * @schema BinaryAuthorizationPolicySpecClusterAdmissionRules#evaluationMode
   */
  readonly evaluationMode: string;

  /**
   * @schema BinaryAuthorizationPolicySpecClusterAdmissionRules#requireAttestationsBy
   */
  readonly requireAttestationsBy?: BinaryAuthorizationPolicySpecClusterAdmissionRulesRequireAttestationsBy[];

}

/**
 * Converts an object of type 'BinaryAuthorizationPolicySpecClusterAdmissionRules' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BinaryAuthorizationPolicySpecClusterAdmissionRules(obj: BinaryAuthorizationPolicySpecClusterAdmissionRules | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enforcementMode': obj.enforcementMode,
    'evaluationMode': obj.evaluationMode,
    'requireAttestationsBy': obj.requireAttestationsBy?.map(y => toJson_BinaryAuthorizationPolicySpecClusterAdmissionRulesRequireAttestationsBy(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Required. Default admission rule for a cluster without a per-cluster, per-kubernetes-service-account, or per-istio-service-identity admission rule.
 *
 * @schema BinaryAuthorizationPolicySpecDefaultAdmissionRule
 */
export interface BinaryAuthorizationPolicySpecDefaultAdmissionRule {
  /**
   * Required. The action when a pod creation is denied by the admission rule. Possible values: ENFORCEMENT_MODE_UNSPECIFIED, ENFORCED_BLOCK_AND_AUDIT_LOG, DRYRUN_AUDIT_LOG_ONLY
   *
   * @schema BinaryAuthorizationPolicySpecDefaultAdmissionRule#enforcementMode
   */
  readonly enforcementMode: string;

  /**
   * Required. How this admission rule will be evaluated. Possible values: ALWAYS_ALLOW, ALWAYS_DENY, REQUIRE_ATTESTATION
   *
   * @schema BinaryAuthorizationPolicySpecDefaultAdmissionRule#evaluationMode
   */
  readonly evaluationMode: string;

  /**
   * @schema BinaryAuthorizationPolicySpecDefaultAdmissionRule#requireAttestationsBy
   */
  readonly requireAttestationsBy?: BinaryAuthorizationPolicySpecDefaultAdmissionRuleRequireAttestationsBy[];

}

/**
 * Converts an object of type 'BinaryAuthorizationPolicySpecDefaultAdmissionRule' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BinaryAuthorizationPolicySpecDefaultAdmissionRule(obj: BinaryAuthorizationPolicySpecDefaultAdmissionRule | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enforcementMode': obj.enforcementMode,
    'evaluationMode': obj.evaluationMode,
    'requireAttestationsBy': obj.requireAttestationsBy?.map(y => toJson_BinaryAuthorizationPolicySpecDefaultAdmissionRuleRequireAttestationsBy(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema BinaryAuthorizationPolicySpecIstioServiceIdentityAdmissionRules
 */
export interface BinaryAuthorizationPolicySpecIstioServiceIdentityAdmissionRules {
  /**
   * Required. The action when a pod creation is denied by the admission rule. Possible values: ENFORCEMENT_MODE_UNSPECIFIED, ENFORCED_BLOCK_AND_AUDIT_LOG, DRYRUN_AUDIT_LOG_ONLY
   *
   * @schema BinaryAuthorizationPolicySpecIstioServiceIdentityAdmissionRules#enforcementMode
   */
  readonly enforcementMode: string;

  /**
   * Required. How this admission rule will be evaluated. Possible values: ALWAYS_ALLOW, ALWAYS_DENY, REQUIRE_ATTESTATION
   *
   * @schema BinaryAuthorizationPolicySpecIstioServiceIdentityAdmissionRules#evaluationMode
   */
  readonly evaluationMode: string;

  /**
   * @schema BinaryAuthorizationPolicySpecIstioServiceIdentityAdmissionRules#requireAttestationsBy
   */
  readonly requireAttestationsBy?: BinaryAuthorizationPolicySpecIstioServiceIdentityAdmissionRulesRequireAttestationsBy[];

}

/**
 * Converts an object of type 'BinaryAuthorizationPolicySpecIstioServiceIdentityAdmissionRules' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BinaryAuthorizationPolicySpecIstioServiceIdentityAdmissionRules(obj: BinaryAuthorizationPolicySpecIstioServiceIdentityAdmissionRules | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enforcementMode': obj.enforcementMode,
    'evaluationMode': obj.evaluationMode,
    'requireAttestationsBy': obj.requireAttestationsBy?.map(y => toJson_BinaryAuthorizationPolicySpecIstioServiceIdentityAdmissionRulesRequireAttestationsBy(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema BinaryAuthorizationPolicySpecKubernetesNamespaceAdmissionRules
 */
export interface BinaryAuthorizationPolicySpecKubernetesNamespaceAdmissionRules {
  /**
   * Required. The action when a pod creation is denied by the admission rule. Possible values: ENFORCEMENT_MODE_UNSPECIFIED, ENFORCED_BLOCK_AND_AUDIT_LOG, DRYRUN_AUDIT_LOG_ONLY
   *
   * @schema BinaryAuthorizationPolicySpecKubernetesNamespaceAdmissionRules#enforcementMode
   */
  readonly enforcementMode: string;

  /**
   * Required. How this admission rule will be evaluated. Possible values: ALWAYS_ALLOW, ALWAYS_DENY, REQUIRE_ATTESTATION
   *
   * @schema BinaryAuthorizationPolicySpecKubernetesNamespaceAdmissionRules#evaluationMode
   */
  readonly evaluationMode: string;

  /**
   * @schema BinaryAuthorizationPolicySpecKubernetesNamespaceAdmissionRules#requireAttestationsBy
   */
  readonly requireAttestationsBy?: BinaryAuthorizationPolicySpecKubernetesNamespaceAdmissionRulesRequireAttestationsBy[];

}

/**
 * Converts an object of type 'BinaryAuthorizationPolicySpecKubernetesNamespaceAdmissionRules' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BinaryAuthorizationPolicySpecKubernetesNamespaceAdmissionRules(obj: BinaryAuthorizationPolicySpecKubernetesNamespaceAdmissionRules | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enforcementMode': obj.enforcementMode,
    'evaluationMode': obj.evaluationMode,
    'requireAttestationsBy': obj.requireAttestationsBy?.map(y => toJson_BinaryAuthorizationPolicySpecKubernetesNamespaceAdmissionRulesRequireAttestationsBy(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema BinaryAuthorizationPolicySpecKubernetesServiceAccountAdmissionRules
 */
export interface BinaryAuthorizationPolicySpecKubernetesServiceAccountAdmissionRules {
  /**
   * Required. The action when a pod creation is denied by the admission rule. Possible values: ENFORCEMENT_MODE_UNSPECIFIED, ENFORCED_BLOCK_AND_AUDIT_LOG, DRYRUN_AUDIT_LOG_ONLY
   *
   * @schema BinaryAuthorizationPolicySpecKubernetesServiceAccountAdmissionRules#enforcementMode
   */
  readonly enforcementMode: string;

  /**
   * Required. How this admission rule will be evaluated. Possible values: ALWAYS_ALLOW, ALWAYS_DENY, REQUIRE_ATTESTATION
   *
   * @schema BinaryAuthorizationPolicySpecKubernetesServiceAccountAdmissionRules#evaluationMode
   */
  readonly evaluationMode: string;

  /**
   * @schema BinaryAuthorizationPolicySpecKubernetesServiceAccountAdmissionRules#requireAttestationsBy
   */
  readonly requireAttestationsBy?: BinaryAuthorizationPolicySpecKubernetesServiceAccountAdmissionRulesRequireAttestationsBy[];

}

/**
 * Converts an object of type 'BinaryAuthorizationPolicySpecKubernetesServiceAccountAdmissionRules' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BinaryAuthorizationPolicySpecKubernetesServiceAccountAdmissionRules(obj: BinaryAuthorizationPolicySpecKubernetesServiceAccountAdmissionRules | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enforcementMode': obj.enforcementMode,
    'evaluationMode': obj.evaluationMode,
    'requireAttestationsBy': obj.requireAttestationsBy?.map(y => toJson_BinaryAuthorizationPolicySpecKubernetesServiceAccountAdmissionRulesRequireAttestationsBy(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. The Project that this resource belongs to.
 *
 * @schema BinaryAuthorizationPolicySpecProjectRef
 */
export interface BinaryAuthorizationPolicySpecProjectRef {
  /**
   * The project of the resource.
   *
   * Allowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).
   *
   * @schema BinaryAuthorizationPolicySpecProjectRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema BinaryAuthorizationPolicySpecProjectRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema BinaryAuthorizationPolicySpecProjectRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'BinaryAuthorizationPolicySpecProjectRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BinaryAuthorizationPolicySpecProjectRef(obj: BinaryAuthorizationPolicySpecProjectRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema BinaryAuthorizationPolicySpecClusterAdmissionRulesRequireAttestationsBy
 */
export interface BinaryAuthorizationPolicySpecClusterAdmissionRulesRequireAttestationsBy {
  /**
   * Allowed value: The Google Cloud resource name of a `BinaryAuthorizationAttestor` resource (format: `projects/{{project}}/attestors/{{name}}`).
   *
   * @schema BinaryAuthorizationPolicySpecClusterAdmissionRulesRequireAttestationsBy#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema BinaryAuthorizationPolicySpecClusterAdmissionRulesRequireAttestationsBy#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema BinaryAuthorizationPolicySpecClusterAdmissionRulesRequireAttestationsBy#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'BinaryAuthorizationPolicySpecClusterAdmissionRulesRequireAttestationsBy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BinaryAuthorizationPolicySpecClusterAdmissionRulesRequireAttestationsBy(obj: BinaryAuthorizationPolicySpecClusterAdmissionRulesRequireAttestationsBy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema BinaryAuthorizationPolicySpecDefaultAdmissionRuleRequireAttestationsBy
 */
export interface BinaryAuthorizationPolicySpecDefaultAdmissionRuleRequireAttestationsBy {
  /**
   * Allowed value: The Google Cloud resource name of a `BinaryAuthorizationAttestor` resource (format: `projects/{{project}}/attestors/{{name}}`).
   *
   * @schema BinaryAuthorizationPolicySpecDefaultAdmissionRuleRequireAttestationsBy#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema BinaryAuthorizationPolicySpecDefaultAdmissionRuleRequireAttestationsBy#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema BinaryAuthorizationPolicySpecDefaultAdmissionRuleRequireAttestationsBy#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'BinaryAuthorizationPolicySpecDefaultAdmissionRuleRequireAttestationsBy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BinaryAuthorizationPolicySpecDefaultAdmissionRuleRequireAttestationsBy(obj: BinaryAuthorizationPolicySpecDefaultAdmissionRuleRequireAttestationsBy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema BinaryAuthorizationPolicySpecIstioServiceIdentityAdmissionRulesRequireAttestationsBy
 */
export interface BinaryAuthorizationPolicySpecIstioServiceIdentityAdmissionRulesRequireAttestationsBy {
  /**
   * Allowed value: The Google Cloud resource name of a `BinaryAuthorizationAttestor` resource (format: `projects/{{project}}/attestors/{{name}}`).
   *
   * @schema BinaryAuthorizationPolicySpecIstioServiceIdentityAdmissionRulesRequireAttestationsBy#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema BinaryAuthorizationPolicySpecIstioServiceIdentityAdmissionRulesRequireAttestationsBy#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema BinaryAuthorizationPolicySpecIstioServiceIdentityAdmissionRulesRequireAttestationsBy#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'BinaryAuthorizationPolicySpecIstioServiceIdentityAdmissionRulesRequireAttestationsBy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BinaryAuthorizationPolicySpecIstioServiceIdentityAdmissionRulesRequireAttestationsBy(obj: BinaryAuthorizationPolicySpecIstioServiceIdentityAdmissionRulesRequireAttestationsBy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema BinaryAuthorizationPolicySpecKubernetesNamespaceAdmissionRulesRequireAttestationsBy
 */
export interface BinaryAuthorizationPolicySpecKubernetesNamespaceAdmissionRulesRequireAttestationsBy {
  /**
   * Allowed value: The Google Cloud resource name of a `BinaryAuthorizationAttestor` resource (format: `projects/{{project}}/attestors/{{name}}`).
   *
   * @schema BinaryAuthorizationPolicySpecKubernetesNamespaceAdmissionRulesRequireAttestationsBy#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema BinaryAuthorizationPolicySpecKubernetesNamespaceAdmissionRulesRequireAttestationsBy#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema BinaryAuthorizationPolicySpecKubernetesNamespaceAdmissionRulesRequireAttestationsBy#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'BinaryAuthorizationPolicySpecKubernetesNamespaceAdmissionRulesRequireAttestationsBy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BinaryAuthorizationPolicySpecKubernetesNamespaceAdmissionRulesRequireAttestationsBy(obj: BinaryAuthorizationPolicySpecKubernetesNamespaceAdmissionRulesRequireAttestationsBy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema BinaryAuthorizationPolicySpecKubernetesServiceAccountAdmissionRulesRequireAttestationsBy
 */
export interface BinaryAuthorizationPolicySpecKubernetesServiceAccountAdmissionRulesRequireAttestationsBy {
  /**
   * Allowed value: The Google Cloud resource name of a `BinaryAuthorizationAttestor` resource (format: `projects/{{project}}/attestors/{{name}}`).
   *
   * @schema BinaryAuthorizationPolicySpecKubernetesServiceAccountAdmissionRulesRequireAttestationsBy#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema BinaryAuthorizationPolicySpecKubernetesServiceAccountAdmissionRulesRequireAttestationsBy#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema BinaryAuthorizationPolicySpecKubernetesServiceAccountAdmissionRulesRequireAttestationsBy#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'BinaryAuthorizationPolicySpecKubernetesServiceAccountAdmissionRulesRequireAttestationsBy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BinaryAuthorizationPolicySpecKubernetesServiceAccountAdmissionRulesRequireAttestationsBy(obj: BinaryAuthorizationPolicySpecKubernetesServiceAccountAdmissionRulesRequireAttestationsBy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

