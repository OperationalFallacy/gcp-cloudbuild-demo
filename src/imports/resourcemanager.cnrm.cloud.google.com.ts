// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 *
 *
 * @schema Folder
 */
export class Folder extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Folder"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'resourcemanager.cnrm.cloud.google.com/v1beta1',
    kind: 'Folder',
  }

  /**
   * Renders a Kubernetes manifest for "Folder".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: FolderProps): any {
    return {
      ...Folder.GVK,
      ...toJson_FolderProps(props),
    };
  }

  /**
   * Defines a "Folder" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: FolderProps) {
    super(scope, id, {
      ...Folder.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Folder.GVK,
      ...toJson_FolderProps(resolved),
    };
  }
}

/**
 * @schema Folder
 */
export interface FolderProps {
  /**
   * @schema Folder#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema Folder#spec
   */
  readonly spec: FolderSpec;

}

/**
 * Converts an object of type 'FolderProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_FolderProps(obj: FolderProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_FolderSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema FolderSpec
 */
export interface FolderSpec {
  /**
   * The folder's display name. A folder's display name must be unique amongst its siblings, e.g. no two folders with the same parent can share the same display name. The display name must start and end with a letter or digit, may contain letters, digits, spaces, hyphens and underscores and can be no longer than 30 characters.
   *
   * @schema FolderSpec#displayName
   */
  readonly displayName: string;

  /**
   * The folder that this resource belongs to. Changing this forces the
   * resource to be migrated to the newly specified folder. Only one of
   * folderRef or organizationRef may be specified.
   *
   * @schema FolderSpec#folderRef
   */
  readonly folderRef?: FolderSpecFolderRef;

  /**
   * The organization that this resource belongs to. Changing this
   * forces the resource to be migrated to the newly specified
   * organization. Only one of folderRef or organizationRef may be
   * specified.
   *
   * @schema FolderSpec#organizationRef
   */
  readonly organizationRef?: FolderSpecOrganizationRef;

  /**
   * Immutable. Optional. The service-generated name of the resource. Used for acquisition only. Leave unset to create a new resource.
   *
   * @schema FolderSpec#resourceID
   */
  readonly resourceId?: string;

}

/**
 * Converts an object of type 'FolderSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_FolderSpec(obj: FolderSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'displayName': obj.displayName,
    'folderRef': toJson_FolderSpecFolderRef(obj.folderRef),
    'organizationRef': toJson_FolderSpecOrganizationRef(obj.organizationRef),
    'resourceID': obj.resourceId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The folder that this resource belongs to. Changing this forces the
 * resource to be migrated to the newly specified folder. Only one of
 * folderRef or organizationRef may be specified.
 *
 * @schema FolderSpecFolderRef
 */
export interface FolderSpecFolderRef {
  /**
   * Allowed value: The `folderId` field of a `Folder` resource.
   *
   * @schema FolderSpecFolderRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema FolderSpecFolderRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema FolderSpecFolderRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'FolderSpecFolderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_FolderSpecFolderRef(obj: FolderSpecFolderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The organization that this resource belongs to. Changing this
 * forces the resource to be migrated to the newly specified
 * organization. Only one of folderRef or organizationRef may be
 * specified.
 *
 * @schema FolderSpecOrganizationRef
 */
export interface FolderSpecOrganizationRef {
  /**
   * Allowed value: The `name` field of an `Organization` resource.
   *
   * @schema FolderSpecOrganizationRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema FolderSpecOrganizationRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema FolderSpecOrganizationRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'FolderSpecOrganizationRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_FolderSpecOrganizationRef(obj: FolderSpecOrganizationRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema Project
 */
export class Project extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Project"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'resourcemanager.cnrm.cloud.google.com/v1beta1',
    kind: 'Project',
  }

  /**
   * Renders a Kubernetes manifest for "Project".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ProjectProps): any {
    return {
      ...Project.GVK,
      ...toJson_ProjectProps(props),
    };
  }

  /**
   * Defines a "Project" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ProjectProps) {
    super(scope, id, {
      ...Project.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Project.GVK,
      ...toJson_ProjectProps(resolved),
    };
  }
}

/**
 * @schema Project
 */
export interface ProjectProps {
  /**
   * @schema Project#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema Project#spec
   */
  readonly spec: ProjectSpec;

}

/**
 * Converts an object of type 'ProjectProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProjectProps(obj: ProjectProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ProjectSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ProjectSpec
 */
export interface ProjectSpec {
  /**
   * @schema ProjectSpec#billingAccountRef
   */
  readonly billingAccountRef?: ProjectSpecBillingAccountRef;

  /**
   * The folder that this resource belongs to. Changing this forces the
   * resource to be migrated to the newly specified folder. Only one of
   * folderRef or organizationRef may be specified.
   *
   * @schema ProjectSpec#folderRef
   */
  readonly folderRef?: ProjectSpecFolderRef;

  /**
   * The display name of the project.
   *
   * @schema ProjectSpec#name
   */
  readonly name: string;

  /**
   * The organization that this resource belongs to. Changing this
   * forces the resource to be migrated to the newly specified
   * organization. Only one of folderRef or organizationRef may be
   * specified.
   *
   * @schema ProjectSpec#organizationRef
   */
  readonly organizationRef?: ProjectSpecOrganizationRef;

  /**
   * Immutable. Optional. The projectId of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
   *
   * @schema ProjectSpec#resourceID
   */
  readonly resourceId?: string;

}

/**
 * Converts an object of type 'ProjectSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProjectSpec(obj: ProjectSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'billingAccountRef': toJson_ProjectSpecBillingAccountRef(obj.billingAccountRef),
    'folderRef': toJson_ProjectSpecFolderRef(obj.folderRef),
    'name': obj.name,
    'organizationRef': toJson_ProjectSpecOrganizationRef(obj.organizationRef),
    'resourceID': obj.resourceId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ProjectSpecBillingAccountRef
 */
export interface ProjectSpecBillingAccountRef {
  /**
   * Allowed value: The `name` field of a `BillingAccount` resource.
   *
   * @schema ProjectSpecBillingAccountRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ProjectSpecBillingAccountRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema ProjectSpecBillingAccountRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ProjectSpecBillingAccountRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProjectSpecBillingAccountRef(obj: ProjectSpecBillingAccountRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The folder that this resource belongs to. Changing this forces the
 * resource to be migrated to the newly specified folder. Only one of
 * folderRef or organizationRef may be specified.
 *
 * @schema ProjectSpecFolderRef
 */
export interface ProjectSpecFolderRef {
  /**
   * Allowed value: The `folderId` field of a `Folder` resource.
   *
   * @schema ProjectSpecFolderRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ProjectSpecFolderRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema ProjectSpecFolderRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ProjectSpecFolderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProjectSpecFolderRef(obj: ProjectSpecFolderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The organization that this resource belongs to. Changing this
 * forces the resource to be migrated to the newly specified
 * organization. Only one of folderRef or organizationRef may be
 * specified.
 *
 * @schema ProjectSpecOrganizationRef
 */
export interface ProjectSpecOrganizationRef {
  /**
   * Allowed value: The `name` field of an `Organization` resource.
   *
   * @schema ProjectSpecOrganizationRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ProjectSpecOrganizationRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema ProjectSpecOrganizationRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ProjectSpecOrganizationRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProjectSpecOrganizationRef(obj: ProjectSpecOrganizationRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema ResourceManagerLien
 */
export class ResourceManagerLien extends ApiObject {
  /**
   * Returns the apiVersion and kind for "ResourceManagerLien"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'resourcemanager.cnrm.cloud.google.com/v1beta1',
    kind: 'ResourceManagerLien',
  }

  /**
   * Renders a Kubernetes manifest for "ResourceManagerLien".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ResourceManagerLienProps): any {
    return {
      ...ResourceManagerLien.GVK,
      ...toJson_ResourceManagerLienProps(props),
    };
  }

  /**
   * Defines a "ResourceManagerLien" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ResourceManagerLienProps) {
    super(scope, id, {
      ...ResourceManagerLien.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...ResourceManagerLien.GVK,
      ...toJson_ResourceManagerLienProps(resolved),
    };
  }
}

/**
 * @schema ResourceManagerLien
 */
export interface ResourceManagerLienProps {
  /**
   * @schema ResourceManagerLien#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema ResourceManagerLien#spec
   */
  readonly spec: ResourceManagerLienSpec;

}

/**
 * Converts an object of type 'ResourceManagerLienProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceManagerLienProps(obj: ResourceManagerLienProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ResourceManagerLienSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ResourceManagerLienSpec
 */
export interface ResourceManagerLienSpec {
  /**
   * Immutable. A stable, user-visible/meaningful string identifying the origin
   * of the Lien, intended to be inspected programmatically. Maximum length of
   * 200 characters.
   *
   * @schema ResourceManagerLienSpec#origin
   */
  readonly origin: string;

  /**
   * @schema ResourceManagerLienSpec#parent
   */
  readonly parent: ResourceManagerLienSpecParent;

  /**
   * Immutable. Concise user-visible strings indicating why an action cannot be performed
   * on a resource. Maximum length of 200 characters.
   *
   * @schema ResourceManagerLienSpec#reason
   */
  readonly reason: string;

  /**
   * Immutable. Optional. The service-generated name of the resource. Used for acquisition only. Leave unset to create a new resource.
   *
   * @schema ResourceManagerLienSpec#resourceID
   */
  readonly resourceId?: string;

  /**
   * Immutable. The types of operations which should be blocked as a result of this Lien.
   * Each value should correspond to an IAM permission. The server will validate
   * the permissions against those for which Liens are supported.  An empty
   * list is meaningless and will be rejected.
   * e.g. ['resourcemanager.projects.delete'].
   *
   * @schema ResourceManagerLienSpec#restrictions
   */
  readonly restrictions: string[];

}

/**
 * Converts an object of type 'ResourceManagerLienSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceManagerLienSpec(obj: ResourceManagerLienSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'origin': obj.origin,
    'parent': toJson_ResourceManagerLienSpecParent(obj.parent),
    'reason': obj.reason,
    'resourceID': obj.resourceId,
    'restrictions': obj.restrictions?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ResourceManagerLienSpecParent
 */
export interface ResourceManagerLienSpecParent {
  /**
   * @schema ResourceManagerLienSpecParent#projectRef
   */
  readonly projectRef?: ResourceManagerLienSpecParentProjectRef;

}

/**
 * Converts an object of type 'ResourceManagerLienSpecParent' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceManagerLienSpecParent(obj: ResourceManagerLienSpecParent | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'projectRef': toJson_ResourceManagerLienSpecParentProjectRef(obj.projectRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ResourceManagerLienSpecParentProjectRef
 */
export interface ResourceManagerLienSpecParentProjectRef {
  /**
   * Allowed value: string of the format `projects/{{value}}`, where {{value}} is the `number` field of a `Project` resource.
   *
   * @schema ResourceManagerLienSpecParentProjectRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ResourceManagerLienSpecParentProjectRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema ResourceManagerLienSpecParentProjectRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ResourceManagerLienSpecParentProjectRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceManagerLienSpecParentProjectRef(obj: ResourceManagerLienSpecParentProjectRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema ResourceManagerPolicy
 */
export class ResourceManagerPolicy extends ApiObject {
  /**
   * Returns the apiVersion and kind for "ResourceManagerPolicy"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'resourcemanager.cnrm.cloud.google.com/v1beta1',
    kind: 'ResourceManagerPolicy',
  }

  /**
   * Renders a Kubernetes manifest for "ResourceManagerPolicy".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ResourceManagerPolicyProps): any {
    return {
      ...ResourceManagerPolicy.GVK,
      ...toJson_ResourceManagerPolicyProps(props),
    };
  }

  /**
   * Defines a "ResourceManagerPolicy" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ResourceManagerPolicyProps) {
    super(scope, id, {
      ...ResourceManagerPolicy.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...ResourceManagerPolicy.GVK,
      ...toJson_ResourceManagerPolicyProps(resolved),
    };
  }
}

/**
 * @schema ResourceManagerPolicy
 */
export interface ResourceManagerPolicyProps {
  /**
   * @schema ResourceManagerPolicy#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema ResourceManagerPolicy#spec
   */
  readonly spec: ResourceManagerPolicySpec;

}

/**
 * Converts an object of type 'ResourceManagerPolicyProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceManagerPolicyProps(obj: ResourceManagerPolicyProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ResourceManagerPolicySpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ResourceManagerPolicySpec
 */
export interface ResourceManagerPolicySpec {
  /**
   * A boolean policy is a constraint that is either enforced or not.
   *
   * @schema ResourceManagerPolicySpec#booleanPolicy
   */
  readonly booleanPolicy?: ResourceManagerPolicySpecBooleanPolicy;

  /**
   * Immutable. The name of the Constraint the Policy is configuring, for example, serviceuser.services.
   *
   * @schema ResourceManagerPolicySpec#constraint
   */
  readonly constraint: string;

  /**
   * The folder on which to configure the constraint. Only one of
   * projectRef, folderRef, or organizationRef may be specified.
   *
   * @schema ResourceManagerPolicySpec#folderRef
   */
  readonly folderRef?: ResourceManagerPolicySpecFolderRef;

  /**
   * A policy that can define specific values that are allowed or denied for the given constraint. It can also be used to allow or deny all values. .
   *
   * @schema ResourceManagerPolicySpec#listPolicy
   */
  readonly listPolicy?: ResourceManagerPolicySpecListPolicy;

  /**
   * The organization on which to configure the constraint. Only one of
   * projectRef, folderRef, or organizationRef may be specified.
   *
   * @schema ResourceManagerPolicySpec#organizationRef
   */
  readonly organizationRef?: ResourceManagerPolicySpecOrganizationRef;

  /**
   * The project on which to configure the constraint. Only one of
   * projectRef, folderRef, or organizationRef may be specified.
   *
   * @schema ResourceManagerPolicySpec#projectRef
   */
  readonly projectRef?: ResourceManagerPolicySpecProjectRef;

  /**
   * A restore policy is a constraint to restore the default policy.
   *
   * @schema ResourceManagerPolicySpec#restorePolicy
   */
  readonly restorePolicy?: ResourceManagerPolicySpecRestorePolicy;

  /**
   * Version of the Policy. Default version is 0.
   *
   * @schema ResourceManagerPolicySpec#version
   */
  readonly version?: number;

}

/**
 * Converts an object of type 'ResourceManagerPolicySpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceManagerPolicySpec(obj: ResourceManagerPolicySpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'booleanPolicy': toJson_ResourceManagerPolicySpecBooleanPolicy(obj.booleanPolicy),
    'constraint': obj.constraint,
    'folderRef': toJson_ResourceManagerPolicySpecFolderRef(obj.folderRef),
    'listPolicy': toJson_ResourceManagerPolicySpecListPolicy(obj.listPolicy),
    'organizationRef': toJson_ResourceManagerPolicySpecOrganizationRef(obj.organizationRef),
    'projectRef': toJson_ResourceManagerPolicySpecProjectRef(obj.projectRef),
    'restorePolicy': toJson_ResourceManagerPolicySpecRestorePolicy(obj.restorePolicy),
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A boolean policy is a constraint that is either enforced or not.
 *
 * @schema ResourceManagerPolicySpecBooleanPolicy
 */
export interface ResourceManagerPolicySpecBooleanPolicy {
  /**
   * If true, then the Policy is enforced. If false, then any configuration is acceptable.
   *
   * @schema ResourceManagerPolicySpecBooleanPolicy#enforced
   */
  readonly enforced: boolean;

}

/**
 * Converts an object of type 'ResourceManagerPolicySpecBooleanPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceManagerPolicySpecBooleanPolicy(obj: ResourceManagerPolicySpecBooleanPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enforced': obj.enforced,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The folder on which to configure the constraint. Only one of
 * projectRef, folderRef, or organizationRef may be specified.
 *
 * @schema ResourceManagerPolicySpecFolderRef
 */
export interface ResourceManagerPolicySpecFolderRef {
  /**
   * Allowed value: The `name` field of a `Folder` resource.
   *
   * @schema ResourceManagerPolicySpecFolderRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ResourceManagerPolicySpecFolderRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema ResourceManagerPolicySpecFolderRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ResourceManagerPolicySpecFolderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceManagerPolicySpecFolderRef(obj: ResourceManagerPolicySpecFolderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A policy that can define specific values that are allowed or denied for the given constraint. It can also be used to allow or deny all values. .
 *
 * @schema ResourceManagerPolicySpecListPolicy
 */
export interface ResourceManagerPolicySpecListPolicy {
  /**
   * One or the other must be set.
   *
   * @schema ResourceManagerPolicySpecListPolicy#allow
   */
  readonly allow?: ResourceManagerPolicySpecListPolicyAllow;

  /**
   * One or the other must be set.
   *
   * @schema ResourceManagerPolicySpecListPolicy#deny
   */
  readonly deny?: ResourceManagerPolicySpecListPolicyDeny;

  /**
   * If set to true, the values from the effective Policy of the parent resource are inherited, meaning the values set in this Policy are added to the values inherited up the hierarchy.
   *
   * @schema ResourceManagerPolicySpecListPolicy#inheritFromParent
   */
  readonly inheritFromParent?: boolean;

  /**
   * The Google Cloud Console will try to default to a configuration that matches the value specified in this field.
   *
   * @schema ResourceManagerPolicySpecListPolicy#suggestedValue
   */
  readonly suggestedValue?: string;

}

/**
 * Converts an object of type 'ResourceManagerPolicySpecListPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceManagerPolicySpecListPolicy(obj: ResourceManagerPolicySpecListPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'allow': toJson_ResourceManagerPolicySpecListPolicyAllow(obj.allow),
    'deny': toJson_ResourceManagerPolicySpecListPolicyDeny(obj.deny),
    'inheritFromParent': obj.inheritFromParent,
    'suggestedValue': obj.suggestedValue,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The organization on which to configure the constraint. Only one of
 * projectRef, folderRef, or organizationRef may be specified.
 *
 * @schema ResourceManagerPolicySpecOrganizationRef
 */
export interface ResourceManagerPolicySpecOrganizationRef {
  /**
   * Allowed value: The `name` field of an `Organization` resource.
   *
   * @schema ResourceManagerPolicySpecOrganizationRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ResourceManagerPolicySpecOrganizationRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema ResourceManagerPolicySpecOrganizationRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ResourceManagerPolicySpecOrganizationRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceManagerPolicySpecOrganizationRef(obj: ResourceManagerPolicySpecOrganizationRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The project on which to configure the constraint. Only one of
 * projectRef, folderRef, or organizationRef may be specified.
 *
 * @schema ResourceManagerPolicySpecProjectRef
 */
export interface ResourceManagerPolicySpecProjectRef {
  /**
   * Allowed value: The `name` field of a `Project` resource.
   *
   * @schema ResourceManagerPolicySpecProjectRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ResourceManagerPolicySpecProjectRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema ResourceManagerPolicySpecProjectRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ResourceManagerPolicySpecProjectRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceManagerPolicySpecProjectRef(obj: ResourceManagerPolicySpecProjectRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A restore policy is a constraint to restore the default policy.
 *
 * @schema ResourceManagerPolicySpecRestorePolicy
 */
export interface ResourceManagerPolicySpecRestorePolicy {
  /**
   * May only be set to true. If set, then the default Policy is restored.
   *
   * @schema ResourceManagerPolicySpecRestorePolicy#default
   */
  readonly default: boolean;

}

/**
 * Converts an object of type 'ResourceManagerPolicySpecRestorePolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceManagerPolicySpecRestorePolicy(obj: ResourceManagerPolicySpecRestorePolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'default': obj.default,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * One or the other must be set.
 *
 * @schema ResourceManagerPolicySpecListPolicyAllow
 */
export interface ResourceManagerPolicySpecListPolicyAllow {
  /**
   * The policy allows or denies all values.
   *
   * @schema ResourceManagerPolicySpecListPolicyAllow#all
   */
  readonly all?: boolean;

  /**
   * The policy can define specific values that are allowed or denied.
   *
   * @schema ResourceManagerPolicySpecListPolicyAllow#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'ResourceManagerPolicySpecListPolicyAllow' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceManagerPolicySpecListPolicyAllow(obj: ResourceManagerPolicySpecListPolicyAllow | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'all': obj.all,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * One or the other must be set.
 *
 * @schema ResourceManagerPolicySpecListPolicyDeny
 */
export interface ResourceManagerPolicySpecListPolicyDeny {
  /**
   * The policy allows or denies all values.
   *
   * @schema ResourceManagerPolicySpecListPolicyDeny#all
   */
  readonly all?: boolean;

  /**
   * The policy can define specific values that are allowed or denied.
   *
   * @schema ResourceManagerPolicySpecListPolicyDeny#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'ResourceManagerPolicySpecListPolicyDeny' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceManagerPolicySpecListPolicyDeny(obj: ResourceManagerPolicySpecListPolicyDeny | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'all': obj.all,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

