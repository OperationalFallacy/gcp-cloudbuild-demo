// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 *
 *
 * @schema MemcacheInstance
 */
export class MemcacheInstance extends ApiObject {
  /**
   * Returns the apiVersion and kind for "MemcacheInstance"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'memcache.cnrm.cloud.google.com/v1beta1',
    kind: 'MemcacheInstance',
  }

  /**
   * Renders a Kubernetes manifest for "MemcacheInstance".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: MemcacheInstanceProps): any {
    return {
      ...MemcacheInstance.GVK,
      ...toJson_MemcacheInstanceProps(props),
    };
  }

  /**
   * Defines a "MemcacheInstance" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: MemcacheInstanceProps) {
    super(scope, id, {
      ...MemcacheInstance.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...MemcacheInstance.GVK,
      ...toJson_MemcacheInstanceProps(resolved),
    };
  }
}

/**
 * @schema MemcacheInstance
 */
export interface MemcacheInstanceProps {
  /**
   * @schema MemcacheInstance#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema MemcacheInstance#spec
   */
  readonly spec: MemcacheInstanceSpec;

}

/**
 * Converts an object of type 'MemcacheInstanceProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MemcacheInstanceProps(obj: MemcacheInstanceProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_MemcacheInstanceSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema MemcacheInstanceSpec
 */
export interface MemcacheInstanceSpec {
  /**
   * A user-visible name for the instance.
   *
   * @schema MemcacheInstanceSpec#displayName
   */
  readonly displayName?: string;

  /**
   * Maintenance policy for an instance.
   *
   * @schema MemcacheInstanceSpec#maintenancePolicy
   */
  readonly maintenancePolicy?: MemcacheInstanceSpecMaintenancePolicy;

  /**
   * Immutable. User-specified parameters for this memcache instance.
   *
   * @schema MemcacheInstanceSpec#memcacheParameters
   */
  readonly memcacheParameters?: MemcacheInstanceSpecMemcacheParameters;

  /**
   * The major version of Memcached software. If not provided, latest supported version will be used.
   * Currently the latest supported major version is MEMCACHE_1_5. The minor version will be automatically
   * determined by our system based on the latest supported minor version. Default value: "MEMCACHE_1_5" Possible values: ["MEMCACHE_1_5"].
   *
   * @schema MemcacheInstanceSpec#memcacheVersion
   */
  readonly memcacheVersion?: string;

  /**
   * The full name of the network to connect the instance to.
   *
   * @schema MemcacheInstanceSpec#networkRef
   */
  readonly networkRef?: MemcacheInstanceSpecNetworkRef;

  /**
   * Immutable. Configuration for memcache nodes.
   *
   * @schema MemcacheInstanceSpec#nodeConfig
   */
  readonly nodeConfig: MemcacheInstanceSpecNodeConfig;

  /**
   * Number of nodes in the memcache instance.
   *
   * @schema MemcacheInstanceSpec#nodeCount
   */
  readonly nodeCount: number;

  /**
   * Immutable. The region of the Memcache instance. If it is not provided, the provider region is used.
   *
   * @schema MemcacheInstanceSpec#region
   */
  readonly region: string;

  /**
   * Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
   *
   * @schema MemcacheInstanceSpec#resourceID
   */
  readonly resourceId?: string;

  /**
   * Immutable. Zones where memcache nodes should be provisioned.  If not
   * provided, all zones will be used.
   *
   * @schema MemcacheInstanceSpec#zones
   */
  readonly zones?: string[];

}

/**
 * Converts an object of type 'MemcacheInstanceSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MemcacheInstanceSpec(obj: MemcacheInstanceSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'displayName': obj.displayName,
    'maintenancePolicy': toJson_MemcacheInstanceSpecMaintenancePolicy(obj.maintenancePolicy),
    'memcacheParameters': toJson_MemcacheInstanceSpecMemcacheParameters(obj.memcacheParameters),
    'memcacheVersion': obj.memcacheVersion,
    'networkRef': toJson_MemcacheInstanceSpecNetworkRef(obj.networkRef),
    'nodeConfig': toJson_MemcacheInstanceSpecNodeConfig(obj.nodeConfig),
    'nodeCount': obj.nodeCount,
    'region': obj.region,
    'resourceID': obj.resourceId,
    'zones': obj.zones?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Maintenance policy for an instance.
 *
 * @schema MemcacheInstanceSpecMaintenancePolicy
 */
export interface MemcacheInstanceSpecMaintenancePolicy {
  /**
   * Output only. The time when the policy was created.
   * A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
   * resolution and up to nine fractional digits.
   *
   * @schema MemcacheInstanceSpecMaintenancePolicy#createTime
   */
  readonly createTime?: string;

  /**
   * Optional. Description of what this policy is for.
   * Create/Update methods return INVALID_ARGUMENT if the
   * length is greater than 512.
   *
   * @schema MemcacheInstanceSpecMaintenancePolicy#description
   */
  readonly description?: string;

  /**
   * Output only. The time when the policy was updated.
   * A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
   * resolution and up to nine fractional digits.
   *
   * @schema MemcacheInstanceSpecMaintenancePolicy#updateTime
   */
  readonly updateTime?: string;

  /**
   * Required. Maintenance window that is applied to resources covered by this policy.
   * Minimum 1. For the current version, the maximum number of weekly_maintenance_windows
   * is expected to be one.
   *
   * @schema MemcacheInstanceSpecMaintenancePolicy#weeklyMaintenanceWindow
   */
  readonly weeklyMaintenanceWindow: MemcacheInstanceSpecMaintenancePolicyWeeklyMaintenanceWindow[];

}

/**
 * Converts an object of type 'MemcacheInstanceSpecMaintenancePolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MemcacheInstanceSpecMaintenancePolicy(obj: MemcacheInstanceSpecMaintenancePolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'createTime': obj.createTime,
    'description': obj.description,
    'updateTime': obj.updateTime,
    'weeklyMaintenanceWindow': obj.weeklyMaintenanceWindow?.map(y => toJson_MemcacheInstanceSpecMaintenancePolicyWeeklyMaintenanceWindow(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. User-specified parameters for this memcache instance.
 *
 * @schema MemcacheInstanceSpecMemcacheParameters
 */
export interface MemcacheInstanceSpecMemcacheParameters {
  /**
   * This is a unique ID associated with this set of parameters.
   *
   * @schema MemcacheInstanceSpecMemcacheParameters#id
   */
  readonly id?: string;

  /**
   * User-defined set of parameters to use in the memcache process.
   *
   * @schema MemcacheInstanceSpecMemcacheParameters#params
   */
  readonly params?: { [key: string]: string };

}

/**
 * Converts an object of type 'MemcacheInstanceSpecMemcacheParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MemcacheInstanceSpecMemcacheParameters(obj: MemcacheInstanceSpecMemcacheParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'id': obj.id,
    'params': ((obj.params) === undefined) ? undefined : (Object.entries(obj.params).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The full name of the network to connect the instance to.
 *
 * @schema MemcacheInstanceSpecNetworkRef
 */
export interface MemcacheInstanceSpecNetworkRef {
  /**
   * Allowed value: string of the format `projects/{{project}}/global/networks/{{value}}`, where {{value}} is the `name` field of a `ComputeNetwork` resource.
   *
   * @schema MemcacheInstanceSpecNetworkRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema MemcacheInstanceSpecNetworkRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema MemcacheInstanceSpecNetworkRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'MemcacheInstanceSpecNetworkRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MemcacheInstanceSpecNetworkRef(obj: MemcacheInstanceSpecNetworkRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Configuration for memcache nodes.
 *
 * @schema MemcacheInstanceSpecNodeConfig
 */
export interface MemcacheInstanceSpecNodeConfig {
  /**
   * Number of CPUs per node.
   *
   * @schema MemcacheInstanceSpecNodeConfig#cpuCount
   */
  readonly cpuCount: number;

  /**
   * Memory size in Mebibytes for each memcache node.
   *
   * @schema MemcacheInstanceSpecNodeConfig#memorySizeMb
   */
  readonly memorySizeMb: number;

}

/**
 * Converts an object of type 'MemcacheInstanceSpecNodeConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MemcacheInstanceSpecNodeConfig(obj: MemcacheInstanceSpecNodeConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cpuCount': obj.cpuCount,
    'memorySizeMb': obj.memorySizeMb,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema MemcacheInstanceSpecMaintenancePolicyWeeklyMaintenanceWindow
 */
export interface MemcacheInstanceSpecMaintenancePolicyWeeklyMaintenanceWindow {
  /**
   * Required. The day of week that maintenance updates occur.
   * - DAY_OF_WEEK_UNSPECIFIED: The day of the week is unspecified.
   * - MONDAY: Monday
   * - TUESDAY: Tuesday
   * - WEDNESDAY: Wednesday
   * - THURSDAY: Thursday
   * - FRIDAY: Friday
   * - SATURDAY: Saturday
   * - SUNDAY: Sunday Possible values: ["DAY_OF_WEEK_UNSPECIFIED", "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"].
   *
   * @schema MemcacheInstanceSpecMaintenancePolicyWeeklyMaintenanceWindow#day
   */
  readonly day: string;

  /**
   * Required. The length of the maintenance window, ranging from 3 hours to 8 hours.
   * A duration in seconds with up to nine fractional digits,
   * terminated by 's'. Example: "3.5s".
   *
   * @schema MemcacheInstanceSpecMaintenancePolicyWeeklyMaintenanceWindow#duration
   */
  readonly duration: string;

  /**
   * Required. Start time of the window in UTC time.
   *
   * @schema MemcacheInstanceSpecMaintenancePolicyWeeklyMaintenanceWindow#startTime
   */
  readonly startTime: MemcacheInstanceSpecMaintenancePolicyWeeklyMaintenanceWindowStartTime;

}

/**
 * Converts an object of type 'MemcacheInstanceSpecMaintenancePolicyWeeklyMaintenanceWindow' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MemcacheInstanceSpecMaintenancePolicyWeeklyMaintenanceWindow(obj: MemcacheInstanceSpecMaintenancePolicyWeeklyMaintenanceWindow | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'day': obj.day,
    'duration': obj.duration,
    'startTime': toJson_MemcacheInstanceSpecMaintenancePolicyWeeklyMaintenanceWindowStartTime(obj.startTime),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Required. Start time of the window in UTC time.
 *
 * @schema MemcacheInstanceSpecMaintenancePolicyWeeklyMaintenanceWindowStartTime
 */
export interface MemcacheInstanceSpecMaintenancePolicyWeeklyMaintenanceWindowStartTime {
  /**
   * Hours of day in 24 hour format. Should be from 0 to 23.
   * An API may choose to allow the value "24:00:00" for scenarios like business closing time.
   *
   * @schema MemcacheInstanceSpecMaintenancePolicyWeeklyMaintenanceWindowStartTime#hours
   */
  readonly hours?: number;

  /**
   * Minutes of hour of day. Must be from 0 to 59.
   *
   * @schema MemcacheInstanceSpecMaintenancePolicyWeeklyMaintenanceWindowStartTime#minutes
   */
  readonly minutes?: number;

  /**
   * Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
   *
   * @schema MemcacheInstanceSpecMaintenancePolicyWeeklyMaintenanceWindowStartTime#nanos
   */
  readonly nanos?: number;

  /**
   * Seconds of minutes of the time. Must normally be from 0 to 59.
   * An API may allow the value 60 if it allows leap-seconds.
   *
   * @schema MemcacheInstanceSpecMaintenancePolicyWeeklyMaintenanceWindowStartTime#seconds
   */
  readonly seconds?: number;

}

/**
 * Converts an object of type 'MemcacheInstanceSpecMaintenancePolicyWeeklyMaintenanceWindowStartTime' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MemcacheInstanceSpecMaintenancePolicyWeeklyMaintenanceWindowStartTime(obj: MemcacheInstanceSpecMaintenancePolicyWeeklyMaintenanceWindowStartTime | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'hours': obj.hours,
    'minutes': obj.minutes,
    'nanos': obj.nanos,
    'seconds': obj.seconds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

