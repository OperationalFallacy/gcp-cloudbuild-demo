// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 *
 *
 * @schema IAMAccessBoundaryPolicy
 */
export class IamAccessBoundaryPolicy extends ApiObject {
  /**
   * Returns the apiVersion and kind for "IAMAccessBoundaryPolicy"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'iam.cnrm.cloud.google.com/v1beta1',
    kind: 'IAMAccessBoundaryPolicy',
  }

  /**
   * Renders a Kubernetes manifest for "IAMAccessBoundaryPolicy".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: IamAccessBoundaryPolicyProps): any {
    return {
      ...IamAccessBoundaryPolicy.GVK,
      ...toJson_IamAccessBoundaryPolicyProps(props),
    };
  }

  /**
   * Defines a "IAMAccessBoundaryPolicy" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: IamAccessBoundaryPolicyProps) {
    super(scope, id, {
      ...IamAccessBoundaryPolicy.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...IamAccessBoundaryPolicy.GVK,
      ...toJson_IamAccessBoundaryPolicyProps(resolved),
    };
  }
}

/**
 * @schema IAMAccessBoundaryPolicy
 */
export interface IamAccessBoundaryPolicyProps {
  /**
   * @schema IAMAccessBoundaryPolicy#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema IAMAccessBoundaryPolicy#spec
   */
  readonly spec: IamAccessBoundaryPolicySpec;

}

/**
 * Converts an object of type 'IamAccessBoundaryPolicyProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamAccessBoundaryPolicyProps(obj: IamAccessBoundaryPolicyProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_IamAccessBoundaryPolicySpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema IamAccessBoundaryPolicySpec
 */
export interface IamAccessBoundaryPolicySpec {
  /**
   * The display name of the rule.
   *
   * @schema IamAccessBoundaryPolicySpec#displayName
   */
  readonly displayName?: string;

  /**
   * @schema IamAccessBoundaryPolicySpec#projectRef
   */
  readonly projectRef: IamAccessBoundaryPolicySpecProjectRef;

  /**
   * Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
   *
   * @schema IamAccessBoundaryPolicySpec#resourceID
   */
  readonly resourceId?: string;

  /**
   * Rules to be applied.
   *
   * @schema IamAccessBoundaryPolicySpec#rules
   */
  readonly rules: IamAccessBoundaryPolicySpecRules[];

}

/**
 * Converts an object of type 'IamAccessBoundaryPolicySpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamAccessBoundaryPolicySpec(obj: IamAccessBoundaryPolicySpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'displayName': obj.displayName,
    'projectRef': toJson_IamAccessBoundaryPolicySpecProjectRef(obj.projectRef),
    'resourceID': obj.resourceId,
    'rules': obj.rules?.map(y => toJson_IamAccessBoundaryPolicySpecRules(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema IamAccessBoundaryPolicySpecProjectRef
 */
export interface IamAccessBoundaryPolicySpecProjectRef {
  /**
   * Allowed value: string of the format `cloudresourcemanager.googleapis.com%2Fprojects%2F{{value}}`, where {{value}} is the `name` field of a `Project` resource.
   *
   * @schema IamAccessBoundaryPolicySpecProjectRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema IamAccessBoundaryPolicySpecProjectRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema IamAccessBoundaryPolicySpecProjectRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'IamAccessBoundaryPolicySpecProjectRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamAccessBoundaryPolicySpecProjectRef(obj: IamAccessBoundaryPolicySpecProjectRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema IamAccessBoundaryPolicySpecRules
 */
export interface IamAccessBoundaryPolicySpecRules {
  /**
   * An access boundary rule in an IAM policy.
   *
   * @schema IamAccessBoundaryPolicySpecRules#accessBoundaryRule
   */
  readonly accessBoundaryRule?: IamAccessBoundaryPolicySpecRulesAccessBoundaryRule;

  /**
   * The description of the rule.
   *
   * @schema IamAccessBoundaryPolicySpecRules#description
   */
  readonly description?: string;

}

/**
 * Converts an object of type 'IamAccessBoundaryPolicySpecRules' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamAccessBoundaryPolicySpecRules(obj: IamAccessBoundaryPolicySpecRules | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'accessBoundaryRule': toJson_IamAccessBoundaryPolicySpecRulesAccessBoundaryRule(obj.accessBoundaryRule),
    'description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An access boundary rule in an IAM policy.
 *
 * @schema IamAccessBoundaryPolicySpecRulesAccessBoundaryRule
 */
export interface IamAccessBoundaryPolicySpecRulesAccessBoundaryRule {
  /**
   * The availability condition further constrains the access allowed by the access boundary rule.
   *
   * @schema IamAccessBoundaryPolicySpecRulesAccessBoundaryRule#availabilityCondition
   */
  readonly availabilityCondition?: IamAccessBoundaryPolicySpecRulesAccessBoundaryRuleAvailabilityCondition;

  /**
   * A list of permissions that may be allowed for use on the specified resource.
   *
   * @schema IamAccessBoundaryPolicySpecRulesAccessBoundaryRule#availablePermissions
   */
  readonly availablePermissions?: string[];

  /**
   * The full resource name of a Google Cloud resource entity.
   *
   * @schema IamAccessBoundaryPolicySpecRulesAccessBoundaryRule#availableResource
   */
  readonly availableResource?: string;

}

/**
 * Converts an object of type 'IamAccessBoundaryPolicySpecRulesAccessBoundaryRule' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamAccessBoundaryPolicySpecRulesAccessBoundaryRule(obj: IamAccessBoundaryPolicySpecRulesAccessBoundaryRule | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'availabilityCondition': toJson_IamAccessBoundaryPolicySpecRulesAccessBoundaryRuleAvailabilityCondition(obj.availabilityCondition),
    'availablePermissions': obj.availablePermissions?.map(y => y),
    'availableResource': obj.availableResource,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The availability condition further constrains the access allowed by the access boundary rule.
 *
 * @schema IamAccessBoundaryPolicySpecRulesAccessBoundaryRuleAvailabilityCondition
 */
export interface IamAccessBoundaryPolicySpecRulesAccessBoundaryRuleAvailabilityCondition {
  /**
   * Description of the expression. This is a longer text which describes the expression,
   * e.g. when hovered over it in a UI.
   *
   * @schema IamAccessBoundaryPolicySpecRulesAccessBoundaryRuleAvailabilityCondition#description
   */
  readonly description?: string;

  /**
   * Textual representation of an expression in Common Expression Language syntax.
   *
   * @schema IamAccessBoundaryPolicySpecRulesAccessBoundaryRuleAvailabilityCondition#expression
   */
  readonly expression: string;

  /**
   * String indicating the location of the expression for error reporting,
   * e.g. a file name and a position in the file.
   *
   * @schema IamAccessBoundaryPolicySpecRulesAccessBoundaryRuleAvailabilityCondition#location
   */
  readonly location?: string;

  /**
   * Title for the expression, i.e. a short string describing its purpose.
   * This can be used e.g. in UIs which allow to enter the expression.
   *
   * @schema IamAccessBoundaryPolicySpecRulesAccessBoundaryRuleAvailabilityCondition#title
   */
  readonly title?: string;

}

/**
 * Converts an object of type 'IamAccessBoundaryPolicySpecRulesAccessBoundaryRuleAvailabilityCondition' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamAccessBoundaryPolicySpecRulesAccessBoundaryRuleAvailabilityCondition(obj: IamAccessBoundaryPolicySpecRulesAccessBoundaryRuleAvailabilityCondition | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'description': obj.description,
    'expression': obj.expression,
    'location': obj.location,
    'title': obj.title,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * IAMAuditConfig is the schema for the IAM audit logging API.
 *
 * @schema IAMAuditConfig
 */
export class IamAuditConfig extends ApiObject {
  /**
   * Returns the apiVersion and kind for "IAMAuditConfig"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'iam.cnrm.cloud.google.com/v1beta1',
    kind: 'IAMAuditConfig',
  }

  /**
   * Renders a Kubernetes manifest for "IAMAuditConfig".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: IamAuditConfigProps = {}): any {
    return {
      ...IamAuditConfig.GVK,
      ...toJson_IamAuditConfigProps(props),
    };
  }

  /**
   * Defines a "IAMAuditConfig" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: IamAuditConfigProps = {}) {
    super(scope, id, {
      ...IamAuditConfig.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...IamAuditConfig.GVK,
      ...toJson_IamAuditConfigProps(resolved),
    };
  }
}

/**
 * IAMAuditConfig is the schema for the IAM audit logging API.
 *
 * @schema IAMAuditConfig
 */
export interface IamAuditConfigProps {
  /**
   * @schema IAMAuditConfig#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * IAMAuditConfigSpec defines the desired state of IAMAuditConfig.
   *
   * @schema IAMAuditConfig#spec
   */
  readonly spec?: IamAuditConfigSpec;

}

/**
 * Converts an object of type 'IamAuditConfigProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamAuditConfigProps(obj: IamAuditConfigProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_IamAuditConfigSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * IAMAuditConfigSpec defines the desired state of IAMAuditConfig.
 *
 * @schema IamAuditConfigSpec
 */
export interface IamAuditConfigSpec {
  /**
   * Required. The configuration for logging of each type of permission.
   *
   * @schema IamAuditConfigSpec#auditLogConfigs
   */
  readonly auditLogConfigs: IamAuditConfigSpecAuditLogConfigs[];

  /**
   * Immutable. Required. The GCP resource to set the IAMAuditConfig on (e.g. project).
   *
   * @schema IamAuditConfigSpec#resourceRef
   */
  readonly resourceRef: IamAuditConfigSpecResourceRef;

  /**
   * Immutable. Required. The service for which to enable Data Access audit logs. The special value 'allServices' covers all services. Note that if there are audit configs covering both 'allServices' and a specific service, then the union of the two audit configs is used for that service: the 'logTypes' specified in each 'auditLogConfig' are enabled, and the 'exemptedMembers' in each 'auditLogConfg' are exempted.
   *
   * @schema IamAuditConfigSpec#service
   */
  readonly service: string;

}

/**
 * Converts an object of type 'IamAuditConfigSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamAuditConfigSpec(obj: IamAuditConfigSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'auditLogConfigs': obj.auditLogConfigs?.map(y => toJson_IamAuditConfigSpecAuditLogConfigs(y)),
    'resourceRef': toJson_IamAuditConfigSpecResourceRef(obj.resourceRef),
    'service': obj.service,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema IamAuditConfigSpecAuditLogConfigs
 */
export interface IamAuditConfigSpecAuditLogConfigs {
  /**
   * Identities that do not cause logging for this type of permission. The format is the same as that for 'members' in IAMPolicy/IAMPolicyMember.
   *
   * @schema IamAuditConfigSpecAuditLogConfigs#exemptedMembers
   */
  readonly exemptedMembers?: string[];

  /**
   * Permission type for which logging is to be configured. Must be one of 'DATA_READ', 'DATA_WRITE', or 'ADMIN_READ'.
   *
   * @schema IamAuditConfigSpecAuditLogConfigs#logType
   */
  readonly logType: string;

}

/**
 * Converts an object of type 'IamAuditConfigSpecAuditLogConfigs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamAuditConfigSpecAuditLogConfigs(obj: IamAuditConfigSpecAuditLogConfigs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exemptedMembers': obj.exemptedMembers?.map(y => y),
    'logType': obj.logType,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Required. The GCP resource to set the IAMAuditConfig on (e.g. project).
 *
 * @schema IamAuditConfigSpecResourceRef
 */
export interface IamAuditConfigSpecResourceRef {
  /**
   * @schema IamAuditConfigSpecResourceRef#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * @schema IamAuditConfigSpecResourceRef#external
   */
  readonly external?: string;

  /**
   * @schema IamAuditConfigSpecResourceRef#kind
   */
  readonly kind: string;

  /**
   * @schema IamAuditConfigSpecResourceRef#name
   */
  readonly name?: string;

  /**
   * @schema IamAuditConfigSpecResourceRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'IamAuditConfigSpecResourceRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamAuditConfigSpecResourceRef(obj: IamAuditConfigSpecResourceRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'external': obj.external,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema IAMCustomRole
 */
export class IamCustomRole extends ApiObject {
  /**
   * Returns the apiVersion and kind for "IAMCustomRole"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'iam.cnrm.cloud.google.com/v1beta1',
    kind: 'IAMCustomRole',
  }

  /**
   * Renders a Kubernetes manifest for "IAMCustomRole".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: IamCustomRoleProps): any {
    return {
      ...IamCustomRole.GVK,
      ...toJson_IamCustomRoleProps(props),
    };
  }

  /**
   * Defines a "IAMCustomRole" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: IamCustomRoleProps) {
    super(scope, id, {
      ...IamCustomRole.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...IamCustomRole.GVK,
      ...toJson_IamCustomRoleProps(resolved),
    };
  }
}

/**
 * @schema IAMCustomRole
 */
export interface IamCustomRoleProps {
  /**
   * @schema IAMCustomRole#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema IAMCustomRole#spec
   */
  readonly spec: IamCustomRoleSpec;

}

/**
 * Converts an object of type 'IamCustomRoleProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamCustomRoleProps(obj: IamCustomRoleProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_IamCustomRoleSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema IamCustomRoleSpec
 */
export interface IamCustomRoleSpec {
  /**
   * A human-readable description for the role.
   *
   * @schema IamCustomRoleSpec#description
   */
  readonly description?: string;

  /**
   * The names of the permissions this role grants when bound in an IAM policy. At least one permission must be specified.
   *
   * @schema IamCustomRoleSpec#permissions
   */
  readonly permissions: string[];

  /**
   * Immutable. Optional. The roleId of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
   *
   * @schema IamCustomRoleSpec#resourceID
   */
  readonly resourceId?: string;

  /**
   * The current launch stage of the role. Defaults to GA.
   *
   * @default GA.
   * @schema IamCustomRoleSpec#stage
   */
  readonly stage?: string;

  /**
   * A human-readable title for the role.
   *
   * @schema IamCustomRoleSpec#title
   */
  readonly title: string;

}

/**
 * Converts an object of type 'IamCustomRoleSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamCustomRoleSpec(obj: IamCustomRoleSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'description': obj.description,
    'permissions': obj.permissions?.map(y => y),
    'resourceID': obj.resourceId,
    'stage': obj.stage,
    'title': obj.title,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * IAMPartialPolicy is the Schema for the iampartialpolicy API
 *
 * @schema IAMPartialPolicy
 */
export class IamPartialPolicy extends ApiObject {
  /**
   * Returns the apiVersion and kind for "IAMPartialPolicy"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'iam.cnrm.cloud.google.com/v1beta1',
    kind: 'IAMPartialPolicy',
  }

  /**
   * Renders a Kubernetes manifest for "IAMPartialPolicy".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: IamPartialPolicyProps = {}): any {
    return {
      ...IamPartialPolicy.GVK,
      ...toJson_IamPartialPolicyProps(props),
    };
  }

  /**
   * Defines a "IAMPartialPolicy" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: IamPartialPolicyProps = {}) {
    super(scope, id, {
      ...IamPartialPolicy.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...IamPartialPolicy.GVK,
      ...toJson_IamPartialPolicyProps(resolved),
    };
  }
}

/**
 * IAMPartialPolicy is the Schema for the iampartialpolicy API
 *
 * @schema IAMPartialPolicy
 */
export interface IamPartialPolicyProps {
  /**
   * @schema IAMPartialPolicy#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * IAMPartialPolicySpec defines the desired state of IAMPartialPolicy
   *
   * @schema IAMPartialPolicy#spec
   */
  readonly spec?: IamPartialPolicySpec;

}

/**
 * Converts an object of type 'IamPartialPolicyProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamPartialPolicyProps(obj: IamPartialPolicyProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_IamPartialPolicySpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * IAMPartialPolicySpec defines the desired state of IAMPartialPolicy
 *
 * @schema IamPartialPolicySpec
 */
export interface IamPartialPolicySpec {
  /**
   * Optional. The list of IAM bindings managed by Config Connector.
   *
   * @schema IamPartialPolicySpec#bindings
   */
  readonly bindings?: IamPartialPolicySpecBindings[];

  /**
   * Immutable. Required. The GCP resource to set the IAM policy on.
   *
   * @schema IamPartialPolicySpec#resourceRef
   */
  readonly resourceRef: IamPartialPolicySpecResourceRef;

}

/**
 * Converts an object of type 'IamPartialPolicySpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamPartialPolicySpec(obj: IamPartialPolicySpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bindings': obj.bindings?.map(y => toJson_IamPartialPolicySpecBindings(y)),
    'resourceRef': toJson_IamPartialPolicySpecResourceRef(obj.resourceRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specifies the members to bind to an IAM role.
 *
 * @schema IamPartialPolicySpecBindings
 */
export interface IamPartialPolicySpecBindings {
  /**
   * Optional. The condition under which the binding applies.
   *
   * @schema IamPartialPolicySpecBindings#condition
   */
  readonly condition?: IamPartialPolicySpecBindingsCondition;

  /**
   * Optional. The list of IAM users to be bound to the role.
   *
   * @schema IamPartialPolicySpecBindings#members
   */
  readonly members?: IamPartialPolicySpecBindingsMembers[];

  /**
   * Required. The role to bind the users to.
   *
   * @schema IamPartialPolicySpecBindings#role
   */
  readonly role: string;

}

/**
 * Converts an object of type 'IamPartialPolicySpecBindings' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamPartialPolicySpecBindings(obj: IamPartialPolicySpecBindings | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'condition': toJson_IamPartialPolicySpecBindingsCondition(obj.condition),
    'members': obj.members?.map(y => toJson_IamPartialPolicySpecBindingsMembers(y)),
    'role': obj.role,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Required. The GCP resource to set the IAM policy on.
 *
 * @schema IamPartialPolicySpecResourceRef
 */
export interface IamPartialPolicySpecResourceRef {
  /**
   * @schema IamPartialPolicySpecResourceRef#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * @schema IamPartialPolicySpecResourceRef#external
   */
  readonly external?: string;

  /**
   * @schema IamPartialPolicySpecResourceRef#kind
   */
  readonly kind: string;

  /**
   * @schema IamPartialPolicySpecResourceRef#name
   */
  readonly name?: string;

  /**
   * @schema IamPartialPolicySpecResourceRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'IamPartialPolicySpecResourceRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamPartialPolicySpecResourceRef(obj: IamPartialPolicySpecResourceRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'external': obj.external,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional. The condition under which the binding applies.
 *
 * @schema IamPartialPolicySpecBindingsCondition
 */
export interface IamPartialPolicySpecBindingsCondition {
  /**
   * @schema IamPartialPolicySpecBindingsCondition#description
   */
  readonly description?: string;

  /**
   * @schema IamPartialPolicySpecBindingsCondition#expression
   */
  readonly expression: string;

  /**
   * @schema IamPartialPolicySpecBindingsCondition#title
   */
  readonly title: string;

}

/**
 * Converts an object of type 'IamPartialPolicySpecBindingsCondition' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamPartialPolicySpecBindingsCondition(obj: IamPartialPolicySpecBindingsCondition | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'description': obj.description,
    'expression': obj.expression,
    'title': obj.title,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema IamPartialPolicySpecBindingsMembers
 */
export interface IamPartialPolicySpecBindingsMembers {
  /**
   * The IAM identity to be bound to the role. Exactly one of 'member' or 'memberFrom' must be used.
   *
   * @schema IamPartialPolicySpecBindingsMembers#member
   */
  readonly member?: string;

  /**
   * The IAM identity to be bound to the role. Exactly one of 'member' or 'memberFrom' must be used, and only one subfield within 'memberFrom' can be used.
   *
   * @schema IamPartialPolicySpecBindingsMembers#memberFrom
   */
  readonly memberFrom?: IamPartialPolicySpecBindingsMembersMemberFrom;

}

/**
 * Converts an object of type 'IamPartialPolicySpecBindingsMembers' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamPartialPolicySpecBindingsMembers(obj: IamPartialPolicySpecBindingsMembers | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'member': obj.member,
    'memberFrom': toJson_IamPartialPolicySpecBindingsMembersMemberFrom(obj.memberFrom),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The IAM identity to be bound to the role. Exactly one of 'member' or 'memberFrom' must be used, and only one subfield within 'memberFrom' can be used.
 *
 * @schema IamPartialPolicySpecBindingsMembersMemberFrom
 */
export interface IamPartialPolicySpecBindingsMembersMemberFrom {
  /**
   * The LoggingLogSink whose writer identity (i.e. its 'status.writerIdentity') is to be bound to the role.
   *
   * @schema IamPartialPolicySpecBindingsMembersMemberFrom#logSinkRef
   */
  readonly logSinkRef?: IamPartialPolicySpecBindingsMembersMemberFromLogSinkRef;

  /**
   * The IAMServiceAccount to be bound to the role.
   *
   * @schema IamPartialPolicySpecBindingsMembersMemberFrom#serviceAccountRef
   */
  readonly serviceAccountRef?: IamPartialPolicySpecBindingsMembersMemberFromServiceAccountRef;

  /**
   * The ServiceIdentity whose service account (i.e., its 'status.email') is to be bound to the role.
   *
   * @schema IamPartialPolicySpecBindingsMembersMemberFrom#serviceIdentityRef
   */
  readonly serviceIdentityRef?: IamPartialPolicySpecBindingsMembersMemberFromServiceIdentityRef;

  /**
   * The SQLInstance whose service account (i.e. its 'status.serviceAccountEmailAddress') is to be bound to the role.
   *
   * @schema IamPartialPolicySpecBindingsMembersMemberFrom#sqlInstanceRef
   */
  readonly sqlInstanceRef?: IamPartialPolicySpecBindingsMembersMemberFromSqlInstanceRef;

}

/**
 * Converts an object of type 'IamPartialPolicySpecBindingsMembersMemberFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamPartialPolicySpecBindingsMembersMemberFrom(obj: IamPartialPolicySpecBindingsMembersMemberFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'logSinkRef': toJson_IamPartialPolicySpecBindingsMembersMemberFromLogSinkRef(obj.logSinkRef),
    'serviceAccountRef': toJson_IamPartialPolicySpecBindingsMembersMemberFromServiceAccountRef(obj.serviceAccountRef),
    'serviceIdentityRef': toJson_IamPartialPolicySpecBindingsMembersMemberFromServiceIdentityRef(obj.serviceIdentityRef),
    'sqlInstanceRef': toJson_IamPartialPolicySpecBindingsMembersMemberFromSqlInstanceRef(obj.sqlInstanceRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The LoggingLogSink whose writer identity (i.e. its 'status.writerIdentity') is to be bound to the role.
 *
 * @schema IamPartialPolicySpecBindingsMembersMemberFromLogSinkRef
 */
export interface IamPartialPolicySpecBindingsMembersMemberFromLogSinkRef {
  /**
   * @schema IamPartialPolicySpecBindingsMembersMemberFromLogSinkRef#name
   */
  readonly name: string;

  /**
   * @schema IamPartialPolicySpecBindingsMembersMemberFromLogSinkRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'IamPartialPolicySpecBindingsMembersMemberFromLogSinkRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamPartialPolicySpecBindingsMembersMemberFromLogSinkRef(obj: IamPartialPolicySpecBindingsMembersMemberFromLogSinkRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The IAMServiceAccount to be bound to the role.
 *
 * @schema IamPartialPolicySpecBindingsMembersMemberFromServiceAccountRef
 */
export interface IamPartialPolicySpecBindingsMembersMemberFromServiceAccountRef {
  /**
   * @schema IamPartialPolicySpecBindingsMembersMemberFromServiceAccountRef#name
   */
  readonly name: string;

  /**
   * @schema IamPartialPolicySpecBindingsMembersMemberFromServiceAccountRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'IamPartialPolicySpecBindingsMembersMemberFromServiceAccountRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamPartialPolicySpecBindingsMembersMemberFromServiceAccountRef(obj: IamPartialPolicySpecBindingsMembersMemberFromServiceAccountRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The ServiceIdentity whose service account (i.e., its 'status.email') is to be bound to the role.
 *
 * @schema IamPartialPolicySpecBindingsMembersMemberFromServiceIdentityRef
 */
export interface IamPartialPolicySpecBindingsMembersMemberFromServiceIdentityRef {
  /**
   * @schema IamPartialPolicySpecBindingsMembersMemberFromServiceIdentityRef#name
   */
  readonly name: string;

  /**
   * @schema IamPartialPolicySpecBindingsMembersMemberFromServiceIdentityRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'IamPartialPolicySpecBindingsMembersMemberFromServiceIdentityRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamPartialPolicySpecBindingsMembersMemberFromServiceIdentityRef(obj: IamPartialPolicySpecBindingsMembersMemberFromServiceIdentityRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The SQLInstance whose service account (i.e. its 'status.serviceAccountEmailAddress') is to be bound to the role.
 *
 * @schema IamPartialPolicySpecBindingsMembersMemberFromSqlInstanceRef
 */
export interface IamPartialPolicySpecBindingsMembersMemberFromSqlInstanceRef {
  /**
   * @schema IamPartialPolicySpecBindingsMembersMemberFromSqlInstanceRef#name
   */
  readonly name: string;

  /**
   * @schema IamPartialPolicySpecBindingsMembersMemberFromSqlInstanceRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'IamPartialPolicySpecBindingsMembersMemberFromSqlInstanceRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamPartialPolicySpecBindingsMembersMemberFromSqlInstanceRef(obj: IamPartialPolicySpecBindingsMembersMemberFromSqlInstanceRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * IAMPolicy is the Schema for the iampolicies API
 *
 * @schema IAMPolicy
 */
export class IamPolicy extends ApiObject {
  /**
   * Returns the apiVersion and kind for "IAMPolicy"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'iam.cnrm.cloud.google.com/v1beta1',
    kind: 'IAMPolicy',
  }

  /**
   * Renders a Kubernetes manifest for "IAMPolicy".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: IamPolicyProps = {}): any {
    return {
      ...IamPolicy.GVK,
      ...toJson_IamPolicyProps(props),
    };
  }

  /**
   * Defines a "IAMPolicy" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: IamPolicyProps = {}) {
    super(scope, id, {
      ...IamPolicy.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...IamPolicy.GVK,
      ...toJson_IamPolicyProps(resolved),
    };
  }
}

/**
 * IAMPolicy is the Schema for the iampolicies API
 *
 * @schema IAMPolicy
 */
export interface IamPolicyProps {
  /**
   * @schema IAMPolicy#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * IAMPolicySpec defines the desired state of IAMPolicy
   *
   * @schema IAMPolicy#spec
   */
  readonly spec?: IamPolicySpec;

}

/**
 * Converts an object of type 'IamPolicyProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamPolicyProps(obj: IamPolicyProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_IamPolicySpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * IAMPolicySpec defines the desired state of IAMPolicy
 *
 * @schema IamPolicySpec
 */
export interface IamPolicySpec {
  /**
   * Optional. The list of IAM audit configs.
   *
   * @schema IamPolicySpec#auditConfigs
   */
  readonly auditConfigs?: IamPolicySpecAuditConfigs[];

  /**
   * Optional. The list of IAM bindings.
   *
   * @schema IamPolicySpec#bindings
   */
  readonly bindings?: IamPolicySpecBindings[];

  /**
   * Immutable. Required. The GCP resource to set the IAM policy on.
   *
   * @schema IamPolicySpec#resourceRef
   */
  readonly resourceRef: IamPolicySpecResourceRef;

}

/**
 * Converts an object of type 'IamPolicySpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamPolicySpec(obj: IamPolicySpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'auditConfigs': obj.auditConfigs?.map(y => toJson_IamPolicySpecAuditConfigs(y)),
    'bindings': obj.bindings?.map(y => toJson_IamPolicySpecBindings(y)),
    'resourceRef': toJson_IamPolicySpecResourceRef(obj.resourceRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specifies the Cloud Audit Logs configuration for the IAM policy.
 *
 * @schema IamPolicySpecAuditConfigs
 */
export interface IamPolicySpecAuditConfigs {
  /**
   * Required. The configuration for logging of each type of permission.
   *
   * @schema IamPolicySpecAuditConfigs#auditLogConfigs
   */
  readonly auditLogConfigs: IamPolicySpecAuditConfigsAuditLogConfigs[];

  /**
   * Required. The service for which to enable Data Access audit logs. The special value 'allServices' covers all services. Note that if there are audit configs covering both 'allServices' and a specific service, then the union of the two audit configs is used for that service: the 'logTypes' specified in each 'auditLogConfig' are enabled, and the 'exemptedMembers' in each 'auditLogConfg' are exempted.
   *
   * @schema IamPolicySpecAuditConfigs#service
   */
  readonly service: string;

}

/**
 * Converts an object of type 'IamPolicySpecAuditConfigs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamPolicySpecAuditConfigs(obj: IamPolicySpecAuditConfigs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'auditLogConfigs': obj.auditLogConfigs?.map(y => toJson_IamPolicySpecAuditConfigsAuditLogConfigs(y)),
    'service': obj.service,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specifies the members to bind to an IAM role.
 *
 * @schema IamPolicySpecBindings
 */
export interface IamPolicySpecBindings {
  /**
   * Optional. The condition under which the binding applies.
   *
   * @schema IamPolicySpecBindings#condition
   */
  readonly condition?: IamPolicySpecBindingsCondition;

  /**
   * Optional. The list of IAM users to be bound to the role.
   *
   * @schema IamPolicySpecBindings#members
   */
  readonly members?: string[];

  /**
   * Required. The role to bind the users to.
   *
   * @schema IamPolicySpecBindings#role
   */
  readonly role: string;

}

/**
 * Converts an object of type 'IamPolicySpecBindings' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamPolicySpecBindings(obj: IamPolicySpecBindings | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'condition': toJson_IamPolicySpecBindingsCondition(obj.condition),
    'members': obj.members?.map(y => y),
    'role': obj.role,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Required. The GCP resource to set the IAM policy on.
 *
 * @schema IamPolicySpecResourceRef
 */
export interface IamPolicySpecResourceRef {
  /**
   * @schema IamPolicySpecResourceRef#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * @schema IamPolicySpecResourceRef#external
   */
  readonly external?: string;

  /**
   * @schema IamPolicySpecResourceRef#kind
   */
  readonly kind: string;

  /**
   * @schema IamPolicySpecResourceRef#name
   */
  readonly name?: string;

  /**
   * @schema IamPolicySpecResourceRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'IamPolicySpecResourceRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamPolicySpecResourceRef(obj: IamPolicySpecResourceRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'external': obj.external,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema IamPolicySpecAuditConfigsAuditLogConfigs
 */
export interface IamPolicySpecAuditConfigsAuditLogConfigs {
  /**
   * Identities that do not cause logging for this type of permission. The format is the same as that for 'members' in IAMPolicy/IAMPolicyMember.
   *
   * @schema IamPolicySpecAuditConfigsAuditLogConfigs#exemptedMembers
   */
  readonly exemptedMembers?: string[];

  /**
   * Permission type for which logging is to be configured. Must be one of 'DATA_READ', 'DATA_WRITE', or 'ADMIN_READ'.
   *
   * @schema IamPolicySpecAuditConfigsAuditLogConfigs#logType
   */
  readonly logType: string;

}

/**
 * Converts an object of type 'IamPolicySpecAuditConfigsAuditLogConfigs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamPolicySpecAuditConfigsAuditLogConfigs(obj: IamPolicySpecAuditConfigsAuditLogConfigs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exemptedMembers': obj.exemptedMembers?.map(y => y),
    'logType': obj.logType,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional. The condition under which the binding applies.
 *
 * @schema IamPolicySpecBindingsCondition
 */
export interface IamPolicySpecBindingsCondition {
  /**
   * @schema IamPolicySpecBindingsCondition#description
   */
  readonly description?: string;

  /**
   * @schema IamPolicySpecBindingsCondition#expression
   */
  readonly expression: string;

  /**
   * @schema IamPolicySpecBindingsCondition#title
   */
  readonly title: string;

}

/**
 * Converts an object of type 'IamPolicySpecBindingsCondition' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamPolicySpecBindingsCondition(obj: IamPolicySpecBindingsCondition | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'description': obj.description,
    'expression': obj.expression,
    'title': obj.title,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * IAMPolicyMember is the Schema for the iampolicies API
 *
 * @schema IAMPolicyMember
 */
export class IamPolicyMember extends ApiObject {
  /**
   * Returns the apiVersion and kind for "IAMPolicyMember"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'iam.cnrm.cloud.google.com/v1beta1',
    kind: 'IAMPolicyMember',
  }

  /**
   * Renders a Kubernetes manifest for "IAMPolicyMember".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: IamPolicyMemberProps = {}): any {
    return {
      ...IamPolicyMember.GVK,
      ...toJson_IamPolicyMemberProps(props),
    };
  }

  /**
   * Defines a "IAMPolicyMember" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: IamPolicyMemberProps = {}) {
    super(scope, id, {
      ...IamPolicyMember.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...IamPolicyMember.GVK,
      ...toJson_IamPolicyMemberProps(resolved),
    };
  }
}

/**
 * IAMPolicyMember is the Schema for the iampolicies API
 *
 * @schema IAMPolicyMember
 */
export interface IamPolicyMemberProps {
  /**
   * @schema IAMPolicyMember#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * IAMPolicyMemberSpec defines the desired state of IAMPolicyMember
   *
   * @schema IAMPolicyMember#spec
   */
  readonly spec?: IamPolicyMemberSpec;

}

/**
 * Converts an object of type 'IamPolicyMemberProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamPolicyMemberProps(obj: IamPolicyMemberProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_IamPolicyMemberSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * IAMPolicyMemberSpec defines the desired state of IAMPolicyMember
 *
 * @schema IamPolicyMemberSpec
 */
export interface IamPolicyMemberSpec {
  /**
   * Immutable. Optional. The condition under which the binding applies.
   *
   * @schema IamPolicyMemberSpec#condition
   */
  readonly condition?: IamPolicyMemberSpecCondition;

  /**
   * Immutable. The IAM identity to be bound to the role. Exactly one of 'member' or 'memberFrom' must be used.
   *
   * @schema IamPolicyMemberSpec#member
   */
  readonly member?: string;

  /**
   * Immutable. The IAM identity to be bound to the role. Exactly one of 'member' or 'memberFrom' must be used, and only one subfield within 'memberFrom' can be used.
   *
   * @schema IamPolicyMemberSpec#memberFrom
   */
  readonly memberFrom?: IamPolicyMemberSpecMemberFrom;

  /**
   * Immutable. Required. The GCP resource to set the IAM policy on.
   *
   * @schema IamPolicyMemberSpec#resourceRef
   */
  readonly resourceRef: IamPolicyMemberSpecResourceRef;

  /**
   * Immutable. Required. The role for which the Member will be bound.
   *
   * @schema IamPolicyMemberSpec#role
   */
  readonly role: string;

}

/**
 * Converts an object of type 'IamPolicyMemberSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamPolicyMemberSpec(obj: IamPolicyMemberSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'condition': toJson_IamPolicyMemberSpecCondition(obj.condition),
    'member': obj.member,
    'memberFrom': toJson_IamPolicyMemberSpecMemberFrom(obj.memberFrom),
    'resourceRef': toJson_IamPolicyMemberSpecResourceRef(obj.resourceRef),
    'role': obj.role,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Optional. The condition under which the binding applies.
 *
 * @schema IamPolicyMemberSpecCondition
 */
export interface IamPolicyMemberSpecCondition {
  /**
   * @schema IamPolicyMemberSpecCondition#description
   */
  readonly description?: string;

  /**
   * @schema IamPolicyMemberSpecCondition#expression
   */
  readonly expression: string;

  /**
   * @schema IamPolicyMemberSpecCondition#title
   */
  readonly title: string;

}

/**
 * Converts an object of type 'IamPolicyMemberSpecCondition' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamPolicyMemberSpecCondition(obj: IamPolicyMemberSpecCondition | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'description': obj.description,
    'expression': obj.expression,
    'title': obj.title,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. The IAM identity to be bound to the role. Exactly one of 'member' or 'memberFrom' must be used, and only one subfield within 'memberFrom' can be used.
 *
 * @schema IamPolicyMemberSpecMemberFrom
 */
export interface IamPolicyMemberSpecMemberFrom {
  /**
   * The LoggingLogSink whose writer identity (i.e. its 'status.writerIdentity') is to be bound to the role.
   *
   * @schema IamPolicyMemberSpecMemberFrom#logSinkRef
   */
  readonly logSinkRef?: IamPolicyMemberSpecMemberFromLogSinkRef;

  /**
   * The IAMServiceAccount to be bound to the role.
   *
   * @schema IamPolicyMemberSpecMemberFrom#serviceAccountRef
   */
  readonly serviceAccountRef?: IamPolicyMemberSpecMemberFromServiceAccountRef;

  /**
   * The ServiceIdentity whose service account (i.e., its 'status.email') is to be bound to the role.
   *
   * @schema IamPolicyMemberSpecMemberFrom#serviceIdentityRef
   */
  readonly serviceIdentityRef?: IamPolicyMemberSpecMemberFromServiceIdentityRef;

  /**
   * The SQLInstance whose service account (i.e. its 'status.serviceAccountEmailAddress') is to be bound to the role.
   *
   * @schema IamPolicyMemberSpecMemberFrom#sqlInstanceRef
   */
  readonly sqlInstanceRef?: IamPolicyMemberSpecMemberFromSqlInstanceRef;

}

/**
 * Converts an object of type 'IamPolicyMemberSpecMemberFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamPolicyMemberSpecMemberFrom(obj: IamPolicyMemberSpecMemberFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'logSinkRef': toJson_IamPolicyMemberSpecMemberFromLogSinkRef(obj.logSinkRef),
    'serviceAccountRef': toJson_IamPolicyMemberSpecMemberFromServiceAccountRef(obj.serviceAccountRef),
    'serviceIdentityRef': toJson_IamPolicyMemberSpecMemberFromServiceIdentityRef(obj.serviceIdentityRef),
    'sqlInstanceRef': toJson_IamPolicyMemberSpecMemberFromSqlInstanceRef(obj.sqlInstanceRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Required. The GCP resource to set the IAM policy on.
 *
 * @schema IamPolicyMemberSpecResourceRef
 */
export interface IamPolicyMemberSpecResourceRef {
  /**
   * @schema IamPolicyMemberSpecResourceRef#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * @schema IamPolicyMemberSpecResourceRef#external
   */
  readonly external?: string;

  /**
   * @schema IamPolicyMemberSpecResourceRef#kind
   */
  readonly kind: string;

  /**
   * @schema IamPolicyMemberSpecResourceRef#name
   */
  readonly name?: string;

  /**
   * @schema IamPolicyMemberSpecResourceRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'IamPolicyMemberSpecResourceRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamPolicyMemberSpecResourceRef(obj: IamPolicyMemberSpecResourceRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'external': obj.external,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The LoggingLogSink whose writer identity (i.e. its 'status.writerIdentity') is to be bound to the role.
 *
 * @schema IamPolicyMemberSpecMemberFromLogSinkRef
 */
export interface IamPolicyMemberSpecMemberFromLogSinkRef {
  /**
   * @schema IamPolicyMemberSpecMemberFromLogSinkRef#name
   */
  readonly name: string;

  /**
   * @schema IamPolicyMemberSpecMemberFromLogSinkRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'IamPolicyMemberSpecMemberFromLogSinkRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamPolicyMemberSpecMemberFromLogSinkRef(obj: IamPolicyMemberSpecMemberFromLogSinkRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The IAMServiceAccount to be bound to the role.
 *
 * @schema IamPolicyMemberSpecMemberFromServiceAccountRef
 */
export interface IamPolicyMemberSpecMemberFromServiceAccountRef {
  /**
   * @schema IamPolicyMemberSpecMemberFromServiceAccountRef#name
   */
  readonly name: string;

  /**
   * @schema IamPolicyMemberSpecMemberFromServiceAccountRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'IamPolicyMemberSpecMemberFromServiceAccountRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamPolicyMemberSpecMemberFromServiceAccountRef(obj: IamPolicyMemberSpecMemberFromServiceAccountRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The ServiceIdentity whose service account (i.e., its 'status.email') is to be bound to the role.
 *
 * @schema IamPolicyMemberSpecMemberFromServiceIdentityRef
 */
export interface IamPolicyMemberSpecMemberFromServiceIdentityRef {
  /**
   * @schema IamPolicyMemberSpecMemberFromServiceIdentityRef#name
   */
  readonly name: string;

  /**
   * @schema IamPolicyMemberSpecMemberFromServiceIdentityRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'IamPolicyMemberSpecMemberFromServiceIdentityRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamPolicyMemberSpecMemberFromServiceIdentityRef(obj: IamPolicyMemberSpecMemberFromServiceIdentityRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The SQLInstance whose service account (i.e. its 'status.serviceAccountEmailAddress') is to be bound to the role.
 *
 * @schema IamPolicyMemberSpecMemberFromSqlInstanceRef
 */
export interface IamPolicyMemberSpecMemberFromSqlInstanceRef {
  /**
   * @schema IamPolicyMemberSpecMemberFromSqlInstanceRef#name
   */
  readonly name: string;

  /**
   * @schema IamPolicyMemberSpecMemberFromSqlInstanceRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'IamPolicyMemberSpecMemberFromSqlInstanceRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamPolicyMemberSpecMemberFromSqlInstanceRef(obj: IamPolicyMemberSpecMemberFromSqlInstanceRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema IAMServiceAccount
 */
export class IamServiceAccount extends ApiObject {
  /**
   * Returns the apiVersion and kind for "IAMServiceAccount"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'iam.cnrm.cloud.google.com/v1beta1',
    kind: 'IAMServiceAccount',
  }

  /**
   * Renders a Kubernetes manifest for "IAMServiceAccount".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: IamServiceAccountProps = {}): any {
    return {
      ...IamServiceAccount.GVK,
      ...toJson_IamServiceAccountProps(props),
    };
  }

  /**
   * Defines a "IAMServiceAccount" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: IamServiceAccountProps = {}) {
    super(scope, id, {
      ...IamServiceAccount.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...IamServiceAccount.GVK,
      ...toJson_IamServiceAccountProps(resolved),
    };
  }
}

/**
 * @schema IAMServiceAccount
 */
export interface IamServiceAccountProps {
  /**
   * @schema IAMServiceAccount#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema IAMServiceAccount#spec
   */
  readonly spec?: IamServiceAccountSpec;

}

/**
 * Converts an object of type 'IamServiceAccountProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamServiceAccountProps(obj: IamServiceAccountProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_IamServiceAccountSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema IamServiceAccountSpec
 */
export interface IamServiceAccountSpec {
  /**
   * A text description of the service account. Must be less than or equal to 256 UTF-8 bytes.
   *
   * @schema IamServiceAccountSpec#description
   */
  readonly description?: string;

  /**
   * Whether the service account is disabled. Defaults to false.
   *
   * @default false.
   * @schema IamServiceAccountSpec#disabled
   */
  readonly disabled?: boolean;

  /**
   * The display name for the service account. Can be updated without creating a new resource.
   *
   * @schema IamServiceAccountSpec#displayName
   */
  readonly displayName?: string;

  /**
   * Immutable. Optional. The accountId of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
   *
   * @schema IamServiceAccountSpec#resourceID
   */
  readonly resourceId?: string;

}

/**
 * Converts an object of type 'IamServiceAccountSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamServiceAccountSpec(obj: IamServiceAccountSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'description': obj.description,
    'disabled': obj.disabled,
    'displayName': obj.displayName,
    'resourceID': obj.resourceId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema IAMServiceAccountKey
 */
export class IamServiceAccountKey extends ApiObject {
  /**
   * Returns the apiVersion and kind for "IAMServiceAccountKey"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'iam.cnrm.cloud.google.com/v1beta1',
    kind: 'IAMServiceAccountKey',
  }

  /**
   * Renders a Kubernetes manifest for "IAMServiceAccountKey".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: IamServiceAccountKeyProps): any {
    return {
      ...IamServiceAccountKey.GVK,
      ...toJson_IamServiceAccountKeyProps(props),
    };
  }

  /**
   * Defines a "IAMServiceAccountKey" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: IamServiceAccountKeyProps) {
    super(scope, id, {
      ...IamServiceAccountKey.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...IamServiceAccountKey.GVK,
      ...toJson_IamServiceAccountKeyProps(resolved),
    };
  }
}

/**
 * @schema IAMServiceAccountKey
 */
export interface IamServiceAccountKeyProps {
  /**
   * @schema IAMServiceAccountKey#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema IAMServiceAccountKey#spec
   */
  readonly spec: IamServiceAccountKeySpec;

}

/**
 * Converts an object of type 'IamServiceAccountKeyProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamServiceAccountKeyProps(obj: IamServiceAccountKeyProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_IamServiceAccountKeySpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema IamServiceAccountKeySpec
 */
export interface IamServiceAccountKeySpec {
  /**
   * Immutable. The algorithm used to generate the key, used only on create. KEY_ALG_RSA_2048 is the default algorithm. Valid values are: "KEY_ALG_RSA_1024", "KEY_ALG_RSA_2048".
   *
   * @schema IamServiceAccountKeySpec#keyAlgorithm
   */
  readonly keyAlgorithm?: string;

  /**
   * Immutable.
   *
   * @schema IamServiceAccountKeySpec#privateKeyType
   */
  readonly privateKeyType?: string;

  /**
   * Immutable. A field that allows clients to upload their own public key. If set, use this public key data to create a service account key for given service account. Please note, the expected format for this field is a base64 encoded X509_PEM.
   *
   * @schema IamServiceAccountKeySpec#publicKeyData
   */
  readonly publicKeyData?: string;

  /**
   * Immutable.
   *
   * @schema IamServiceAccountKeySpec#publicKeyType
   */
  readonly publicKeyType?: string;

  /**
   * @schema IamServiceAccountKeySpec#serviceAccountRef
   */
  readonly serviceAccountRef: IamServiceAccountKeySpecServiceAccountRef;

}

/**
 * Converts an object of type 'IamServiceAccountKeySpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamServiceAccountKeySpec(obj: IamServiceAccountKeySpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'keyAlgorithm': obj.keyAlgorithm,
    'privateKeyType': obj.privateKeyType,
    'publicKeyData': obj.publicKeyData,
    'publicKeyType': obj.publicKeyType,
    'serviceAccountRef': toJson_IamServiceAccountKeySpecServiceAccountRef(obj.serviceAccountRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema IamServiceAccountKeySpecServiceAccountRef
 */
export interface IamServiceAccountKeySpecServiceAccountRef {
  /**
   * Allowed value: The `email` field of an `IAMServiceAccount` resource.
   *
   * @schema IamServiceAccountKeySpecServiceAccountRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema IamServiceAccountKeySpecServiceAccountRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema IamServiceAccountKeySpecServiceAccountRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'IamServiceAccountKeySpecServiceAccountRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamServiceAccountKeySpecServiceAccountRef(obj: IamServiceAccountKeySpecServiceAccountRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema IAMWorkforcePool
 */
export class IamWorkforcePool extends ApiObject {
  /**
   * Returns the apiVersion and kind for "IAMWorkforcePool"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'iam.cnrm.cloud.google.com/v1beta1',
    kind: 'IAMWorkforcePool',
  }

  /**
   * Renders a Kubernetes manifest for "IAMWorkforcePool".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: IamWorkforcePoolProps): any {
    return {
      ...IamWorkforcePool.GVK,
      ...toJson_IamWorkforcePoolProps(props),
    };
  }

  /**
   * Defines a "IAMWorkforcePool" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: IamWorkforcePoolProps) {
    super(scope, id, {
      ...IamWorkforcePool.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...IamWorkforcePool.GVK,
      ...toJson_IamWorkforcePoolProps(resolved),
    };
  }
}

/**
 * @schema IAMWorkforcePool
 */
export interface IamWorkforcePoolProps {
  /**
   * @schema IAMWorkforcePool#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema IAMWorkforcePool#spec
   */
  readonly spec: IamWorkforcePoolSpec;

}

/**
 * Converts an object of type 'IamWorkforcePoolProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamWorkforcePoolProps(obj: IamWorkforcePoolProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_IamWorkforcePoolSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema IamWorkforcePoolSpec
 */
export interface IamWorkforcePoolSpec {
  /**
   * A user-specified description of the pool. Cannot exceed 256 characters.
   *
   * @schema IamWorkforcePoolSpec#description
   */
  readonly description?: string;

  /**
   * Whether the pool is disabled. You cannot use a disabled pool to exchange tokens, or use existing tokens to access resources. If the pool is re-enabled, existing tokens grant access again.
   *
   * @schema IamWorkforcePoolSpec#disabled
   */
  readonly disabled?: boolean;

  /**
   * A user-specified display name of the pool in Google Cloud Console. Cannot exceed 32 characters.
   *
   * @schema IamWorkforcePoolSpec#displayName
   */
  readonly displayName?: string;

  /**
   * Immutable. The location for the resource
   *
   * @schema IamWorkforcePoolSpec#location
   */
  readonly location: string;

  /**
   * Immutable. The Organization that this resource belongs to. Only one of [organizationRef] may be specified.
   *
   * @schema IamWorkforcePoolSpec#organizationRef
   */
  readonly organizationRef: IamWorkforcePoolSpecOrganizationRef;

  /**
   * Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
   *
   * @schema IamWorkforcePoolSpec#resourceID
   */
  readonly resourceId?: string;

  /**
   * How long the Google Cloud access tokens, console sign-in sessions, and gcloud sign-in sessions from this pool are valid. Must be greater than 15 minutes (900s) and less than 12 hours (43200s). If `session_duration` is not configured, minted credentials will have a default duration of one hour (3600s).
   *
   * @schema IamWorkforcePoolSpec#sessionDuration
   */
  readonly sessionDuration?: string;

}

/**
 * Converts an object of type 'IamWorkforcePoolSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamWorkforcePoolSpec(obj: IamWorkforcePoolSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'description': obj.description,
    'disabled': obj.disabled,
    'displayName': obj.displayName,
    'location': obj.location,
    'organizationRef': toJson_IamWorkforcePoolSpecOrganizationRef(obj.organizationRef),
    'resourceID': obj.resourceId,
    'sessionDuration': obj.sessionDuration,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. The Organization that this resource belongs to. Only one of [organizationRef] may be specified.
 *
 * @schema IamWorkforcePoolSpecOrganizationRef
 */
export interface IamWorkforcePoolSpecOrganizationRef {
  /**
   * Allowed value: The Google Cloud resource name of a Google Cloud Organization (format: `organizations/{{name}}`).
   *
   * @schema IamWorkforcePoolSpecOrganizationRef#external
   */
  readonly external?: string;

  /**
   * [WARNING] Organization not yet supported in Config Connector, use 'external' field to reference existing resources.
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema IamWorkforcePoolSpecOrganizationRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema IamWorkforcePoolSpecOrganizationRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'IamWorkforcePoolSpecOrganizationRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamWorkforcePoolSpecOrganizationRef(obj: IamWorkforcePoolSpecOrganizationRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema IAMWorkforcePoolProvider
 */
export class IamWorkforcePoolProvider extends ApiObject {
  /**
   * Returns the apiVersion and kind for "IAMWorkforcePoolProvider"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'iam.cnrm.cloud.google.com/v1beta1',
    kind: 'IAMWorkforcePoolProvider',
  }

  /**
   * Renders a Kubernetes manifest for "IAMWorkforcePoolProvider".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: IamWorkforcePoolProviderProps): any {
    return {
      ...IamWorkforcePoolProvider.GVK,
      ...toJson_IamWorkforcePoolProviderProps(props),
    };
  }

  /**
   * Defines a "IAMWorkforcePoolProvider" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: IamWorkforcePoolProviderProps) {
    super(scope, id, {
      ...IamWorkforcePoolProvider.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...IamWorkforcePoolProvider.GVK,
      ...toJson_IamWorkforcePoolProviderProps(resolved),
    };
  }
}

/**
 * @schema IAMWorkforcePoolProvider
 */
export interface IamWorkforcePoolProviderProps {
  /**
   * @schema IAMWorkforcePoolProvider#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema IAMWorkforcePoolProvider#spec
   */
  readonly spec: IamWorkforcePoolProviderSpec;

}

/**
 * Converts an object of type 'IamWorkforcePoolProviderProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamWorkforcePoolProviderProps(obj: IamWorkforcePoolProviderProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_IamWorkforcePoolProviderSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema IamWorkforcePoolProviderSpec
 */
export interface IamWorkforcePoolProviderSpec {
  /**
   * A [Common Expression Language](https://opensource.google/projects/cel) expression, in plain text, to restrict what otherwise valid authentication credentials issued by the provider should not be accepted. The expression must output a boolean representing whether to allow the federation. The following keywords may be referenced in the expressions: * `assertion`: JSON representing the authentication credential issued by the provider. * `google`: The Google attributes mapped from the assertion in the `attribute_mappings`. `google.profile_photo` and `google.display_name` are not supported. * `attribute`: The custom attributes mapped from the assertion in the `attribute_mappings`. The maximum length of the attribute condition expression is 4096 characters. If unspecified, all valid authentication credentials will be accepted. The following example shows how to only allow credentials with a mapped `google.groups` value of `admins`: ``` "'admins' in google.groups" ```
   *
   * @schema IamWorkforcePoolProviderSpec#attributeCondition
   */
  readonly attributeCondition?: string;

  /**
   * Required. Maps attributes from the authentication credentials issued by an external identity provider to Google Cloud attributes, such as `subject` and `segment`. Each key must be a string specifying the Google Cloud IAM attribute to map to. The following keys are supported: * `google.subject`: The principal IAM is authenticating. You can reference this value in IAM bindings. This is also the subject that appears in Cloud Logging logs. This is a required field and the mapped subject cannot exceed 127 bytes. * `google.groups`: Groups the authenticating user belongs to. You can grant groups access to resources using an IAM `principalSet` binding; access applies to all members of the group. * `google.display_name`: The name of the authenticated user. This is an optional field and the mapped display name cannot exceed 100 bytes. If not set, `google.subject` will be displayed instead. This attribute cannot be referenced in IAM bindings. * `google.profile_photo`: The URL that specifies the authenticated user's thumbnail photo. This is an optional field. When set, the image will be visible as the user's profile picture. If not set, a generic user icon will be displayed instead. This attribute cannot be referenced in IAM bindings. You can also provide custom attributes by specifying `attribute.{custom_attribute}`, where {custom_attribute} is the name of the custom attribute to be mapped. You can define a maximum of 50 custom attributes. The maximum length of a mapped attribute key is 100 characters, and the key may only contain the characters [a-z0-9_]. You can reference these attributes in IAM policies to define fine-grained access for a workforce pool to Google Cloud resources. For example:
   *
   * @schema IamWorkforcePoolProviderSpec#attributeMapping
   */
  readonly attributeMapping: { [key: string]: string };

  /**
   * A user-specified description of the provider. Cannot exceed 256 characters.
   *
   * @schema IamWorkforcePoolProviderSpec#description
   */
  readonly description?: string;

  /**
   * Whether the provider is disabled. You cannot use a disabled provider to exchange tokens. However, existing tokens still grant access.
   *
   * @schema IamWorkforcePoolProviderSpec#disabled
   */
  readonly disabled?: boolean;

  /**
   * A user-specified display name for the provider. Cannot exceed 32 characters.
   *
   * @schema IamWorkforcePoolProviderSpec#displayName
   */
  readonly displayName?: string;

  /**
   * Immutable. The location for the resource
   *
   * @schema IamWorkforcePoolProviderSpec#location
   */
  readonly location: string;

  /**
   * An OpenId Connect 1.0 identity provider configuration.
   *
   * @schema IamWorkforcePoolProviderSpec#oidc
   */
  readonly oidc?: IamWorkforcePoolProviderSpecOidc;

  /**
   * Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
   *
   * @schema IamWorkforcePoolProviderSpec#resourceID
   */
  readonly resourceId?: string;

  /**
   * A SAML identity provider configuration.
   *
   * @schema IamWorkforcePoolProviderSpec#saml
   */
  readonly saml?: IamWorkforcePoolProviderSpecSaml;

  /**
   * Immutable.
   *
   * @schema IamWorkforcePoolProviderSpec#workforcePoolRef
   */
  readonly workforcePoolRef: IamWorkforcePoolProviderSpecWorkforcePoolRef;

}

/**
 * Converts an object of type 'IamWorkforcePoolProviderSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamWorkforcePoolProviderSpec(obj: IamWorkforcePoolProviderSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'attributeCondition': obj.attributeCondition,
    'attributeMapping': ((obj.attributeMapping) === undefined) ? undefined : (Object.entries(obj.attributeMapping).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'description': obj.description,
    'disabled': obj.disabled,
    'displayName': obj.displayName,
    'location': obj.location,
    'oidc': toJson_IamWorkforcePoolProviderSpecOidc(obj.oidc),
    'resourceID': obj.resourceId,
    'saml': toJson_IamWorkforcePoolProviderSpecSaml(obj.saml),
    'workforcePoolRef': toJson_IamWorkforcePoolProviderSpecWorkforcePoolRef(obj.workforcePoolRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An OpenId Connect 1.0 identity provider configuration.
 *
 * @schema IamWorkforcePoolProviderSpecOidc
 */
export interface IamWorkforcePoolProviderSpecOidc {
  /**
   * Required. The client ID. Must match the audience claim of the JWT issued by the identity provider.
   *
   * @schema IamWorkforcePoolProviderSpecOidc#clientId
   */
  readonly clientId: string;

  /**
   * Required. The OIDC issuer URI. Must be a valid URI using the 'https' scheme.
   *
   * @schema IamWorkforcePoolProviderSpecOidc#issuerUri
   */
  readonly issuerUri: string;

  /**
   * Required. Configuration for web single sign-on for the OIDC provider. Here, web sign-in refers to console sign-in and gcloud sign-in through the browser.
   *
   * @schema IamWorkforcePoolProviderSpecOidc#webSsoConfig
   */
  readonly webSsoConfig: IamWorkforcePoolProviderSpecOidcWebSsoConfig;

}

/**
 * Converts an object of type 'IamWorkforcePoolProviderSpecOidc' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamWorkforcePoolProviderSpecOidc(obj: IamWorkforcePoolProviderSpecOidc | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'clientId': obj.clientId,
    'issuerUri': obj.issuerUri,
    'webSsoConfig': toJson_IamWorkforcePoolProviderSpecOidcWebSsoConfig(obj.webSsoConfig),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A SAML identity provider configuration.
 *
 * @schema IamWorkforcePoolProviderSpecSaml
 */
export interface IamWorkforcePoolProviderSpecSaml {
  /**
   * Required. SAML Identity provider configuration metadata xml doc. The xml document should comply with [SAML 2.0 specification](https://docs.oasis-open.org/security/saml/v2.0/saml-metadata-2.0-os.pdf). The max size of the acceptable xml document will be bounded to 128k characters. The metadata xml document should satisfy the following constraints: 1) Must contain an Identity Provider Entity ID. 2) Must contain at least one non-expired signing key certificate. 3) For each signing key: a) Valid from should be no more than 7 days from now. b) Valid to should be no more than 10 years in the future. 4) Up to 3 IdP signing keys are allowed in the metadata xml. When updating the provider's metadata xml, at least one non-expired signing key must overlap with the existing metadata. This requirement is skipped if there are no non-expired signing keys present in the existing metadata.
   *
   * @schema IamWorkforcePoolProviderSpecSaml#idpMetadataXml
   */
  readonly idpMetadataXml: string;

}

/**
 * Converts an object of type 'IamWorkforcePoolProviderSpecSaml' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamWorkforcePoolProviderSpecSaml(obj: IamWorkforcePoolProviderSpecSaml | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'idpMetadataXml': obj.idpMetadataXml,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable.
 *
 * @schema IamWorkforcePoolProviderSpecWorkforcePoolRef
 */
export interface IamWorkforcePoolProviderSpecWorkforcePoolRef {
  /**
   * The workforce_pool for the resource
   *
   * Allowed value: The Google Cloud resource name of an `IAMWorkforcePool` resource (format: `locations/{{location}}/workforcePools/{{name}}`).
   *
   * @schema IamWorkforcePoolProviderSpecWorkforcePoolRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema IamWorkforcePoolProviderSpecWorkforcePoolRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema IamWorkforcePoolProviderSpecWorkforcePoolRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'IamWorkforcePoolProviderSpecWorkforcePoolRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamWorkforcePoolProviderSpecWorkforcePoolRef(obj: IamWorkforcePoolProviderSpecWorkforcePoolRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Required. Configuration for web single sign-on for the OIDC provider. Here, web sign-in refers to console sign-in and gcloud sign-in through the browser.
 *
 * @schema IamWorkforcePoolProviderSpecOidcWebSsoConfig
 */
export interface IamWorkforcePoolProviderSpecOidcWebSsoConfig {
  /**
   * Required. The behavior for how OIDC Claims are included in the `assertion` object used for attribute mapping and attribute condition. Possible values: ASSERTION_CLAIMS_BEHAVIOR_UNSPECIFIED, ONLY_ID_TOKEN_CLAIMS
   *
   * @schema IamWorkforcePoolProviderSpecOidcWebSsoConfig#assertionClaimsBehavior
   */
  readonly assertionClaimsBehavior: string;

  /**
   * Required. The Response Type to request for in the OIDC Authorization Request for web sign-in. Possible values: RESPONSE_TYPE_UNSPECIFIED, ID_TOKEN
   *
   * @schema IamWorkforcePoolProviderSpecOidcWebSsoConfig#responseType
   */
  readonly responseType: string;

}

/**
 * Converts an object of type 'IamWorkforcePoolProviderSpecOidcWebSsoConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamWorkforcePoolProviderSpecOidcWebSsoConfig(obj: IamWorkforcePoolProviderSpecOidcWebSsoConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'assertionClaimsBehavior': obj.assertionClaimsBehavior,
    'responseType': obj.responseType,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema IAMWorkloadIdentityPool
 */
export class IamWorkloadIdentityPool extends ApiObject {
  /**
   * Returns the apiVersion and kind for "IAMWorkloadIdentityPool"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'iam.cnrm.cloud.google.com/v1beta1',
    kind: 'IAMWorkloadIdentityPool',
  }

  /**
   * Renders a Kubernetes manifest for "IAMWorkloadIdentityPool".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: IamWorkloadIdentityPoolProps): any {
    return {
      ...IamWorkloadIdentityPool.GVK,
      ...toJson_IamWorkloadIdentityPoolProps(props),
    };
  }

  /**
   * Defines a "IAMWorkloadIdentityPool" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: IamWorkloadIdentityPoolProps) {
    super(scope, id, {
      ...IamWorkloadIdentityPool.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...IamWorkloadIdentityPool.GVK,
      ...toJson_IamWorkloadIdentityPoolProps(resolved),
    };
  }
}

/**
 * @schema IAMWorkloadIdentityPool
 */
export interface IamWorkloadIdentityPoolProps {
  /**
   * @schema IAMWorkloadIdentityPool#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema IAMWorkloadIdentityPool#spec
   */
  readonly spec: IamWorkloadIdentityPoolSpec;

}

/**
 * Converts an object of type 'IamWorkloadIdentityPoolProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamWorkloadIdentityPoolProps(obj: IamWorkloadIdentityPoolProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_IamWorkloadIdentityPoolSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema IamWorkloadIdentityPoolSpec
 */
export interface IamWorkloadIdentityPoolSpec {
  /**
   * A description of the pool. Cannot exceed 256 characters.
   *
   * @schema IamWorkloadIdentityPoolSpec#description
   */
  readonly description?: string;

  /**
   * Whether the pool is disabled. You cannot use a disabled pool to exchange tokens, or use existing tokens to access resources. If the pool is re-enabled, existing tokens grant access again.
   *
   * @schema IamWorkloadIdentityPoolSpec#disabled
   */
  readonly disabled?: boolean;

  /**
   * A display name for the pool. Cannot exceed 32 characters.
   *
   * @schema IamWorkloadIdentityPoolSpec#displayName
   */
  readonly displayName?: string;

  /**
   * Immutable. The location for the resource
   *
   * @schema IamWorkloadIdentityPoolSpec#location
   */
  readonly location: string;

  /**
   * Immutable. The Project that this resource belongs to.
   *
   * @schema IamWorkloadIdentityPoolSpec#projectRef
   */
  readonly projectRef: IamWorkloadIdentityPoolSpecProjectRef;

  /**
   * Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
   *
   * @schema IamWorkloadIdentityPoolSpec#resourceID
   */
  readonly resourceId?: string;

}

/**
 * Converts an object of type 'IamWorkloadIdentityPoolSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamWorkloadIdentityPoolSpec(obj: IamWorkloadIdentityPoolSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'description': obj.description,
    'disabled': obj.disabled,
    'displayName': obj.displayName,
    'location': obj.location,
    'projectRef': toJson_IamWorkloadIdentityPoolSpecProjectRef(obj.projectRef),
    'resourceID': obj.resourceId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. The Project that this resource belongs to.
 *
 * @schema IamWorkloadIdentityPoolSpecProjectRef
 */
export interface IamWorkloadIdentityPoolSpecProjectRef {
  /**
   * The project for the resource
   *
   * Allowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).
   *
   * @schema IamWorkloadIdentityPoolSpecProjectRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema IamWorkloadIdentityPoolSpecProjectRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema IamWorkloadIdentityPoolSpecProjectRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'IamWorkloadIdentityPoolSpecProjectRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamWorkloadIdentityPoolSpecProjectRef(obj: IamWorkloadIdentityPoolSpecProjectRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema IAMWorkloadIdentityPoolProvider
 */
export class IamWorkloadIdentityPoolProvider extends ApiObject {
  /**
   * Returns the apiVersion and kind for "IAMWorkloadIdentityPoolProvider"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'iam.cnrm.cloud.google.com/v1beta1',
    kind: 'IAMWorkloadIdentityPoolProvider',
  }

  /**
   * Renders a Kubernetes manifest for "IAMWorkloadIdentityPoolProvider".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: IamWorkloadIdentityPoolProviderProps): any {
    return {
      ...IamWorkloadIdentityPoolProvider.GVK,
      ...toJson_IamWorkloadIdentityPoolProviderProps(props),
    };
  }

  /**
   * Defines a "IAMWorkloadIdentityPoolProvider" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: IamWorkloadIdentityPoolProviderProps) {
    super(scope, id, {
      ...IamWorkloadIdentityPoolProvider.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...IamWorkloadIdentityPoolProvider.GVK,
      ...toJson_IamWorkloadIdentityPoolProviderProps(resolved),
    };
  }
}

/**
 * @schema IAMWorkloadIdentityPoolProvider
 */
export interface IamWorkloadIdentityPoolProviderProps {
  /**
   * @schema IAMWorkloadIdentityPoolProvider#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema IAMWorkloadIdentityPoolProvider#spec
   */
  readonly spec: IamWorkloadIdentityPoolProviderSpec;

}

/**
 * Converts an object of type 'IamWorkloadIdentityPoolProviderProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamWorkloadIdentityPoolProviderProps(obj: IamWorkloadIdentityPoolProviderProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_IamWorkloadIdentityPoolProviderSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema IamWorkloadIdentityPoolProviderSpec
 */
export interface IamWorkloadIdentityPoolProviderSpec {
  /**
   * [A Common Expression Language](https://opensource.google/projects/cel) expression, in plain text, to restrict what otherwise valid authentication credentials issued by the provider should not be accepted. The expression must output a boolean representing whether to allow the federation. The following keywords may be referenced in the expressions: * `assertion`: JSON representing the authentication credential issued by the provider. * `google`: The Google attributes mapped from the assertion in the `attribute_mappings`. * `attribute`: The custom attributes mapped from the assertion in the `attribute_mappings`. The maximum length of the attribute condition expression is 4096 characters. If unspecified, all valid authentication credential are accepted. The following example shows how to only allow credentials with a mapped `google.groups` value of `admins`: ``` "'admins' in google.groups" ```
   *
   * @schema IamWorkloadIdentityPoolProviderSpec#attributeCondition
   */
  readonly attributeCondition?: string;

  /**
   * Maps attributes from authentication credentials issued by an external identity provider to Google Cloud attributes, such as `subject` and `segment`. Each key must be a string specifying the Google Cloud IAM attribute to map to. The following keys are supported: * `google.subject`: The principal IAM is authenticating. You can reference this value in IAM bindings. This is also the subject that appears in Cloud Logging logs. Cannot exceed 127 characters. * `google.groups`: Groups the external identity belongs to. You can grant groups access to resources using an IAM `principalSet` binding; access applies to all members of the group. You can also provide custom attributes by specifying `attribute.{custom_attribute}`, where `{custom_attribute}` is the name of the custom attribute to be mapped. You can define a maximum of 50 custom attributes. The maximum length of a mapped attribute key is 100 characters, and the key may only contain the characters [a-z0-9_]. You can reference these attributes in IAM policies to define fine-grained access for a workload to Google Cloud resources. For example: * `google.subject`: `principal://iam.googleapis.com/projects/{project}/locations/{location}/workloadIdentityPools/{pool}/subject/{value}` * `google.groups`: `principalSet://iam.googleapis.com/projects/{project}/locations/{location}/workloadIdentityPools/{pool}/group/{value}` * `attribute.{custom_attribute}`: `principalSet://iam.googleapis.com/projects/{project}/locations/{location}/workloadIdentityPools/{pool}/attribute.{custom_attribute}/{value}` Each value must be a [Common Expression Language] (https://opensource.google/projects/cel) function that maps an identity provider credential to the normalized attribute specified by the corresponding map key. You can use the `assertion` keyword in the expression to access a JSON representation of the authentication credential issued by the provider. The maximum length of an attribute mapping expression is 2048 characters. When evaluated, the total size of all mapped attributes must not exceed 8KB. For AWS providers, if no attribute mapping is defined, the following default mapping applies: ``` { "google.subject":"assertion.arn", "attribute.aws_role": "assertion.arn.contains('assumed-role')" " ? assertion.arn.extract('{account_arn}assumed-role/')" " + 'assumed-role/'" " + assertion.arn.extract('assumed-role/{role_name}/')" " : assertion.arn", } ``` If any custom attribute mappings are defined, they must include a mapping to the `google.subject` attribute. For OIDC providers, you must supply a custom mapping, which must include the `google.subject` attribute. For example, the following maps the `sub` claim of the incoming credential to the `subject` attribute on a Google token: ``` {"google.subject": "assertion.sub"} ```
   *
   * @schema IamWorkloadIdentityPoolProviderSpec#attributeMapping
   */
  readonly attributeMapping?: { [key: string]: string };

  /**
   * An Amazon Web Services identity provider.
   *
   * @schema IamWorkloadIdentityPoolProviderSpec#aws
   */
  readonly aws?: IamWorkloadIdentityPoolProviderSpecAws;

  /**
   * A description for the provider. Cannot exceed 256 characters.
   *
   * @schema IamWorkloadIdentityPoolProviderSpec#description
   */
  readonly description?: string;

  /**
   * Whether the provider is disabled. You cannot use a disabled provider to exchange tokens. However, existing tokens still grant access.
   *
   * @schema IamWorkloadIdentityPoolProviderSpec#disabled
   */
  readonly disabled?: boolean;

  /**
   * A display name for the provider. Cannot exceed 32 characters.
   *
   * @schema IamWorkloadIdentityPoolProviderSpec#displayName
   */
  readonly displayName?: string;

  /**
   * Immutable. The location for the resource
   *
   * @schema IamWorkloadIdentityPoolProviderSpec#location
   */
  readonly location: string;

  /**
   * An OpenId Connect 1.0 identity provider.
   *
   * @schema IamWorkloadIdentityPoolProviderSpec#oidc
   */
  readonly oidc?: IamWorkloadIdentityPoolProviderSpecOidc;

  /**
   * Immutable. The Project that this resource belongs to.
   *
   * @schema IamWorkloadIdentityPoolProviderSpec#projectRef
   */
  readonly projectRef: IamWorkloadIdentityPoolProviderSpecProjectRef;

  /**
   * Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
   *
   * @schema IamWorkloadIdentityPoolProviderSpec#resourceID
   */
  readonly resourceId?: string;

  /**
   * Immutable.
   *
   * @schema IamWorkloadIdentityPoolProviderSpec#workloadIdentityPoolRef
   */
  readonly workloadIdentityPoolRef: IamWorkloadIdentityPoolProviderSpecWorkloadIdentityPoolRef;

}

/**
 * Converts an object of type 'IamWorkloadIdentityPoolProviderSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamWorkloadIdentityPoolProviderSpec(obj: IamWorkloadIdentityPoolProviderSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'attributeCondition': obj.attributeCondition,
    'attributeMapping': ((obj.attributeMapping) === undefined) ? undefined : (Object.entries(obj.attributeMapping).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'aws': toJson_IamWorkloadIdentityPoolProviderSpecAws(obj.aws),
    'description': obj.description,
    'disabled': obj.disabled,
    'displayName': obj.displayName,
    'location': obj.location,
    'oidc': toJson_IamWorkloadIdentityPoolProviderSpecOidc(obj.oidc),
    'projectRef': toJson_IamWorkloadIdentityPoolProviderSpecProjectRef(obj.projectRef),
    'resourceID': obj.resourceId,
    'workloadIdentityPoolRef': toJson_IamWorkloadIdentityPoolProviderSpecWorkloadIdentityPoolRef(obj.workloadIdentityPoolRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An Amazon Web Services identity provider.
 *
 * @schema IamWorkloadIdentityPoolProviderSpecAws
 */
export interface IamWorkloadIdentityPoolProviderSpecAws {
  /**
   * Required. The AWS account ID.
   *
   * @schema IamWorkloadIdentityPoolProviderSpecAws#accountId
   */
  readonly accountId: string;

  /**
   * A list of AWS STS URIs that can be used when exchanging credentials. If not provided, any valid AWS STS URI is allowed. URIs must use the form `https://sts.amazonaws.com` or `https://sts.{region}.amazonaws.com`, where {region} is a valid AWS region. You can specify a maximum of 25 URIs.
   *
   * @schema IamWorkloadIdentityPoolProviderSpecAws#stsUri
   */
  readonly stsUri?: string[];

}

/**
 * Converts an object of type 'IamWorkloadIdentityPoolProviderSpecAws' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamWorkloadIdentityPoolProviderSpecAws(obj: IamWorkloadIdentityPoolProviderSpecAws | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'accountId': obj.accountId,
    'stsUri': obj.stsUri?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An OpenId Connect 1.0 identity provider.
 *
 * @schema IamWorkloadIdentityPoolProviderSpecOidc
 */
export interface IamWorkloadIdentityPoolProviderSpecOidc {
  /**
   * Acceptable values for the `aud` field (audience) in the OIDC token. Token exchange requests are rejected if the token audience does not match one of the configured values. Each audience may be at most 256 characters. A maximum of 10 audiences may be configured. If this list is empty, the OIDC token audience must be equal to the full canonical resource name of the WorkloadIdentityPoolProvider, with or without the HTTPS prefix. For example: ``` //iam.googleapis.com/projects//locations//workloadIdentityPools//providers/ https://iam.googleapis.com/projects//locations//workloadIdentityPools//providers/ ```
   *
   * @schema IamWorkloadIdentityPoolProviderSpecOidc#allowedAudiences
   */
  readonly allowedAudiences?: string[];

  /**
   * Required. The OIDC issuer URL. Must be an HTTPS endpoint.
   *
   * @schema IamWorkloadIdentityPoolProviderSpecOidc#issuerUri
   */
  readonly issuerUri: string;

}

/**
 * Converts an object of type 'IamWorkloadIdentityPoolProviderSpecOidc' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamWorkloadIdentityPoolProviderSpecOidc(obj: IamWorkloadIdentityPoolProviderSpecOidc | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'allowedAudiences': obj.allowedAudiences?.map(y => y),
    'issuerUri': obj.issuerUri,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. The Project that this resource belongs to.
 *
 * @schema IamWorkloadIdentityPoolProviderSpecProjectRef
 */
export interface IamWorkloadIdentityPoolProviderSpecProjectRef {
  /**
   * The project for the resource
   *
   * Allowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).
   *
   * @schema IamWorkloadIdentityPoolProviderSpecProjectRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema IamWorkloadIdentityPoolProviderSpecProjectRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema IamWorkloadIdentityPoolProviderSpecProjectRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'IamWorkloadIdentityPoolProviderSpecProjectRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamWorkloadIdentityPoolProviderSpecProjectRef(obj: IamWorkloadIdentityPoolProviderSpecProjectRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable.
 *
 * @schema IamWorkloadIdentityPoolProviderSpecWorkloadIdentityPoolRef
 */
export interface IamWorkloadIdentityPoolProviderSpecWorkloadIdentityPoolRef {
  /**
   * The workloadIdentityPool for the resource
   *
   * Allowed value: The Google Cloud resource name of an `IAMWorkloadIdentityPool` resource (format: `projects/{{project}}/locations/{{location}}/workloadIdentityPools/{{name}}`).
   *
   * @schema IamWorkloadIdentityPoolProviderSpecWorkloadIdentityPoolRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema IamWorkloadIdentityPoolProviderSpecWorkloadIdentityPoolRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema IamWorkloadIdentityPoolProviderSpecWorkloadIdentityPoolRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'IamWorkloadIdentityPoolProviderSpecWorkloadIdentityPoolRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IamWorkloadIdentityPoolProviderSpecWorkloadIdentityPoolRef(obj: IamWorkloadIdentityPoolProviderSpecWorkloadIdentityPoolRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

