// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 *
 *
 * @schema SpannerDatabase
 */
export class SpannerDatabase extends ApiObject {
  /**
   * Returns the apiVersion and kind for "SpannerDatabase"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'spanner.cnrm.cloud.google.com/v1beta1',
    kind: 'SpannerDatabase',
  }

  /**
   * Renders a Kubernetes manifest for "SpannerDatabase".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: SpannerDatabaseProps): any {
    return {
      ...SpannerDatabase.GVK,
      ...toJson_SpannerDatabaseProps(props),
    };
  }

  /**
   * Defines a "SpannerDatabase" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: SpannerDatabaseProps) {
    super(scope, id, {
      ...SpannerDatabase.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...SpannerDatabase.GVK,
      ...toJson_SpannerDatabaseProps(resolved),
    };
  }
}

/**
 * @schema SpannerDatabase
 */
export interface SpannerDatabaseProps {
  /**
   * @schema SpannerDatabase#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema SpannerDatabase#spec
   */
  readonly spec: SpannerDatabaseSpec;

}

/**
 * Converts an object of type 'SpannerDatabaseProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SpannerDatabaseProps(obj: SpannerDatabaseProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_SpannerDatabaseSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema SpannerDatabaseSpec
 */
export interface SpannerDatabaseSpec {
  /**
   * Immutable. The dialect of the Cloud Spanner Database.
   * If it is not provided, "GOOGLE_STANDARD_SQL" will be used. Possible values: ["GOOGLE_STANDARD_SQL", "POSTGRESQL"].
   *
   * @schema SpannerDatabaseSpec#databaseDialect
   */
  readonly databaseDialect?: string;

  /**
   * An optional list of DDL statements to run inside the newly created
   * database. Statements can create tables, indexes, etc. These statements
   * execute atomically with the creation of the database: if there is an
   * error in any statement, the database is not created.
   *
   * @schema SpannerDatabaseSpec#ddl
   */
  readonly ddl?: string[];

  /**
   * Immutable. Encryption configuration for the database.
   *
   * @schema SpannerDatabaseSpec#encryptionConfig
   */
  readonly encryptionConfig?: SpannerDatabaseSpecEncryptionConfig;

  /**
   * The instance to create the database on.
   *
   * @schema SpannerDatabaseSpec#instanceRef
   */
  readonly instanceRef: SpannerDatabaseSpecInstanceRef;

  /**
   * Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
   *
   * @schema SpannerDatabaseSpec#resourceID
   */
  readonly resourceId?: string;

  /**
   * The retention period for the database. The retention period must be between 1 hour
   * and 7 days, and can be specified in days, hours, minutes, or seconds. For example,
   * the values 1d, 24h, 1440m, and 86400s are equivalent. Default value is 1h.
   * If this property is used, you must avoid adding new DDL statements to 'ddl' that
   * update the database's version_retention_period.
   *
   * @schema SpannerDatabaseSpec#versionRetentionPeriod
   */
  readonly versionRetentionPeriod?: string;

}

/**
 * Converts an object of type 'SpannerDatabaseSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SpannerDatabaseSpec(obj: SpannerDatabaseSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'databaseDialect': obj.databaseDialect,
    'ddl': obj.ddl?.map(y => y),
    'encryptionConfig': toJson_SpannerDatabaseSpecEncryptionConfig(obj.encryptionConfig),
    'instanceRef': toJson_SpannerDatabaseSpecInstanceRef(obj.instanceRef),
    'resourceID': obj.resourceId,
    'versionRetentionPeriod': obj.versionRetentionPeriod,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Encryption configuration for the database.
 *
 * @schema SpannerDatabaseSpecEncryptionConfig
 */
export interface SpannerDatabaseSpecEncryptionConfig {
  /**
   * Fully qualified name of the KMS key to use to encrypt this database. This key
   * must exist in the same location as the Spanner Database.
   *
   * @schema SpannerDatabaseSpecEncryptionConfig#kmsKeyRef
   */
  readonly kmsKeyRef: SpannerDatabaseSpecEncryptionConfigKmsKeyRef;

}

/**
 * Converts an object of type 'SpannerDatabaseSpecEncryptionConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SpannerDatabaseSpecEncryptionConfig(obj: SpannerDatabaseSpecEncryptionConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'kmsKeyRef': toJson_SpannerDatabaseSpecEncryptionConfigKmsKeyRef(obj.kmsKeyRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The instance to create the database on.
 *
 * @schema SpannerDatabaseSpecInstanceRef
 */
export interface SpannerDatabaseSpecInstanceRef {
  /**
   * Allowed value: The `name` field of a `SpannerInstance` resource.
   *
   * @schema SpannerDatabaseSpecInstanceRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema SpannerDatabaseSpecInstanceRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema SpannerDatabaseSpecInstanceRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'SpannerDatabaseSpecInstanceRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SpannerDatabaseSpecInstanceRef(obj: SpannerDatabaseSpecInstanceRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Fully qualified name of the KMS key to use to encrypt this database. This key
 * must exist in the same location as the Spanner Database.
 *
 * @schema SpannerDatabaseSpecEncryptionConfigKmsKeyRef
 */
export interface SpannerDatabaseSpecEncryptionConfigKmsKeyRef {
  /**
   * Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.
   *
   * @schema SpannerDatabaseSpecEncryptionConfigKmsKeyRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema SpannerDatabaseSpecEncryptionConfigKmsKeyRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema SpannerDatabaseSpecEncryptionConfigKmsKeyRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'SpannerDatabaseSpecEncryptionConfigKmsKeyRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SpannerDatabaseSpecEncryptionConfigKmsKeyRef(obj: SpannerDatabaseSpecEncryptionConfigKmsKeyRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema SpannerInstance
 */
export class SpannerInstance extends ApiObject {
  /**
   * Returns the apiVersion and kind for "SpannerInstance"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'spanner.cnrm.cloud.google.com/v1beta1',
    kind: 'SpannerInstance',
  }

  /**
   * Renders a Kubernetes manifest for "SpannerInstance".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: SpannerInstanceProps): any {
    return {
      ...SpannerInstance.GVK,
      ...toJson_SpannerInstanceProps(props),
    };
  }

  /**
   * Defines a "SpannerInstance" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: SpannerInstanceProps) {
    super(scope, id, {
      ...SpannerInstance.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...SpannerInstance.GVK,
      ...toJson_SpannerInstanceProps(resolved),
    };
  }
}

/**
 * @schema SpannerInstance
 */
export interface SpannerInstanceProps {
  /**
   * @schema SpannerInstance#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema SpannerInstance#spec
   */
  readonly spec: SpannerInstanceSpec;

}

/**
 * Converts an object of type 'SpannerInstanceProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SpannerInstanceProps(obj: SpannerInstanceProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_SpannerInstanceSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema SpannerInstanceSpec
 */
export interface SpannerInstanceSpec {
  /**
   * Immutable. The name of the instance's configuration (similar but not
   * quite the same as a region) which defines the geographic placement and
   * replication of your databases in this instance. It determines where your data
   * is stored. Values are typically of the form 'regional-europe-west1' , 'us-central' etc.
   * In order to obtain a valid list please consult the
   * [Configuration section of the docs](https://cloud.google.com/spanner/docs/instances).
   *
   * @schema SpannerInstanceSpec#config
   */
  readonly config: string;

  /**
   * The descriptive name for this instance as it appears in UIs. Must be
   * unique per project and between 4 and 30 characters in length.
   *
   * @schema SpannerInstanceSpec#displayName
   */
  readonly displayName: string;

  /**
   * @schema SpannerInstanceSpec#numNodes
   */
  readonly numNodes?: number;

  /**
   * @schema SpannerInstanceSpec#processingUnits
   */
  readonly processingUnits?: number;

  /**
   * Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
   *
   * @schema SpannerInstanceSpec#resourceID
   */
  readonly resourceId?: string;

}

/**
 * Converts an object of type 'SpannerInstanceSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SpannerInstanceSpec(obj: SpannerInstanceSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'config': obj.config,
    'displayName': obj.displayName,
    'numNodes': obj.numNodes,
    'processingUnits': obj.processingUnits,
    'resourceID': obj.resourceId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

