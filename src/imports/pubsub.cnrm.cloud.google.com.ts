// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 *
 *
 * @schema PubSubSchema
 */
export class PubSubSchema extends ApiObject {
  /**
   * Returns the apiVersion and kind for "PubSubSchema"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'pubsub.cnrm.cloud.google.com/v1beta1',
    kind: 'PubSubSchema',
  }

  /**
   * Renders a Kubernetes manifest for "PubSubSchema".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: PubSubSchemaProps): any {
    return {
      ...PubSubSchema.GVK,
      ...toJson_PubSubSchemaProps(props),
    };
  }

  /**
   * Defines a "PubSubSchema" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: PubSubSchemaProps) {
    super(scope, id, {
      ...PubSubSchema.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...PubSubSchema.GVK,
      ...toJson_PubSubSchemaProps(resolved),
    };
  }
}

/**
 * @schema PubSubSchema
 */
export interface PubSubSchemaProps {
  /**
   * @schema PubSubSchema#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema PubSubSchema#spec
   */
  readonly spec: PubSubSchemaSpec;

}

/**
 * Converts an object of type 'PubSubSchemaProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PubSubSchemaProps(obj: PubSubSchemaProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_PubSubSchemaSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PubSubSchemaSpec
 */
export interface PubSubSchemaSpec {
  /**
   * The definition of the schema.
   * This should contain a string representing the full definition of the schema
   * that is a valid schema definition of the type specified in type.
   *
   * @schema PubSubSchemaSpec#definition
   */
  readonly definition?: string;

  /**
   * The project that this resource belongs to.
   *
   * @schema PubSubSchemaSpec#projectRef
   */
  readonly projectRef: PubSubSchemaSpecProjectRef;

  /**
   * Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
   *
   * @schema PubSubSchemaSpec#resourceID
   */
  readonly resourceId?: string;

  /**
   * The type of the schema definition Default value: "TYPE_UNSPECIFIED" Possible values: ["TYPE_UNSPECIFIED", "PROTOCOL_BUFFER", "AVRO"].
   *
   * @schema PubSubSchemaSpec#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'PubSubSchemaSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PubSubSchemaSpec(obj: PubSubSchemaSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'definition': obj.definition,
    'projectRef': toJson_PubSubSchemaSpecProjectRef(obj.projectRef),
    'resourceID': obj.resourceId,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The project that this resource belongs to.
 *
 * @schema PubSubSchemaSpecProjectRef
 */
export interface PubSubSchemaSpecProjectRef {
  /**
   * Allowed value: The `name` field of a `Project` resource.
   *
   * @schema PubSubSchemaSpecProjectRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema PubSubSchemaSpecProjectRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema PubSubSchemaSpecProjectRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'PubSubSchemaSpecProjectRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PubSubSchemaSpecProjectRef(obj: PubSubSchemaSpecProjectRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema PubSubSubscription
 */
export class PubSubSubscription extends ApiObject {
  /**
   * Returns the apiVersion and kind for "PubSubSubscription"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'pubsub.cnrm.cloud.google.com/v1beta1',
    kind: 'PubSubSubscription',
  }

  /**
   * Renders a Kubernetes manifest for "PubSubSubscription".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: PubSubSubscriptionProps): any {
    return {
      ...PubSubSubscription.GVK,
      ...toJson_PubSubSubscriptionProps(props),
    };
  }

  /**
   * Defines a "PubSubSubscription" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: PubSubSubscriptionProps) {
    super(scope, id, {
      ...PubSubSubscription.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...PubSubSubscription.GVK,
      ...toJson_PubSubSubscriptionProps(resolved),
    };
  }
}

/**
 * @schema PubSubSubscription
 */
export interface PubSubSubscriptionProps {
  /**
   * @schema PubSubSubscription#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema PubSubSubscription#spec
   */
  readonly spec: PubSubSubscriptionSpec;

}

/**
 * Converts an object of type 'PubSubSubscriptionProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PubSubSubscriptionProps(obj: PubSubSubscriptionProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_PubSubSubscriptionSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PubSubSubscriptionSpec
 */
export interface PubSubSubscriptionSpec {
  /**
   * This value is the maximum time after a subscriber receives a message
   * before the subscriber should acknowledge the message. After message
   * delivery but before the ack deadline expires and before the message is
   * acknowledged, it is an outstanding message and will not be delivered
   * again during that time (on a best-effort basis).
   *
   * For pull subscriptions, this value is used as the initial value for
   * the ack deadline. To override this value for a given message, call
   * subscriptions.modifyAckDeadline with the corresponding ackId if using
   * pull. The minimum custom deadline you can specify is 10 seconds. The
   * maximum custom deadline you can specify is 600 seconds (10 minutes).
   * If this parameter is 0, a default value of 10 seconds is used.
   *
   * For push delivery, this value is also used to set the request timeout
   * for the call to the push endpoint.
   *
   * If the subscriber never acknowledges the message, the Pub/Sub system
   * will eventually redeliver the message.
   *
   * @schema PubSubSubscriptionSpec#ackDeadlineSeconds
   */
  readonly ackDeadlineSeconds?: number;

  /**
   * If delivery to BigQuery is used with this subscription, this field is used to configure it.
   * Either pushConfig or bigQueryConfig can be set, but not both.
   * If both are empty, then the subscriber will pull and ack messages using API methods.
   *
   * @schema PubSubSubscriptionSpec#bigqueryConfig
   */
  readonly bigqueryConfig?: PubSubSubscriptionSpecBigqueryConfig;

  /**
   * A policy that specifies the conditions for dead lettering messages in
   * this subscription. If dead_letter_policy is not set, dead lettering
   * is disabled.
   *
   * The Cloud Pub/Sub service account associated with this subscription's
   * parent project (i.e.,
   * service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have
   * permission to Acknowledge() messages on this subscription.
   *
   * @schema PubSubSubscriptionSpec#deadLetterPolicy
   */
  readonly deadLetterPolicy?: PubSubSubscriptionSpecDeadLetterPolicy;

  /**
   * If 'true', Pub/Sub provides the following guarantees for the delivery
   * of a message with a given value of messageId on this Subscriptions':
   *
   * - The message sent to a subscriber is guaranteed not to be resent before the message's acknowledgement deadline expires.
   *
   * - An acknowledged message will not be resent to a subscriber.
   *
   * Note that subscribers may still receive multiple copies of a message when 'enable_exactly_once_delivery'
   * is true if the message was published multiple times by a publisher client. These copies are considered distinct by Pub/Sub and have distinct messageId values.
   *
   * @schema PubSubSubscriptionSpec#enableExactlyOnceDelivery
   */
  readonly enableExactlyOnceDelivery?: boolean;

  /**
   * Immutable. If 'true', messages published with the same orderingKey in PubsubMessage will be delivered to
   * the subscribers in the order in which they are received by the Pub/Sub system. Otherwise, they
   * may be delivered in any order.
   *
   * @schema PubSubSubscriptionSpec#enableMessageOrdering
   */
  readonly enableMessageOrdering?: boolean;

  /**
   * A policy that specifies the conditions for this subscription's expiration.
   * A subscription is considered active as long as any connected subscriber
   * is successfully consuming messages from the subscription or is issuing
   * operations on the subscription. If expirationPolicy is not set, a default
   * policy with ttl of 31 days will be used.  If it is set but ttl is "", the
   * resource never expires.  The minimum allowed value for expirationPolicy.ttl
   * is 1 day.
   *
   * @schema PubSubSubscriptionSpec#expirationPolicy
   */
  readonly expirationPolicy?: PubSubSubscriptionSpecExpirationPolicy;

  /**
   * Immutable. The subscription only delivers the messages that match the filter.
   * Pub/Sub automatically acknowledges the messages that don't match the filter. You can filter messages
   * by their attributes. The maximum length of a filter is 256 bytes. After creating the subscription,
   * you can't modify the filter.
   *
   * @schema PubSubSubscriptionSpec#filter
   */
  readonly filter?: string;

  /**
   * How long to retain unacknowledged messages in the subscription's
   * backlog, from the moment a message is published. If
   * retain_acked_messages is true, then this also configures the retention
   * of acknowledged messages, and thus configures how far back in time a
   * subscriptions.seek can be done. Defaults to 7 days. Cannot be more
   * than 7 days ('"604800s"') or less than 10 minutes ('"600s"').
   *
   * A duration in seconds with up to nine fractional digits, terminated
   * by 's'. Example: '"600.5s"'.
   *
   * @default 7 days. Cannot be more
   * @schema PubSubSubscriptionSpec#messageRetentionDuration
   */
  readonly messageRetentionDuration?: string;

  /**
   * If push delivery is used with this subscription, this field is used to
   * configure it. An empty pushConfig signifies that the subscriber will
   * pull and ack messages using API methods.
   *
   * @schema PubSubSubscriptionSpec#pushConfig
   */
  readonly pushConfig?: PubSubSubscriptionSpecPushConfig;

  /**
   * Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
   *
   * @schema PubSubSubscriptionSpec#resourceID
   */
  readonly resourceId?: string;

  /**
   * Indicates whether to retain acknowledged messages. If 'true', then
   * messages are not expunged from the subscription's backlog, even if
   * they are acknowledged, until they fall out of the
   * messageRetentionDuration window.
   *
   * @schema PubSubSubscriptionSpec#retainAckedMessages
   */
  readonly retainAckedMessages?: boolean;

  /**
   * A policy that specifies how Pub/Sub retries message delivery for this subscription.
   *
   * If not set, the default retry policy is applied. This generally implies that messages will be retried as soon as possible for healthy subscribers.
   * RetryPolicy will be triggered on NACKs or acknowledgement deadline exceeded events for a given message.
   *
   * @schema PubSubSubscriptionSpec#retryPolicy
   */
  readonly retryPolicy?: PubSubSubscriptionSpecRetryPolicy;

  /**
   * Reference to a PubSubTopic.
   *
   * @schema PubSubSubscriptionSpec#topicRef
   */
  readonly topicRef: PubSubSubscriptionSpecTopicRef;

}

/**
 * Converts an object of type 'PubSubSubscriptionSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PubSubSubscriptionSpec(obj: PubSubSubscriptionSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ackDeadlineSeconds': obj.ackDeadlineSeconds,
    'bigqueryConfig': toJson_PubSubSubscriptionSpecBigqueryConfig(obj.bigqueryConfig),
    'deadLetterPolicy': toJson_PubSubSubscriptionSpecDeadLetterPolicy(obj.deadLetterPolicy),
    'enableExactlyOnceDelivery': obj.enableExactlyOnceDelivery,
    'enableMessageOrdering': obj.enableMessageOrdering,
    'expirationPolicy': toJson_PubSubSubscriptionSpecExpirationPolicy(obj.expirationPolicy),
    'filter': obj.filter,
    'messageRetentionDuration': obj.messageRetentionDuration,
    'pushConfig': toJson_PubSubSubscriptionSpecPushConfig(obj.pushConfig),
    'resourceID': obj.resourceId,
    'retainAckedMessages': obj.retainAckedMessages,
    'retryPolicy': toJson_PubSubSubscriptionSpecRetryPolicy(obj.retryPolicy),
    'topicRef': toJson_PubSubSubscriptionSpecTopicRef(obj.topicRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * If delivery to BigQuery is used with this subscription, this field is used to configure it.
 * Either pushConfig or bigQueryConfig can be set, but not both.
 * If both are empty, then the subscriber will pull and ack messages using API methods.
 *
 * @schema PubSubSubscriptionSpecBigqueryConfig
 */
export interface PubSubSubscriptionSpecBigqueryConfig {
  /**
   * When true and useTopicSchema is true, any fields that are a part of the topic schema that are not part of the BigQuery table schema are dropped when writing to BigQuery.
   * Otherwise, the schemas must be kept in sync and any messages with extra fields are not written and remain in the subscription's backlog.
   *
   * @schema PubSubSubscriptionSpecBigqueryConfig#dropUnknownFields
   */
  readonly dropUnknownFields?: boolean;

  /**
   * The name of the table to which to write data.
   *
   * @schema PubSubSubscriptionSpecBigqueryConfig#tableRef
   */
  readonly tableRef: PubSubSubscriptionSpecBigqueryConfigTableRef;

  /**
   * When true, use the topic's schema as the columns to write to in BigQuery, if it exists.
   *
   * @schema PubSubSubscriptionSpecBigqueryConfig#useTopicSchema
   */
  readonly useTopicSchema?: boolean;

  /**
   * When true, write the subscription name, messageId, publishTime, attributes, and orderingKey to additional columns in the table.
   * The subscription name, messageId, and publishTime fields are put in their own columns while all other message properties (other than data) are written to a JSON object in the attributes column.
   *
   * @schema PubSubSubscriptionSpecBigqueryConfig#writeMetadata
   */
  readonly writeMetadata?: boolean;

}

/**
 * Converts an object of type 'PubSubSubscriptionSpecBigqueryConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PubSubSubscriptionSpecBigqueryConfig(obj: PubSubSubscriptionSpecBigqueryConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'dropUnknownFields': obj.dropUnknownFields,
    'tableRef': toJson_PubSubSubscriptionSpecBigqueryConfigTableRef(obj.tableRef),
    'useTopicSchema': obj.useTopicSchema,
    'writeMetadata': obj.writeMetadata,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A policy that specifies the conditions for dead lettering messages in
 * this subscription. If dead_letter_policy is not set, dead lettering
 * is disabled.
 *
 * The Cloud Pub/Sub service account associated with this subscription's
 * parent project (i.e.,
 * service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have
 * permission to Acknowledge() messages on this subscription.
 *
 * @schema PubSubSubscriptionSpecDeadLetterPolicy
 */
export interface PubSubSubscriptionSpecDeadLetterPolicy {
  /**
   * @schema PubSubSubscriptionSpecDeadLetterPolicy#deadLetterTopicRef
   */
  readonly deadLetterTopicRef?: PubSubSubscriptionSpecDeadLetterPolicyDeadLetterTopicRef;

  /**
   * The maximum number of delivery attempts for any message. The value must be
   * between 5 and 100.
   *
   * The number of delivery attempts is defined as 1 + (the sum of number of
   * NACKs and number of times the acknowledgement deadline has been exceeded for the message).
   *
   * A NACK is any call to ModifyAckDeadline with a 0 deadline. Note that
   * client libraries may automatically extend ack_deadlines.
   *
   * This field will be honored on a best effort basis.
   *
   * If this parameter is 0, a default value of 5 is used.
   *
   * @schema PubSubSubscriptionSpecDeadLetterPolicy#maxDeliveryAttempts
   */
  readonly maxDeliveryAttempts?: number;

}

/**
 * Converts an object of type 'PubSubSubscriptionSpecDeadLetterPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PubSubSubscriptionSpecDeadLetterPolicy(obj: PubSubSubscriptionSpecDeadLetterPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deadLetterTopicRef': toJson_PubSubSubscriptionSpecDeadLetterPolicyDeadLetterTopicRef(obj.deadLetterTopicRef),
    'maxDeliveryAttempts': obj.maxDeliveryAttempts,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A policy that specifies the conditions for this subscription's expiration.
 * A subscription is considered active as long as any connected subscriber
 * is successfully consuming messages from the subscription or is issuing
 * operations on the subscription. If expirationPolicy is not set, a default
 * policy with ttl of 31 days will be used.  If it is set but ttl is "", the
 * resource never expires.  The minimum allowed value for expirationPolicy.ttl
 * is 1 day.
 *
 * @schema PubSubSubscriptionSpecExpirationPolicy
 */
export interface PubSubSubscriptionSpecExpirationPolicy {
  /**
   * Specifies the "time-to-live" duration for an associated resource. The
   * resource expires if it is not active for a period of ttl.
   * If ttl is set to "", the associated resource never expires.
   * A duration in seconds with up to nine fractional digits, terminated by 's'.
   * Example - "3.5s".
   *
   * @schema PubSubSubscriptionSpecExpirationPolicy#ttl
   */
  readonly ttl: string;

}

/**
 * Converts an object of type 'PubSubSubscriptionSpecExpirationPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PubSubSubscriptionSpecExpirationPolicy(obj: PubSubSubscriptionSpecExpirationPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ttl': obj.ttl,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * If push delivery is used with this subscription, this field is used to
 * configure it. An empty pushConfig signifies that the subscriber will
 * pull and ack messages using API methods.
 *
 * @schema PubSubSubscriptionSpecPushConfig
 */
export interface PubSubSubscriptionSpecPushConfig {
  /**
   * Endpoint configuration attributes.
   *
   * Every endpoint has a set of API supported attributes that can
   * be used to control different aspects of the message delivery.
   *
   * The currently supported attribute is x-goog-version, which you
   * can use to change the format of the pushed message. This
   * attribute indicates the version of the data expected by
   * the endpoint. This controls the shape of the pushed message
   * (i.e., its fields and metadata). The endpoint version is
   * based on the version of the Pub/Sub API.
   *
   * If not present during the subscriptions.create call,
   * it will default to the version of the API used to make
   * such call. If not present during a subscriptions.modifyPushConfig
   * call, its value will not be changed. subscriptions.get
   * calls will always return a valid version, even if the
   * subscription was created without this attribute.
   *
   * The possible values for this attribute are:
   *
   * - v1beta1: uses the push format defined in the v1beta1 Pub/Sub API.
   * - v1 or v1beta2: uses the push format defined in the v1 Pub/Sub API.
   *
   * @schema PubSubSubscriptionSpecPushConfig#attributes
   */
  readonly attributes?: { [key: string]: string };

  /**
   * If specified, Pub/Sub will generate and attach an OIDC JWT token as
   * an Authorization header in the HTTP request for every pushed message.
   *
   * @schema PubSubSubscriptionSpecPushConfig#oidcToken
   */
  readonly oidcToken?: PubSubSubscriptionSpecPushConfigOidcToken;

  /**
   * A URL locating the endpoint to which messages should be pushed.
   * For example, a Webhook endpoint might use
   * "https://example.com/push".
   *
   * @schema PubSubSubscriptionSpecPushConfig#pushEndpoint
   */
  readonly pushEndpoint: string;

}

/**
 * Converts an object of type 'PubSubSubscriptionSpecPushConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PubSubSubscriptionSpecPushConfig(obj: PubSubSubscriptionSpecPushConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'attributes': ((obj.attributes) === undefined) ? undefined : (Object.entries(obj.attributes).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'oidcToken': toJson_PubSubSubscriptionSpecPushConfigOidcToken(obj.oidcToken),
    'pushEndpoint': obj.pushEndpoint,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A policy that specifies how Pub/Sub retries message delivery for this subscription.
 *
 * If not set, the default retry policy is applied. This generally implies that messages will be retried as soon as possible for healthy subscribers.
 * RetryPolicy will be triggered on NACKs or acknowledgement deadline exceeded events for a given message.
 *
 * @schema PubSubSubscriptionSpecRetryPolicy
 */
export interface PubSubSubscriptionSpecRetryPolicy {
  /**
   * The maximum delay between consecutive deliveries of a given message. Value should be between 0 and 600 seconds. Defaults to 600 seconds.
   * A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
   *
   * @default 600 seconds.
   * @schema PubSubSubscriptionSpecRetryPolicy#maximumBackoff
   */
  readonly maximumBackoff?: string;

  /**
   * The minimum delay between consecutive deliveries of a given message. Value should be between 0 and 600 seconds. Defaults to 10 seconds.
   * A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
   *
   * @default 10 seconds.
   * @schema PubSubSubscriptionSpecRetryPolicy#minimumBackoff
   */
  readonly minimumBackoff?: string;

}

/**
 * Converts an object of type 'PubSubSubscriptionSpecRetryPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PubSubSubscriptionSpecRetryPolicy(obj: PubSubSubscriptionSpecRetryPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'maximumBackoff': obj.maximumBackoff,
    'minimumBackoff': obj.minimumBackoff,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to a PubSubTopic.
 *
 * @schema PubSubSubscriptionSpecTopicRef
 */
export interface PubSubSubscriptionSpecTopicRef {
  /**
   * Allowed value: string of the format `projects/{{project}}/topics/{{value}}`, where {{value}} is the `name` field of a `PubSubTopic` resource.
   *
   * @schema PubSubSubscriptionSpecTopicRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema PubSubSubscriptionSpecTopicRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema PubSubSubscriptionSpecTopicRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'PubSubSubscriptionSpecTopicRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PubSubSubscriptionSpecTopicRef(obj: PubSubSubscriptionSpecTopicRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The name of the table to which to write data.
 *
 * @schema PubSubSubscriptionSpecBigqueryConfigTableRef
 */
export interface PubSubSubscriptionSpecBigqueryConfigTableRef {
  /**
   * Allowed value: string of the format `{{project}}.{{dataset_id}}.{{value}}`, where {{value}} is the `name` field of a `BigQueryTable` resource.
   *
   * @schema PubSubSubscriptionSpecBigqueryConfigTableRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema PubSubSubscriptionSpecBigqueryConfigTableRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema PubSubSubscriptionSpecBigqueryConfigTableRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'PubSubSubscriptionSpecBigqueryConfigTableRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PubSubSubscriptionSpecBigqueryConfigTableRef(obj: PubSubSubscriptionSpecBigqueryConfigTableRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PubSubSubscriptionSpecDeadLetterPolicyDeadLetterTopicRef
 */
export interface PubSubSubscriptionSpecDeadLetterPolicyDeadLetterTopicRef {
  /**
   * Allowed value: string of the format `projects/{{project}}/topics/{{value}}`, where {{value}} is the `name` field of a `PubSubTopic` resource.
   *
   * @schema PubSubSubscriptionSpecDeadLetterPolicyDeadLetterTopicRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema PubSubSubscriptionSpecDeadLetterPolicyDeadLetterTopicRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema PubSubSubscriptionSpecDeadLetterPolicyDeadLetterTopicRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'PubSubSubscriptionSpecDeadLetterPolicyDeadLetterTopicRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PubSubSubscriptionSpecDeadLetterPolicyDeadLetterTopicRef(obj: PubSubSubscriptionSpecDeadLetterPolicyDeadLetterTopicRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * If specified, Pub/Sub will generate and attach an OIDC JWT token as
 * an Authorization header in the HTTP request for every pushed message.
 *
 * @schema PubSubSubscriptionSpecPushConfigOidcToken
 */
export interface PubSubSubscriptionSpecPushConfigOidcToken {
  /**
   * Audience to be used when generating OIDC token. The audience claim
   * identifies the recipients that the JWT is intended for. The audience
   * value is a single case-sensitive string. Having multiple values (array)
   * for the audience field is not supported. More info about the OIDC JWT
   * token audience here: https://tools.ietf.org/html/rfc7519#section-4.1.3
   * Note: if not specified, the Push endpoint URL will be used.
   *
   * @schema PubSubSubscriptionSpecPushConfigOidcToken#audience
   */
  readonly audience?: string;

  /**
   * Service account email to be used for generating the OIDC token.
   * The caller (for subscriptions.create, subscriptions.patch, and
   * subscriptions.modifyPushConfig RPCs) must have the
   * iam.serviceAccounts.actAs permission for the service account.
   *
   * @schema PubSubSubscriptionSpecPushConfigOidcToken#serviceAccountEmail
   */
  readonly serviceAccountEmail: string;

}

/**
 * Converts an object of type 'PubSubSubscriptionSpecPushConfigOidcToken' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PubSubSubscriptionSpecPushConfigOidcToken(obj: PubSubSubscriptionSpecPushConfigOidcToken | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'audience': obj.audience,
    'serviceAccountEmail': obj.serviceAccountEmail,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema PubSubTopic
 */
export class PubSubTopic extends ApiObject {
  /**
   * Returns the apiVersion and kind for "PubSubTopic"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'pubsub.cnrm.cloud.google.com/v1beta1',
    kind: 'PubSubTopic',
  }

  /**
   * Renders a Kubernetes manifest for "PubSubTopic".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: PubSubTopicProps = {}): any {
    return {
      ...PubSubTopic.GVK,
      ...toJson_PubSubTopicProps(props),
    };
  }

  /**
   * Defines a "PubSubTopic" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: PubSubTopicProps = {}) {
    super(scope, id, {
      ...PubSubTopic.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...PubSubTopic.GVK,
      ...toJson_PubSubTopicProps(resolved),
    };
  }
}

/**
 * @schema PubSubTopic
 */
export interface PubSubTopicProps {
  /**
   * @schema PubSubTopic#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema PubSubTopic#spec
   */
  readonly spec?: PubSubTopicSpec;

}

/**
 * Converts an object of type 'PubSubTopicProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PubSubTopicProps(obj: PubSubTopicProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_PubSubTopicSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PubSubTopicSpec
 */
export interface PubSubTopicSpec {
  /**
   * The KMSCryptoKey to be used to protect access to messages published
   * on this topic. Your project's Pub/Sub service account
   * ('service-{{PROJECT_NUMBER}}@gcp-sa-pubsub.iam.gserviceaccount.com')
   * must have 'roles/cloudkms.cryptoKeyEncrypterDecrypter' to use this
   * feature.
   *
   * @schema PubSubTopicSpec#kmsKeyRef
   */
  readonly kmsKeyRef?: PubSubTopicSpecKmsKeyRef;

  /**
   * Indicates the minimum duration to retain a message after it is published
   * to the topic. If this field is set, messages published to the topic in
   * the last messageRetentionDuration are always available to subscribers.
   * For instance, it allows any attached subscription to seek to a timestamp
   * that is up to messageRetentionDuration in the past. If this field is not
   * set, message retention is controlled by settings on individual subscriptions.
   * Cannot be more than 31 days or less than 10 minutes.
   *
   * @schema PubSubTopicSpec#messageRetentionDuration
   */
  readonly messageRetentionDuration?: string;

  /**
   * Policy constraining the set of Google Cloud Platform regions where
   * messages published to the topic may be stored. If not present, then no
   * constraints are in effect.
   *
   * @schema PubSubTopicSpec#messageStoragePolicy
   */
  readonly messageStoragePolicy?: PubSubTopicSpecMessageStoragePolicy;

  /**
   * Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
   *
   * @schema PubSubTopicSpec#resourceID
   */
  readonly resourceId?: string;

  /**
   * Settings for validating messages published against a schema.
   *
   * @schema PubSubTopicSpec#schemaSettings
   */
  readonly schemaSettings?: PubSubTopicSpecSchemaSettings;

}

/**
 * Converts an object of type 'PubSubTopicSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PubSubTopicSpec(obj: PubSubTopicSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'kmsKeyRef': toJson_PubSubTopicSpecKmsKeyRef(obj.kmsKeyRef),
    'messageRetentionDuration': obj.messageRetentionDuration,
    'messageStoragePolicy': toJson_PubSubTopicSpecMessageStoragePolicy(obj.messageStoragePolicy),
    'resourceID': obj.resourceId,
    'schemaSettings': toJson_PubSubTopicSpecSchemaSettings(obj.schemaSettings),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The KMSCryptoKey to be used to protect access to messages published
 * on this topic. Your project's Pub/Sub service account
 * ('service-{{PROJECT_NUMBER}}@gcp-sa-pubsub.iam.gserviceaccount.com')
 * must have 'roles/cloudkms.cryptoKeyEncrypterDecrypter' to use this
 * feature.
 *
 * @schema PubSubTopicSpecKmsKeyRef
 */
export interface PubSubTopicSpecKmsKeyRef {
  /**
   * Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.
   *
   * @schema PubSubTopicSpecKmsKeyRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema PubSubTopicSpecKmsKeyRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema PubSubTopicSpecKmsKeyRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'PubSubTopicSpecKmsKeyRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PubSubTopicSpecKmsKeyRef(obj: PubSubTopicSpecKmsKeyRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policy constraining the set of Google Cloud Platform regions where
 * messages published to the topic may be stored. If not present, then no
 * constraints are in effect.
 *
 * @schema PubSubTopicSpecMessageStoragePolicy
 */
export interface PubSubTopicSpecMessageStoragePolicy {
  /**
   * A list of IDs of GCP regions where messages that are published to
   * the topic may be persisted in storage. Messages published by
   * publishers running in non-allowed GCP regions (or running outside
   * of GCP altogether) will be routed for storage in one of the
   * allowed regions. An empty list means that no regions are allowed,
   * and is not a valid configuration.
   *
   * @schema PubSubTopicSpecMessageStoragePolicy#allowedPersistenceRegions
   */
  readonly allowedPersistenceRegions: string[];

}

/**
 * Converts an object of type 'PubSubTopicSpecMessageStoragePolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PubSubTopicSpecMessageStoragePolicy(obj: PubSubTopicSpecMessageStoragePolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'allowedPersistenceRegions': obj.allowedPersistenceRegions?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Settings for validating messages published against a schema.
 *
 * @schema PubSubTopicSpecSchemaSettings
 */
export interface PubSubTopicSpecSchemaSettings {
  /**
   * The encoding of messages validated against schema. Default value: "ENCODING_UNSPECIFIED" Possible values: ["ENCODING_UNSPECIFIED", "JSON", "BINARY"].
   *
   * @schema PubSubTopicSpecSchemaSettings#encoding
   */
  readonly encoding?: string;

  /**
   * @schema PubSubTopicSpecSchemaSettings#schemaRef
   */
  readonly schemaRef: PubSubTopicSpecSchemaSettingsSchemaRef;

}

/**
 * Converts an object of type 'PubSubTopicSpecSchemaSettings' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PubSubTopicSpecSchemaSettings(obj: PubSubTopicSpecSchemaSettings | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'encoding': obj.encoding,
    'schemaRef': toJson_PubSubTopicSpecSchemaSettingsSchemaRef(obj.schemaRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PubSubTopicSpecSchemaSettingsSchemaRef
 */
export interface PubSubTopicSpecSchemaSettingsSchemaRef {
  /**
   * Allowed value: string of the format `projects/{{project}}/schemas/{{value}}`, where {{value}} is the `name` field of a `PubSubSchema` resource.
   *
   * @schema PubSubTopicSpecSchemaSettingsSchemaRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema PubSubTopicSpecSchemaSettingsSchemaRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema PubSubTopicSpecSchemaSettingsSchemaRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'PubSubTopicSpecSchemaSettingsSchemaRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PubSubTopicSpecSchemaSettingsSchemaRef(obj: PubSubTopicSpecSchemaSettingsSchemaRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

