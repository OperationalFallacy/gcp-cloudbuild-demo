// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 *
 *
 * @schema GameServicesRealm
 */
export class GameServicesRealm extends ApiObject {
  /**
   * Returns the apiVersion and kind for "GameServicesRealm"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'gameservices.cnrm.cloud.google.com/v1beta1',
    kind: 'GameServicesRealm',
  }

  /**
   * Renders a Kubernetes manifest for "GameServicesRealm".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: GameServicesRealmProps): any {
    return {
      ...GameServicesRealm.GVK,
      ...toJson_GameServicesRealmProps(props),
    };
  }

  /**
   * Defines a "GameServicesRealm" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: GameServicesRealmProps) {
    super(scope, id, {
      ...GameServicesRealm.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...GameServicesRealm.GVK,
      ...toJson_GameServicesRealmProps(resolved),
    };
  }
}

/**
 * @schema GameServicesRealm
 */
export interface GameServicesRealmProps {
  /**
   * @schema GameServicesRealm#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema GameServicesRealm#spec
   */
  readonly spec: GameServicesRealmSpec;

}

/**
 * Converts an object of type 'GameServicesRealmProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GameServicesRealmProps(obj: GameServicesRealmProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_GameServicesRealmSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema GameServicesRealmSpec
 */
export interface GameServicesRealmSpec {
  /**
   * Human readable description of the realm.
   *
   * @schema GameServicesRealmSpec#description
   */
  readonly description?: string;

  /**
   * Immutable. The location for this realm.
   *
   * @schema GameServicesRealmSpec#location
   */
  readonly location: string;

  /**
   * Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
   *
   * @schema GameServicesRealmSpec#resourceID
   */
  readonly resourceId?: string;

  /**
   * Required. Time zone where all policies targeting this realm are evaluated. The value of this field must be from the IANA time zone database: https://www.iana.org/time-zones.
   *
   * @schema GameServicesRealmSpec#timeZone
   */
  readonly timeZone: string;

}

/**
 * Converts an object of type 'GameServicesRealmSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GameServicesRealmSpec(obj: GameServicesRealmSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'description': obj.description,
    'location': obj.location,
    'resourceID': obj.resourceId,
    'timeZone': obj.timeZone,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

