// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 *
 *
 * @schema IAPBrand
 */
export class IapBrand extends ApiObject {
  /**
   * Returns the apiVersion and kind for "IAPBrand"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'iap.cnrm.cloud.google.com/v1beta1',
    kind: 'IAPBrand',
  }

  /**
   * Renders a Kubernetes manifest for "IAPBrand".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: IapBrandProps = {}): any {
    return {
      ...IapBrand.GVK,
      ...toJson_IapBrandProps(props),
    };
  }

  /**
   * Defines a "IAPBrand" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: IapBrandProps = {}) {
    super(scope, id, {
      ...IapBrand.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...IapBrand.GVK,
      ...toJson_IapBrandProps(resolved),
    };
  }
}

/**
 * @schema IAPBrand
 */
export interface IapBrandProps {
  /**
   * @schema IAPBrand#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema IAPBrand#spec
   */
  readonly spec?: IapBrandSpec;

}

/**
 * Converts an object of type 'IapBrandProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IapBrandProps(obj: IapBrandProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_IapBrandSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema IapBrandSpec
 */
export interface IapBrandSpec {
  /**
   * Immutable. Application name displayed on OAuth consent screen.
   *
   * @schema IapBrandSpec#applicationTitle
   */
  readonly applicationTitle?: string;

  /**
   * Immutable. Optional. The service-generated name of the resource. Used for acquisition only. Leave unset to create a new resource.
   *
   * @schema IapBrandSpec#resourceID
   */
  readonly resourceId?: string;

  /**
   * Immutable. Support email displayed on the OAuth consent screen.
   *
   * @schema IapBrandSpec#supportEmail
   */
  readonly supportEmail?: string;

}

/**
 * Converts an object of type 'IapBrandSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IapBrandSpec(obj: IapBrandSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'applicationTitle': obj.applicationTitle,
    'resourceID': obj.resourceId,
    'supportEmail': obj.supportEmail,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema IAPIdentityAwareProxyClient
 */
export class IapIdentityAwareProxyClient extends ApiObject {
  /**
   * Returns the apiVersion and kind for "IAPIdentityAwareProxyClient"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'iap.cnrm.cloud.google.com/v1beta1',
    kind: 'IAPIdentityAwareProxyClient',
  }

  /**
   * Renders a Kubernetes manifest for "IAPIdentityAwareProxyClient".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: IapIdentityAwareProxyClientProps): any {
    return {
      ...IapIdentityAwareProxyClient.GVK,
      ...toJson_IapIdentityAwareProxyClientProps(props),
    };
  }

  /**
   * Defines a "IAPIdentityAwareProxyClient" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: IapIdentityAwareProxyClientProps) {
    super(scope, id, {
      ...IapIdentityAwareProxyClient.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...IapIdentityAwareProxyClient.GVK,
      ...toJson_IapIdentityAwareProxyClientProps(resolved),
    };
  }
}

/**
 * @schema IAPIdentityAwareProxyClient
 */
export interface IapIdentityAwareProxyClientProps {
  /**
   * @schema IAPIdentityAwareProxyClient#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema IAPIdentityAwareProxyClient#spec
   */
  readonly spec: IapIdentityAwareProxyClientSpec;

}

/**
 * Converts an object of type 'IapIdentityAwareProxyClientProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IapIdentityAwareProxyClientProps(obj: IapIdentityAwareProxyClientProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_IapIdentityAwareProxyClientSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema IapIdentityAwareProxyClientSpec
 */
export interface IapIdentityAwareProxyClientSpec {
  /**
   * Immutable.
   *
   * @schema IapIdentityAwareProxyClientSpec#brandRef
   */
  readonly brandRef: IapIdentityAwareProxyClientSpecBrandRef;

  /**
   * Immutable. Human-friendly name given to the OAuth client.
   *
   * @schema IapIdentityAwareProxyClientSpec#displayName
   */
  readonly displayName?: string;

  /**
   * Immutable. Optional. The service-generated name of the resource. Used for acquisition only. Leave unset to create a new resource.
   *
   * @schema IapIdentityAwareProxyClientSpec#resourceID
   */
  readonly resourceId?: string;

}

/**
 * Converts an object of type 'IapIdentityAwareProxyClientSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IapIdentityAwareProxyClientSpec(obj: IapIdentityAwareProxyClientSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'brandRef': toJson_IapIdentityAwareProxyClientSpecBrandRef(obj.brandRef),
    'displayName': obj.displayName,
    'resourceID': obj.resourceId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable.
 *
 * @schema IapIdentityAwareProxyClientSpecBrandRef
 */
export interface IapIdentityAwareProxyClientSpecBrandRef {
  /**
   * The brand for the resource
   *
   * Allowed value: The Google Cloud resource name of an `IAPBrand` resource (format: `projects/{{project}}/brands/{{name}}`).
   *
   * @schema IapIdentityAwareProxyClientSpecBrandRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema IapIdentityAwareProxyClientSpecBrandRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema IapIdentityAwareProxyClientSpecBrandRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'IapIdentityAwareProxyClientSpecBrandRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IapIdentityAwareProxyClientSpecBrandRef(obj: IapIdentityAwareProxyClientSpecBrandRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

