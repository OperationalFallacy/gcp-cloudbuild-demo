// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 *
 *
 * @schema ContainerCluster
 */
export class ContainerCluster extends ApiObject {
  /**
   * Returns the apiVersion and kind for "ContainerCluster"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'container.cnrm.cloud.google.com/v1beta1',
    kind: 'ContainerCluster',
  }

  /**
   * Renders a Kubernetes manifest for "ContainerCluster".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ContainerClusterProps): any {
    return {
      ...ContainerCluster.GVK,
      ...toJson_ContainerClusterProps(props),
    };
  }

  /**
   * Defines a "ContainerCluster" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ContainerClusterProps) {
    super(scope, id, {
      ...ContainerCluster.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...ContainerCluster.GVK,
      ...toJson_ContainerClusterProps(resolved),
    };
  }
}

/**
 * @schema ContainerCluster
 */
export interface ContainerClusterProps {
  /**
   * @schema ContainerCluster#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema ContainerCluster#spec
   */
  readonly spec: ContainerClusterSpec;

}

/**
 * Converts an object of type 'ContainerClusterProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterProps(obj: ContainerClusterProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ContainerClusterSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ContainerClusterSpec
 */
export interface ContainerClusterSpec {
  /**
   * The configuration for addons supported by GKE.
   *
   * @schema ContainerClusterSpec#addonsConfig
   */
  readonly addonsConfig?: ContainerClusterSpecAddonsConfig;

  /**
   * Configuration for the Google Groups for GKE feature.
   *
   * @schema ContainerClusterSpec#authenticatorGroupsConfig
   */
  readonly authenticatorGroupsConfig?: ContainerClusterSpecAuthenticatorGroupsConfig;

  /**
   * Configuration options for the Binary Authorization feature.
   *
   * @schema ContainerClusterSpec#binaryAuthorization
   */
  readonly binaryAuthorization?: ContainerClusterSpecBinaryAuthorization;

  /**
   * Per-cluster configuration of Node Auto-Provisioning with Cluster Autoscaler to automatically adjust the size of the cluster and create/delete node pools based on the current needs of the cluster's workload. See the guide to using Node Auto-Provisioning for more details.
   *
   * @schema ContainerClusterSpec#clusterAutoscaling
   */
  readonly clusterAutoscaling?: ContainerClusterSpecClusterAutoscaling;

  /**
   * Immutable. The IP address range of the Kubernetes pods in this cluster in CIDR notation (e.g. 10.96.0.0/14). Leave blank to have one automatically chosen or specify a /14 block in 10.0.0.0/8. This field will only work for routes-based clusters, where ip_allocation_policy is not defined.
   *
   * @schema ContainerClusterSpec#clusterIpv4Cidr
   */
  readonly clusterIpv4Cidr?: string;

  /**
   * Telemetry integration for the cluster.
   *
   * @schema ContainerClusterSpec#clusterTelemetry
   */
  readonly clusterTelemetry?: ContainerClusterSpecClusterTelemetry;

  /**
   * Immutable. Configuration for the confidential nodes feature, which makes nodes run on confidential VMs. Warning: This configuration can't be changed (or added/removed) after cluster creation without deleting and recreating the entire cluster.
   *
   * @schema ContainerClusterSpec#confidentialNodes
   */
  readonly confidentialNodes?: ContainerClusterSpecConfidentialNodes;

  /**
   * Cost management configuration for the cluster.
   *
   * @schema ContainerClusterSpec#costManagementConfig
   */
  readonly costManagementConfig?: ContainerClusterSpecCostManagementConfig;

  /**
   * Application-layer Secrets Encryption settings. The object format is {state = string, key_name = string}. Valid values of state are: "ENCRYPTED"; "DECRYPTED". key_name is the name of a CloudKMS key.
   *
   * @schema ContainerClusterSpec#databaseEncryption
   */
  readonly databaseEncryption?: ContainerClusterSpecDatabaseEncryption;

  /**
   * Immutable. The desired datapath provider for this cluster. By default, uses the IPTables-based kube-proxy implementation.
   *
   * @schema ContainerClusterSpec#datapathProvider
   */
  readonly datapathProvider?: string;

  /**
   * Immutable. The default maximum number of pods per node in this cluster. This doesn't work on "routes-based" clusters, clusters that don't have IP Aliasing enabled.
   *
   * @schema ContainerClusterSpec#defaultMaxPodsPerNode
   */
  readonly defaultMaxPodsPerNode?: number;

  /**
   * Whether the cluster disables default in-node sNAT rules. In-node sNAT rules will be disabled when defaultSnatStatus is disabled.
   *
   * @schema ContainerClusterSpec#defaultSnatStatus
   */
  readonly defaultSnatStatus?: ContainerClusterSpecDefaultSnatStatus;

  /**
   * Immutable.  Description of the cluster.
   *
   * @schema ContainerClusterSpec#description
   */
  readonly description?: string;

  /**
   * Immutable. Configuration for Cloud DNS for Kubernetes Engine.
   *
   * @schema ContainerClusterSpec#dnsConfig
   */
  readonly dnsConfig?: ContainerClusterSpecDnsConfig;

  /**
   * Immutable. Enable Autopilot for this cluster.
   *
   * @schema ContainerClusterSpec#enableAutopilot
   */
  readonly enableAutopilot?: boolean;

  /**
   * DEPRECATED. Deprecated in favor of binary_authorization. Enable Binary Authorization for this cluster. If enabled, all container images will be validated by Google Binary Authorization.
   *
   * @schema ContainerClusterSpec#enableBinaryAuthorization
   */
  readonly enableBinaryAuthorization?: boolean;

  /**
   * Whether Intra-node visibility is enabled for this cluster. This makes same node pod to pod traffic visible for VPC network.
   *
   * @schema ContainerClusterSpec#enableIntranodeVisibility
   */
  readonly enableIntranodeVisibility?: boolean;

  /**
   * Immutable. Whether to enable Kubernetes Alpha features for this cluster. Note that when this option is enabled, the cluster cannot be upgraded and will be automatically deleted after 30 days.
   *
   * @schema ContainerClusterSpec#enableKubernetesAlpha
   */
  readonly enableKubernetesAlpha?: boolean;

  /**
   * Whether L4ILB Subsetting is enabled for this cluster.
   *
   * @schema ContainerClusterSpec#enableL4IlbSubsetting
   */
  readonly enableL4IlbSubsetting?: boolean;

  /**
   * Whether the ABAC authorizer is enabled for this cluster. When enabled, identities in the system, including service accounts, nodes, and controllers, will have statically granted permissions beyond those provided by the RBAC configuration or IAM. Defaults to false.
   *
   * @default false.
   * @schema ContainerClusterSpec#enableLegacyAbac
   */
  readonly enableLegacyAbac?: boolean;

  /**
   * Enable Shielded Nodes features on all nodes in this cluster. Defaults to true.
   *
   * @default true.
   * @schema ContainerClusterSpec#enableShieldedNodes
   */
  readonly enableShieldedNodes?: boolean;

  /**
   * Immutable. Whether to enable Cloud TPU resources in this cluster.
   *
   * @schema ContainerClusterSpec#enableTpu
   */
  readonly enableTpu?: boolean;

  /**
   * Configuration for GKE Gateway API controller.
   *
   * @schema ContainerClusterSpec#gatewayApiConfig
   */
  readonly gatewayApiConfig?: ContainerClusterSpecGatewayApiConfig;

  /**
   * Configuration for Identity Service which allows customers to use external identity providers with the K8S API.
   *
   * @schema ContainerClusterSpec#identityServiceConfig
   */
  readonly identityServiceConfig?: ContainerClusterSpecIdentityServiceConfig;

  /**
   * Immutable. The number of nodes to create in this cluster's default node pool. In regional or multi-zonal clusters, this is the number of nodes per zone. Must be set if node_pool is not set. If you're using google_container_node_pool objects with no default node pool, you'll need to set this to a value of at least 1, alongside setting remove_default_node_pool to true.
   *
   * @schema ContainerClusterSpec#initialNodeCount
   */
  readonly initialNodeCount?: number;

  /**
   * Immutable. Configuration of cluster IP allocation for VPC-native clusters. Adding this block enables IP aliasing, making the cluster VPC-native instead of routes-based.
   *
   * @schema ContainerClusterSpec#ipAllocationPolicy
   */
  readonly ipAllocationPolicy?: ContainerClusterSpecIpAllocationPolicy;

  /**
   * Immutable. The location (region or zone) in which the cluster master will be created, as well as the default node location. If you specify a zone (such as us-central1-a), the cluster will be a zonal cluster with a single cluster master. If you specify a region (such as us-west1), the cluster will be a regional cluster with multiple masters spread across zones in the region, and with default node locations in those zones as well.
   *
   * @schema ContainerClusterSpec#location
   */
  readonly location: string;

  /**
   * Logging configuration for the cluster.
   *
   * @schema ContainerClusterSpec#loggingConfig
   */
  readonly loggingConfig?: ContainerClusterSpecLoggingConfig;

  /**
   * The logging service that the cluster should write logs to. Available options include logging.googleapis.com(Legacy Stackdriver), logging.googleapis.com/kubernetes(Stackdriver Kubernetes Engine Logging), and none. Defaults to logging.googleapis.com/kubernetes.
   *
   * @default logging.googleapis.com/kubernetes.
   * @schema ContainerClusterSpec#loggingService
   */
  readonly loggingService?: string;

  /**
   * The maintenance policy to use for the cluster.
   *
   * @schema ContainerClusterSpec#maintenancePolicy
   */
  readonly maintenancePolicy?: ContainerClusterSpecMaintenancePolicy;

  /**
   * DEPRECATED. Basic authentication was removed for GKE cluster versions >= 1.19. The authentication information for accessing the Kubernetes master. Some values in this block are only returned by the API if your service account has permission to get credentials for your GKE cluster. If you see an unexpected diff unsetting your client cert, ensure you have the container.clusters.getCredentials permission.
   *
   * @schema ContainerClusterSpec#masterAuth
   */
  readonly masterAuth?: ContainerClusterSpecMasterAuth;

  /**
   * The desired configuration options for master authorized networks. Omit the nested cidr_blocks attribute to disallow external access (except the cluster node IPs, which GKE automatically whitelists).
   *
   * @schema ContainerClusterSpec#masterAuthorizedNetworksConfig
   */
  readonly masterAuthorizedNetworksConfig?: ContainerClusterSpecMasterAuthorizedNetworksConfig;

  /**
   * If set, and enable_certificates=true, the GKE Workload Identity Certificates controller and node agent will be deployed in the cluster.
   *
   * @schema ContainerClusterSpec#meshCertificates
   */
  readonly meshCertificates?: ContainerClusterSpecMeshCertificates;

  /**
   * The minimum version of the master. GKE will auto-update the master to new versions, so this does not guarantee the current master version--use the read-only master_version field to obtain that. If unset, the cluster's version will be set by GKE to the version of the most recent official release (which is not necessarily the latest version).
   *
   * @schema ContainerClusterSpec#minMasterVersion
   */
  readonly minMasterVersion?: string;

  /**
   * Monitoring configuration for the cluster.
   *
   * @schema ContainerClusterSpec#monitoringConfig
   */
  readonly monitoringConfig?: ContainerClusterSpecMonitoringConfig;

  /**
   * The monitoring service that the cluster should write metrics to. Automatically send metrics from pods in the cluster to the Google Cloud Monitoring API. VM metrics will be collected by Google Compute Engine regardless of this setting Available options include monitoring.googleapis.com(Legacy Stackdriver), monitoring.googleapis.com/kubernetes(Stackdriver Kubernetes Engine Monitoring), and none. Defaults to monitoring.googleapis.com/kubernetes.
   *
   * @default monitoring.googleapis.com/kubernetes.
   * @schema ContainerClusterSpec#monitoringService
   */
  readonly monitoringService?: string;

  /**
   * Configuration options for the NetworkPolicy feature.
   *
   * @schema ContainerClusterSpec#networkPolicy
   */
  readonly networkPolicy?: ContainerClusterSpecNetworkPolicy;

  /**
   * @schema ContainerClusterSpec#networkRef
   */
  readonly networkRef?: ContainerClusterSpecNetworkRef;

  /**
   * Immutable. Determines whether alias IPs or routes will be used for pod IPs in the cluster.
   *
   * @schema ContainerClusterSpec#networkingMode
   */
  readonly networkingMode?: string;

  /**
   * Immutable. The configuration of the nodepool.
   *
   * @schema ContainerClusterSpec#nodeConfig
   */
  readonly nodeConfig?: ContainerClusterSpecNodeConfig;

  /**
   * The list of zones in which the cluster's nodes are located. Nodes must be in the region of their regional cluster or in the same region as their cluster's zone for zonal clusters. If this is specified for a zonal cluster, omit the cluster's zone.
   *
   * @schema ContainerClusterSpec#nodeLocations
   */
  readonly nodeLocations?: string[];

  /**
   * Node pool configs that apply to all auto-provisioned node pools in autopilot clusters and node auto-provisioning enabled clusters.
   *
   * @schema ContainerClusterSpec#nodePoolAutoConfig
   */
  readonly nodePoolAutoConfig?: ContainerClusterSpecNodePoolAutoConfig;

  /**
   * The default nodel pool settings for the entire cluster.
   *
   * @schema ContainerClusterSpec#nodePoolDefaults
   */
  readonly nodePoolDefaults?: ContainerClusterSpecNodePoolDefaults;

  /**
   * @schema ContainerClusterSpec#nodeVersion
   */
  readonly nodeVersion?: string;

  /**
   * The notification config for sending cluster upgrade notifications.
   *
   * @schema ContainerClusterSpec#notificationConfig
   */
  readonly notificationConfig?: ContainerClusterSpecNotificationConfig;

  /**
   * Configuration for the PodSecurityPolicy feature.
   *
   * @schema ContainerClusterSpec#podSecurityPolicyConfig
   */
  readonly podSecurityPolicyConfig?: ContainerClusterSpecPodSecurityPolicyConfig;

  /**
   * Configuration for private clusters, clusters with private nodes.
   *
   * @schema ContainerClusterSpec#privateClusterConfig
   */
  readonly privateClusterConfig?: ContainerClusterSpecPrivateClusterConfig;

  /**
   * The desired state of IPv6 connectivity to Google Services. By default, no private IPv6 access to or from Google Services (all access will be via IPv4).
   *
   * @schema ContainerClusterSpec#privateIpv6GoogleAccess
   */
  readonly privateIpv6GoogleAccess?: string;

  /**
   * Enable/Disable Protect API features for the cluster.
   *
   * @schema ContainerClusterSpec#protectConfig
   */
  readonly protectConfig?: ContainerClusterSpecProtectConfig;

  /**
   * Configuration options for the Release channel feature, which provide more control over automatic upgrades of your GKE clusters. Note that removing this field from your config will not unenroll it. Instead, use the "UNSPECIFIED" channel.
   *
   * @schema ContainerClusterSpec#releaseChannel
   */
  readonly releaseChannel?: ContainerClusterSpecReleaseChannel;

  /**
   * Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
   *
   * @schema ContainerClusterSpec#resourceID
   */
  readonly resourceId?: string;

  /**
   * Configuration for the ResourceUsageExportConfig feature.
   *
   * @schema ContainerClusterSpec#resourceUsageExportConfig
   */
  readonly resourceUsageExportConfig?: ContainerClusterSpecResourceUsageExportConfig;

  /**
   * Defines the config needed to enable/disable features for the Security Posture API.
   *
   * @schema ContainerClusterSpec#securityPostureConfig
   */
  readonly securityPostureConfig?: ContainerClusterSpecSecurityPostureConfig;

  /**
   * If set, and enabled=true, services with external ips field will not be blocked.
   *
   * @schema ContainerClusterSpec#serviceExternalIpsConfig
   */
  readonly serviceExternalIpsConfig?: ContainerClusterSpecServiceExternalIpsConfig;

  /**
   * @schema ContainerClusterSpec#subnetworkRef
   */
  readonly subnetworkRef?: ContainerClusterSpecSubnetworkRef;

  /**
   * Vertical Pod Autoscaling automatically adjusts the resources of pods controlled by it.
   *
   * @schema ContainerClusterSpec#verticalPodAutoscaling
   */
  readonly verticalPodAutoscaling?: ContainerClusterSpecVerticalPodAutoscaling;

  /**
   * Configuration for the use of Kubernetes Service Accounts in GCP IAM policies.
   *
   * @schema ContainerClusterSpec#workloadIdentityConfig
   */
  readonly workloadIdentityConfig?: ContainerClusterSpecWorkloadIdentityConfig;

}

/**
 * Converts an object of type 'ContainerClusterSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpec(obj: ContainerClusterSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'addonsConfig': toJson_ContainerClusterSpecAddonsConfig(obj.addonsConfig),
    'authenticatorGroupsConfig': toJson_ContainerClusterSpecAuthenticatorGroupsConfig(obj.authenticatorGroupsConfig),
    'binaryAuthorization': toJson_ContainerClusterSpecBinaryAuthorization(obj.binaryAuthorization),
    'clusterAutoscaling': toJson_ContainerClusterSpecClusterAutoscaling(obj.clusterAutoscaling),
    'clusterIpv4Cidr': obj.clusterIpv4Cidr,
    'clusterTelemetry': toJson_ContainerClusterSpecClusterTelemetry(obj.clusterTelemetry),
    'confidentialNodes': toJson_ContainerClusterSpecConfidentialNodes(obj.confidentialNodes),
    'costManagementConfig': toJson_ContainerClusterSpecCostManagementConfig(obj.costManagementConfig),
    'databaseEncryption': toJson_ContainerClusterSpecDatabaseEncryption(obj.databaseEncryption),
    'datapathProvider': obj.datapathProvider,
    'defaultMaxPodsPerNode': obj.defaultMaxPodsPerNode,
    'defaultSnatStatus': toJson_ContainerClusterSpecDefaultSnatStatus(obj.defaultSnatStatus),
    'description': obj.description,
    'dnsConfig': toJson_ContainerClusterSpecDnsConfig(obj.dnsConfig),
    'enableAutopilot': obj.enableAutopilot,
    'enableBinaryAuthorization': obj.enableBinaryAuthorization,
    'enableIntranodeVisibility': obj.enableIntranodeVisibility,
    'enableKubernetesAlpha': obj.enableKubernetesAlpha,
    'enableL4IlbSubsetting': obj.enableL4IlbSubsetting,
    'enableLegacyAbac': obj.enableLegacyAbac,
    'enableShieldedNodes': obj.enableShieldedNodes,
    'enableTpu': obj.enableTpu,
    'gatewayApiConfig': toJson_ContainerClusterSpecGatewayApiConfig(obj.gatewayApiConfig),
    'identityServiceConfig': toJson_ContainerClusterSpecIdentityServiceConfig(obj.identityServiceConfig),
    'initialNodeCount': obj.initialNodeCount,
    'ipAllocationPolicy': toJson_ContainerClusterSpecIpAllocationPolicy(obj.ipAllocationPolicy),
    'location': obj.location,
    'loggingConfig': toJson_ContainerClusterSpecLoggingConfig(obj.loggingConfig),
    'loggingService': obj.loggingService,
    'maintenancePolicy': toJson_ContainerClusterSpecMaintenancePolicy(obj.maintenancePolicy),
    'masterAuth': toJson_ContainerClusterSpecMasterAuth(obj.masterAuth),
    'masterAuthorizedNetworksConfig': toJson_ContainerClusterSpecMasterAuthorizedNetworksConfig(obj.masterAuthorizedNetworksConfig),
    'meshCertificates': toJson_ContainerClusterSpecMeshCertificates(obj.meshCertificates),
    'minMasterVersion': obj.minMasterVersion,
    'monitoringConfig': toJson_ContainerClusterSpecMonitoringConfig(obj.monitoringConfig),
    'monitoringService': obj.monitoringService,
    'networkPolicy': toJson_ContainerClusterSpecNetworkPolicy(obj.networkPolicy),
    'networkRef': toJson_ContainerClusterSpecNetworkRef(obj.networkRef),
    'networkingMode': obj.networkingMode,
    'nodeConfig': toJson_ContainerClusterSpecNodeConfig(obj.nodeConfig),
    'nodeLocations': obj.nodeLocations?.map(y => y),
    'nodePoolAutoConfig': toJson_ContainerClusterSpecNodePoolAutoConfig(obj.nodePoolAutoConfig),
    'nodePoolDefaults': toJson_ContainerClusterSpecNodePoolDefaults(obj.nodePoolDefaults),
    'nodeVersion': obj.nodeVersion,
    'notificationConfig': toJson_ContainerClusterSpecNotificationConfig(obj.notificationConfig),
    'podSecurityPolicyConfig': toJson_ContainerClusterSpecPodSecurityPolicyConfig(obj.podSecurityPolicyConfig),
    'privateClusterConfig': toJson_ContainerClusterSpecPrivateClusterConfig(obj.privateClusterConfig),
    'privateIpv6GoogleAccess': obj.privateIpv6GoogleAccess,
    'protectConfig': toJson_ContainerClusterSpecProtectConfig(obj.protectConfig),
    'releaseChannel': toJson_ContainerClusterSpecReleaseChannel(obj.releaseChannel),
    'resourceID': obj.resourceId,
    'resourceUsageExportConfig': toJson_ContainerClusterSpecResourceUsageExportConfig(obj.resourceUsageExportConfig),
    'securityPostureConfig': toJson_ContainerClusterSpecSecurityPostureConfig(obj.securityPostureConfig),
    'serviceExternalIpsConfig': toJson_ContainerClusterSpecServiceExternalIpsConfig(obj.serviceExternalIpsConfig),
    'subnetworkRef': toJson_ContainerClusterSpecSubnetworkRef(obj.subnetworkRef),
    'verticalPodAutoscaling': toJson_ContainerClusterSpecVerticalPodAutoscaling(obj.verticalPodAutoscaling),
    'workloadIdentityConfig': toJson_ContainerClusterSpecWorkloadIdentityConfig(obj.workloadIdentityConfig),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The configuration for addons supported by GKE.
 *
 * @schema ContainerClusterSpecAddonsConfig
 */
export interface ContainerClusterSpecAddonsConfig {
  /**
   * The status of the CloudRun addon. It is disabled by default. Set disabled = false to enable.
   *
   * @schema ContainerClusterSpecAddonsConfig#cloudrunConfig
   */
  readonly cloudrunConfig?: ContainerClusterSpecAddonsConfigCloudrunConfig;

  /**
   * The of the Config Connector addon.
   *
   * @schema ContainerClusterSpecAddonsConfig#configConnectorConfig
   */
  readonly configConnectorConfig?: ContainerClusterSpecAddonsConfigConfigConnectorConfig;

  /**
   * The status of the NodeLocal DNSCache addon. It is disabled by default. Set enabled = true to enable.
   *
   * @schema ContainerClusterSpecAddonsConfig#dnsCacheConfig
   */
  readonly dnsCacheConfig?: ContainerClusterSpecAddonsConfigDnsCacheConfig;

  /**
   * Whether this cluster should enable the Google Compute Engine Persistent Disk Container Storage Interface (CSI) Driver. Defaults to enabled; set disabled = true to disable.
   *
   * @default enabled; set disabled = true to disable.
   * @schema ContainerClusterSpecAddonsConfig#gcePersistentDiskCsiDriverConfig
   */
  readonly gcePersistentDiskCsiDriverConfig?: ContainerClusterSpecAddonsConfigGcePersistentDiskCsiDriverConfig;

  /**
   * The status of the Filestore CSI driver addon, which allows the usage of filestore instance as volumes. Defaults to disabled; set enabled = true to enable.
   *
   * @default disabled; set enabled = true to enable.
   * @schema ContainerClusterSpecAddonsConfig#gcpFilestoreCsiDriverConfig
   */
  readonly gcpFilestoreCsiDriverConfig?: ContainerClusterSpecAddonsConfigGcpFilestoreCsiDriverConfig;

  /**
   * The status of the GCS Fuse CSI driver addon, which allows the usage of gcs bucket as volumes. Defaults to disabled; set enabled = true to enable.
   *
   * @default disabled; set enabled = true to enable.
   * @schema ContainerClusterSpecAddonsConfig#gcsFuseCsiDriverConfig
   */
  readonly gcsFuseCsiDriverConfig?: ContainerClusterSpecAddonsConfigGcsFuseCsiDriverConfig;

  /**
   * The status of the Backup for GKE Agent addon. It is disabled by default. Set enabled = true to enable.
   *
   * @schema ContainerClusterSpecAddonsConfig#gkeBackupAgentConfig
   */
  readonly gkeBackupAgentConfig?: ContainerClusterSpecAddonsConfigGkeBackupAgentConfig;

  /**
   * The status of the Horizontal Pod Autoscaling addon, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods. It ensures that a Heapster pod is running in the cluster, which is also used by the Cloud Monitoring service. It is enabled by default; set disabled = true to disable.
   *
   * @schema ContainerClusterSpecAddonsConfig#horizontalPodAutoscaling
   */
  readonly horizontalPodAutoscaling?: ContainerClusterSpecAddonsConfigHorizontalPodAutoscaling;

  /**
   * The status of the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster. It is enabled by default; set disabled = true to disable.
   *
   * @schema ContainerClusterSpecAddonsConfig#httpLoadBalancing
   */
  readonly httpLoadBalancing?: ContainerClusterSpecAddonsConfigHttpLoadBalancing;

  /**
   * The status of the Istio addon.
   *
   * @schema ContainerClusterSpecAddonsConfig#istioConfig
   */
  readonly istioConfig?: ContainerClusterSpecAddonsConfigIstioConfig;

  /**
   * Configuration for the KALM addon, which manages the lifecycle of k8s. It is disabled by default; Set enabled = true to enable.
   *
   * @schema ContainerClusterSpecAddonsConfig#kalmConfig
   */
  readonly kalmConfig?: ContainerClusterSpecAddonsConfigKalmConfig;

  /**
   * Whether we should enable the network policy addon for the master. This must be enabled in order to enable network policy for the nodes. To enable this, you must also define a network_policy block, otherwise nothing will happen. It can only be disabled if the nodes already do not have network policies enabled. Defaults to disabled; set disabled = false to enable.
   *
   * @default disabled; set disabled = false to enable.
   * @schema ContainerClusterSpecAddonsConfig#networkPolicyConfig
   */
  readonly networkPolicyConfig?: ContainerClusterSpecAddonsConfigNetworkPolicyConfig;

}

/**
 * Converts an object of type 'ContainerClusterSpecAddonsConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecAddonsConfig(obj: ContainerClusterSpecAddonsConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cloudrunConfig': toJson_ContainerClusterSpecAddonsConfigCloudrunConfig(obj.cloudrunConfig),
    'configConnectorConfig': toJson_ContainerClusterSpecAddonsConfigConfigConnectorConfig(obj.configConnectorConfig),
    'dnsCacheConfig': toJson_ContainerClusterSpecAddonsConfigDnsCacheConfig(obj.dnsCacheConfig),
    'gcePersistentDiskCsiDriverConfig': toJson_ContainerClusterSpecAddonsConfigGcePersistentDiskCsiDriverConfig(obj.gcePersistentDiskCsiDriverConfig),
    'gcpFilestoreCsiDriverConfig': toJson_ContainerClusterSpecAddonsConfigGcpFilestoreCsiDriverConfig(obj.gcpFilestoreCsiDriverConfig),
    'gcsFuseCsiDriverConfig': toJson_ContainerClusterSpecAddonsConfigGcsFuseCsiDriverConfig(obj.gcsFuseCsiDriverConfig),
    'gkeBackupAgentConfig': toJson_ContainerClusterSpecAddonsConfigGkeBackupAgentConfig(obj.gkeBackupAgentConfig),
    'horizontalPodAutoscaling': toJson_ContainerClusterSpecAddonsConfigHorizontalPodAutoscaling(obj.horizontalPodAutoscaling),
    'httpLoadBalancing': toJson_ContainerClusterSpecAddonsConfigHttpLoadBalancing(obj.httpLoadBalancing),
    'istioConfig': toJson_ContainerClusterSpecAddonsConfigIstioConfig(obj.istioConfig),
    'kalmConfig': toJson_ContainerClusterSpecAddonsConfigKalmConfig(obj.kalmConfig),
    'networkPolicyConfig': toJson_ContainerClusterSpecAddonsConfigNetworkPolicyConfig(obj.networkPolicyConfig),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration for the Google Groups for GKE feature.
 *
 * @schema ContainerClusterSpecAuthenticatorGroupsConfig
 */
export interface ContainerClusterSpecAuthenticatorGroupsConfig {
  /**
   * The name of the RBAC security group for use with Google security groups in Kubernetes RBAC. Group name must be in format gke-security-groups@yourdomain.com.
   *
   * @schema ContainerClusterSpecAuthenticatorGroupsConfig#securityGroup
   */
  readonly securityGroup: string;

}

/**
 * Converts an object of type 'ContainerClusterSpecAuthenticatorGroupsConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecAuthenticatorGroupsConfig(obj: ContainerClusterSpecAuthenticatorGroupsConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'securityGroup': obj.securityGroup,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration options for the Binary Authorization feature.
 *
 * @schema ContainerClusterSpecBinaryAuthorization
 */
export interface ContainerClusterSpecBinaryAuthorization {
  /**
   * DEPRECATED. Deprecated in favor of evaluation_mode. Enable Binary Authorization for this cluster.
   *
   * @schema ContainerClusterSpecBinaryAuthorization#enabled
   */
  readonly enabled?: boolean;

  /**
   * Mode of operation for Binary Authorization policy evaluation.
   *
   * @schema ContainerClusterSpecBinaryAuthorization#evaluationMode
   */
  readonly evaluationMode?: string;

}

/**
 * Converts an object of type 'ContainerClusterSpecBinaryAuthorization' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecBinaryAuthorization(obj: ContainerClusterSpecBinaryAuthorization | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
    'evaluationMode': obj.evaluationMode,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Per-cluster configuration of Node Auto-Provisioning with Cluster Autoscaler to automatically adjust the size of the cluster and create/delete node pools based on the current needs of the cluster's workload. See the guide to using Node Auto-Provisioning for more details.
 *
 * @schema ContainerClusterSpecClusterAutoscaling
 */
export interface ContainerClusterSpecClusterAutoscaling {
  /**
   * Contains defaults for a node pool created by NAP.
   *
   * @schema ContainerClusterSpecClusterAutoscaling#autoProvisioningDefaults
   */
  readonly autoProvisioningDefaults?: ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaults;

  /**
   * Configuration options for the Autoscaling profile feature, which lets you choose whether the cluster autoscaler should optimize for resource utilization or resource availability when deciding to remove nodes from a cluster. Can be BALANCED or OPTIMIZE_UTILIZATION. Defaults to BALANCED.
   *
   * @default BALANCED.
   * @schema ContainerClusterSpecClusterAutoscaling#autoscalingProfile
   */
  readonly autoscalingProfile?: string;

  /**
   * Whether node auto-provisioning is enabled. Resource limits for cpu and memory must be defined to enable node auto-provisioning.
   *
   * @schema ContainerClusterSpecClusterAutoscaling#enabled
   */
  readonly enabled?: boolean;

  /**
   * Global constraints for machine resources in the cluster. Configuring the cpu and memory types is required if node auto-provisioning is enabled. These limits will apply to node pool autoscaling in addition to node auto-provisioning.
   *
   * @schema ContainerClusterSpecClusterAutoscaling#resourceLimits
   */
  readonly resourceLimits?: ContainerClusterSpecClusterAutoscalingResourceLimits[];

}

/**
 * Converts an object of type 'ContainerClusterSpecClusterAutoscaling' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecClusterAutoscaling(obj: ContainerClusterSpecClusterAutoscaling | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'autoProvisioningDefaults': toJson_ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaults(obj.autoProvisioningDefaults),
    'autoscalingProfile': obj.autoscalingProfile,
    'enabled': obj.enabled,
    'resourceLimits': obj.resourceLimits?.map(y => toJson_ContainerClusterSpecClusterAutoscalingResourceLimits(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Telemetry integration for the cluster.
 *
 * @schema ContainerClusterSpecClusterTelemetry
 */
export interface ContainerClusterSpecClusterTelemetry {
  /**
   * Type of the integration.
   *
   * @schema ContainerClusterSpecClusterTelemetry#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'ContainerClusterSpecClusterTelemetry' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecClusterTelemetry(obj: ContainerClusterSpecClusterTelemetry | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Configuration for the confidential nodes feature, which makes nodes run on confidential VMs. Warning: This configuration can't be changed (or added/removed) after cluster creation without deleting and recreating the entire cluster.
 *
 * @schema ContainerClusterSpecConfidentialNodes
 */
export interface ContainerClusterSpecConfidentialNodes {
  /**
   * Immutable. Whether Confidential Nodes feature is enabled for all nodes in this cluster.
   *
   * @schema ContainerClusterSpecConfidentialNodes#enabled
   */
  readonly enabled: boolean;

}

/**
 * Converts an object of type 'ContainerClusterSpecConfidentialNodes' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecConfidentialNodes(obj: ContainerClusterSpecConfidentialNodes | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Cost management configuration for the cluster.
 *
 * @schema ContainerClusterSpecCostManagementConfig
 */
export interface ContainerClusterSpecCostManagementConfig {
  /**
   * Whether to enable GKE cost allocation. When you enable GKE cost allocation, the cluster name and namespace of your GKE workloads appear in the labels field of the billing export to BigQuery. Defaults to false.
   *
   * @default false.
   * @schema ContainerClusterSpecCostManagementConfig#enabled
   */
  readonly enabled: boolean;

}

/**
 * Converts an object of type 'ContainerClusterSpecCostManagementConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecCostManagementConfig(obj: ContainerClusterSpecCostManagementConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Application-layer Secrets Encryption settings. The object format is {state = string, key_name = string}. Valid values of state are: "ENCRYPTED"; "DECRYPTED". key_name is the name of a CloudKMS key.
 *
 * @schema ContainerClusterSpecDatabaseEncryption
 */
export interface ContainerClusterSpecDatabaseEncryption {
  /**
   * The key to use to encrypt/decrypt secrets.
   *
   * @schema ContainerClusterSpecDatabaseEncryption#keyName
   */
  readonly keyName?: string;

  /**
   * ENCRYPTED or DECRYPTED.
   *
   * @schema ContainerClusterSpecDatabaseEncryption#state
   */
  readonly state: string;

}

/**
 * Converts an object of type 'ContainerClusterSpecDatabaseEncryption' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecDatabaseEncryption(obj: ContainerClusterSpecDatabaseEncryption | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'keyName': obj.keyName,
    'state': obj.state,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Whether the cluster disables default in-node sNAT rules. In-node sNAT rules will be disabled when defaultSnatStatus is disabled.
 *
 * @schema ContainerClusterSpecDefaultSnatStatus
 */
export interface ContainerClusterSpecDefaultSnatStatus {
  /**
   * When disabled is set to false, default IP masquerade rules will be applied to the nodes to prevent sNAT on cluster internal traffic.
   *
   * @schema ContainerClusterSpecDefaultSnatStatus#disabled
   */
  readonly disabled: boolean;

}

/**
 * Converts an object of type 'ContainerClusterSpecDefaultSnatStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecDefaultSnatStatus(obj: ContainerClusterSpecDefaultSnatStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'disabled': obj.disabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Configuration for Cloud DNS for Kubernetes Engine.
 *
 * @schema ContainerClusterSpecDnsConfig
 */
export interface ContainerClusterSpecDnsConfig {
  /**
   * Which in-cluster DNS provider should be used.
   *
   * @schema ContainerClusterSpecDnsConfig#clusterDns
   */
  readonly clusterDns?: string;

  /**
   * The suffix used for all cluster service records.
   *
   * @schema ContainerClusterSpecDnsConfig#clusterDnsDomain
   */
  readonly clusterDnsDomain?: string;

  /**
   * The scope of access to cluster DNS records.
   *
   * @schema ContainerClusterSpecDnsConfig#clusterDnsScope
   */
  readonly clusterDnsScope?: string;

}

/**
 * Converts an object of type 'ContainerClusterSpecDnsConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecDnsConfig(obj: ContainerClusterSpecDnsConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'clusterDns': obj.clusterDns,
    'clusterDnsDomain': obj.clusterDnsDomain,
    'clusterDnsScope': obj.clusterDnsScope,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration for GKE Gateway API controller.
 *
 * @schema ContainerClusterSpecGatewayApiConfig
 */
export interface ContainerClusterSpecGatewayApiConfig {
  /**
   * The Gateway API release channel to use for Gateway API.
   *
   * @schema ContainerClusterSpecGatewayApiConfig#channel
   */
  readonly channel: string;

}

/**
 * Converts an object of type 'ContainerClusterSpecGatewayApiConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecGatewayApiConfig(obj: ContainerClusterSpecGatewayApiConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'channel': obj.channel,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration for Identity Service which allows customers to use external identity providers with the K8S API.
 *
 * @schema ContainerClusterSpecIdentityServiceConfig
 */
export interface ContainerClusterSpecIdentityServiceConfig {
  /**
   * Whether to enable the Identity Service component.
   *
   * @schema ContainerClusterSpecIdentityServiceConfig#enabled
   */
  readonly enabled?: boolean;

}

/**
 * Converts an object of type 'ContainerClusterSpecIdentityServiceConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecIdentityServiceConfig(obj: ContainerClusterSpecIdentityServiceConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Configuration of cluster IP allocation for VPC-native clusters. Adding this block enables IP aliasing, making the cluster VPC-native instead of routes-based.
 *
 * @schema ContainerClusterSpecIpAllocationPolicy
 */
export interface ContainerClusterSpecIpAllocationPolicy {
  /**
   * Immutable. The IP address range for the cluster pod IPs. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. /14) to have a range chosen with a specific netmask. Set to a CIDR notation (e.g. 10.96.0.0/14) from the RFC-1918 private networks (e.g. 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) to pick a specific range to use.
   *
   * @schema ContainerClusterSpecIpAllocationPolicy#clusterIpv4CidrBlock
   */
  readonly clusterIpv4CidrBlock?: string;

  /**
   * Immutable. The name of the existing secondary range in the cluster's subnetwork to use for pod IP addresses. Alternatively, cluster_ipv4_cidr_block can be used to automatically create a GKE-managed one.
   *
   * @schema ContainerClusterSpecIpAllocationPolicy#clusterSecondaryRangeName
   */
  readonly clusterSecondaryRangeName?: string;

  /**
   * Immutable. Configuration for cluster level pod cidr overprovision. Default is disabled=false.
   *
   * @default disabled=false.
   * @schema ContainerClusterSpecIpAllocationPolicy#podCidrOverprovisionConfig
   */
  readonly podCidrOverprovisionConfig?: ContainerClusterSpecIpAllocationPolicyPodCidrOverprovisionConfig;

  /**
   * Immutable. The IP address range of the services IPs in this cluster. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. /14) to have a range chosen with a specific netmask. Set to a CIDR notation (e.g. 10.96.0.0/14) from the RFC-1918 private networks (e.g. 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) to pick a specific range to use.
   *
   * @schema ContainerClusterSpecIpAllocationPolicy#servicesIpv4CidrBlock
   */
  readonly servicesIpv4CidrBlock?: string;

  /**
   * Immutable. The name of the existing secondary range in the cluster's subnetwork to use for service ClusterIPs. Alternatively, services_ipv4_cidr_block can be used to automatically create a GKE-managed one.
   *
   * @schema ContainerClusterSpecIpAllocationPolicy#servicesSecondaryRangeName
   */
  readonly servicesSecondaryRangeName?: string;

  /**
   * Immutable. The IP Stack type of the cluster. Choose between IPV4 and IPV4_IPV6. Default type is IPV4 Only if not set.
   *
   * @schema ContainerClusterSpecIpAllocationPolicy#stackType
   */
  readonly stackType?: string;

}

/**
 * Converts an object of type 'ContainerClusterSpecIpAllocationPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecIpAllocationPolicy(obj: ContainerClusterSpecIpAllocationPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'clusterIpv4CidrBlock': obj.clusterIpv4CidrBlock,
    'clusterSecondaryRangeName': obj.clusterSecondaryRangeName,
    'podCidrOverprovisionConfig': toJson_ContainerClusterSpecIpAllocationPolicyPodCidrOverprovisionConfig(obj.podCidrOverprovisionConfig),
    'servicesIpv4CidrBlock': obj.servicesIpv4CidrBlock,
    'servicesSecondaryRangeName': obj.servicesSecondaryRangeName,
    'stackType': obj.stackType,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Logging configuration for the cluster.
 *
 * @schema ContainerClusterSpecLoggingConfig
 */
export interface ContainerClusterSpecLoggingConfig {
  /**
   * GKE components exposing logs. Valid values include SYSTEM_COMPONENTS, APISERVER, CONTROLLER_MANAGER, SCHEDULER, and WORKLOADS.
   *
   * @schema ContainerClusterSpecLoggingConfig#enableComponents
   */
  readonly enableComponents: string[];

}

/**
 * Converts an object of type 'ContainerClusterSpecLoggingConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecLoggingConfig(obj: ContainerClusterSpecLoggingConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enableComponents': obj.enableComponents?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The maintenance policy to use for the cluster.
 *
 * @schema ContainerClusterSpecMaintenancePolicy
 */
export interface ContainerClusterSpecMaintenancePolicy {
  /**
   * Time window specified for daily maintenance operations. Specify start_time in RFC3339 format "HH:MM”, where HH : [00-23] and MM : [00-59] GMT.
   *
   * @schema ContainerClusterSpecMaintenancePolicy#dailyMaintenanceWindow
   */
  readonly dailyMaintenanceWindow?: ContainerClusterSpecMaintenancePolicyDailyMaintenanceWindow;

  /**
   * Exceptions to maintenance window. Non-emergency maintenance should not occur in these windows.
   *
   * @schema ContainerClusterSpecMaintenancePolicy#maintenanceExclusion
   */
  readonly maintenanceExclusion?: ContainerClusterSpecMaintenancePolicyMaintenanceExclusion[];

  /**
   * Time window for recurring maintenance operations.
   *
   * @schema ContainerClusterSpecMaintenancePolicy#recurringWindow
   */
  readonly recurringWindow?: ContainerClusterSpecMaintenancePolicyRecurringWindow;

}

/**
 * Converts an object of type 'ContainerClusterSpecMaintenancePolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecMaintenancePolicy(obj: ContainerClusterSpecMaintenancePolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'dailyMaintenanceWindow': toJson_ContainerClusterSpecMaintenancePolicyDailyMaintenanceWindow(obj.dailyMaintenanceWindow),
    'maintenanceExclusion': obj.maintenanceExclusion?.map(y => toJson_ContainerClusterSpecMaintenancePolicyMaintenanceExclusion(y)),
    'recurringWindow': toJson_ContainerClusterSpecMaintenancePolicyRecurringWindow(obj.recurringWindow),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DEPRECATED. Basic authentication was removed for GKE cluster versions >= 1.19. The authentication information for accessing the Kubernetes master. Some values in this block are only returned by the API if your service account has permission to get credentials for your GKE cluster. If you see an unexpected diff unsetting your client cert, ensure you have the container.clusters.getCredentials permission.
 *
 * @schema ContainerClusterSpecMasterAuth
 */
export interface ContainerClusterSpecMasterAuth {
  /**
   * Base64 encoded public certificate used by clients to authenticate to the cluster endpoint.
   *
   * @schema ContainerClusterSpecMasterAuth#clientCertificate
   */
  readonly clientCertificate?: string;

  /**
   * Immutable. Whether client certificate authorization is enabled for this cluster.
   *
   * @schema ContainerClusterSpecMasterAuth#clientCertificateConfig
   */
  readonly clientCertificateConfig?: ContainerClusterSpecMasterAuthClientCertificateConfig;

  /**
   * Base64 encoded private key used by clients to authenticate to the cluster endpoint.
   *
   * @schema ContainerClusterSpecMasterAuth#clientKey
   */
  readonly clientKey?: string;

  /**
   * Base64 encoded public certificate that is the root of trust for the cluster.
   *
   * @schema ContainerClusterSpecMasterAuth#clusterCaCertificate
   */
  readonly clusterCaCertificate?: string;

  /**
   * The password to use for HTTP basic authentication when accessing the Kubernetes master endpoint.
   *
   * @schema ContainerClusterSpecMasterAuth#password
   */
  readonly password?: ContainerClusterSpecMasterAuthPassword;

  /**
   * The username to use for HTTP basic authentication when accessing the Kubernetes master endpoint. If not present basic auth will be disabled.
   *
   * @schema ContainerClusterSpecMasterAuth#username
   */
  readonly username?: string;

}

/**
 * Converts an object of type 'ContainerClusterSpecMasterAuth' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecMasterAuth(obj: ContainerClusterSpecMasterAuth | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'clientCertificate': obj.clientCertificate,
    'clientCertificateConfig': toJson_ContainerClusterSpecMasterAuthClientCertificateConfig(obj.clientCertificateConfig),
    'clientKey': obj.clientKey,
    'clusterCaCertificate': obj.clusterCaCertificate,
    'password': toJson_ContainerClusterSpecMasterAuthPassword(obj.password),
    'username': obj.username,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The desired configuration options for master authorized networks. Omit the nested cidr_blocks attribute to disallow external access (except the cluster node IPs, which GKE automatically whitelists).
 *
 * @schema ContainerClusterSpecMasterAuthorizedNetworksConfig
 */
export interface ContainerClusterSpecMasterAuthorizedNetworksConfig {
  /**
   * External networks that can access the Kubernetes cluster master through HTTPS.
   *
   * @schema ContainerClusterSpecMasterAuthorizedNetworksConfig#cidrBlocks
   */
  readonly cidrBlocks?: ContainerClusterSpecMasterAuthorizedNetworksConfigCidrBlocks[];

  /**
   * Whether master is accessbile via Google Compute Engine Public IP addresses.
   *
   * @schema ContainerClusterSpecMasterAuthorizedNetworksConfig#gcpPublicCidrsAccessEnabled
   */
  readonly gcpPublicCidrsAccessEnabled?: boolean;

}

/**
 * Converts an object of type 'ContainerClusterSpecMasterAuthorizedNetworksConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecMasterAuthorizedNetworksConfig(obj: ContainerClusterSpecMasterAuthorizedNetworksConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cidrBlocks': obj.cidrBlocks?.map(y => toJson_ContainerClusterSpecMasterAuthorizedNetworksConfigCidrBlocks(y)),
    'gcpPublicCidrsAccessEnabled': obj.gcpPublicCidrsAccessEnabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * If set, and enable_certificates=true, the GKE Workload Identity Certificates controller and node agent will be deployed in the cluster.
 *
 * @schema ContainerClusterSpecMeshCertificates
 */
export interface ContainerClusterSpecMeshCertificates {
  /**
   * When enabled the GKE Workload Identity Certificates controller and node agent will be deployed in the cluster.
   *
   * @schema ContainerClusterSpecMeshCertificates#enableCertificates
   */
  readonly enableCertificates: boolean;

}

/**
 * Converts an object of type 'ContainerClusterSpecMeshCertificates' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecMeshCertificates(obj: ContainerClusterSpecMeshCertificates | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enableCertificates': obj.enableCertificates,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Monitoring configuration for the cluster.
 *
 * @schema ContainerClusterSpecMonitoringConfig
 */
export interface ContainerClusterSpecMonitoringConfig {
  /**
   * GKE components exposing metrics. Valid values include SYSTEM_COMPONENTS, APISERVER, CONTROLLER_MANAGER, SCHEDULER, and WORKLOADS.
   *
   * @schema ContainerClusterSpecMonitoringConfig#enableComponents
   */
  readonly enableComponents?: string[];

  /**
   * Configuration for Google Cloud Managed Services for Prometheus.
   *
   * @schema ContainerClusterSpecMonitoringConfig#managedPrometheus
   */
  readonly managedPrometheus?: ContainerClusterSpecMonitoringConfigManagedPrometheus;

}

/**
 * Converts an object of type 'ContainerClusterSpecMonitoringConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecMonitoringConfig(obj: ContainerClusterSpecMonitoringConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enableComponents': obj.enableComponents?.map(y => y),
    'managedPrometheus': toJson_ContainerClusterSpecMonitoringConfigManagedPrometheus(obj.managedPrometheus),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration options for the NetworkPolicy feature.
 *
 * @schema ContainerClusterSpecNetworkPolicy
 */
export interface ContainerClusterSpecNetworkPolicy {
  /**
   * Whether network policy is enabled on the cluster.
   *
   * @schema ContainerClusterSpecNetworkPolicy#enabled
   */
  readonly enabled: boolean;

  /**
   * The selected network policy provider. Defaults to PROVIDER_UNSPECIFIED.
   *
   * @default PROVIDER_UNSPECIFIED.
   * @schema ContainerClusterSpecNetworkPolicy#provider
   */
  readonly provider?: string;

}

/**
 * Converts an object of type 'ContainerClusterSpecNetworkPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecNetworkPolicy(obj: ContainerClusterSpecNetworkPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
    'provider': obj.provider,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ContainerClusterSpecNetworkRef
 */
export interface ContainerClusterSpecNetworkRef {
  /**
   * Allowed value: The `selfLink` field of a `ComputeNetwork` resource.
   *
   * @schema ContainerClusterSpecNetworkRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ContainerClusterSpecNetworkRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema ContainerClusterSpecNetworkRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ContainerClusterSpecNetworkRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecNetworkRef(obj: ContainerClusterSpecNetworkRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. The configuration of the nodepool.
 *
 * @schema ContainerClusterSpecNodeConfig
 */
export interface ContainerClusterSpecNodeConfig {
  /**
   * Immutable. Specifies options for controlling advanced machine features.
   *
   * @schema ContainerClusterSpecNodeConfig#advancedMachineFeatures
   */
  readonly advancedMachineFeatures?: ContainerClusterSpecNodeConfigAdvancedMachineFeatures;

  /**
   * @schema ContainerClusterSpecNodeConfig#bootDiskKMSCryptoKeyRef
   */
  readonly bootDiskKmsCryptoKeyRef?: ContainerClusterSpecNodeConfigBootDiskKmsCryptoKeyRef;

  /**
   * Immutable. Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB.
   *
   * @schema ContainerClusterSpecNodeConfig#diskSizeGb
   */
  readonly diskSizeGb?: number;

  /**
   * Immutable. Type of the disk attached to each node. Such as pd-standard, pd-balanced or pd-ssd.
   *
   * @schema ContainerClusterSpecNodeConfig#diskType
   */
  readonly diskType?: string;

  /**
   * Immutable. Parameters for the ephemeral storage filesystem. If unspecified, ephemeral storage is backed by the boot disk.
   *
   * @schema ContainerClusterSpecNodeConfig#ephemeralStorageConfig
   */
  readonly ephemeralStorageConfig?: ContainerClusterSpecNodeConfigEphemeralStorageConfig;

  /**
   * Immutable. Parameters for the ephemeral storage filesystem. If unspecified, ephemeral storage is backed by the boot disk.
   *
   * @schema ContainerClusterSpecNodeConfig#ephemeralStorageLocalSsdConfig
   */
  readonly ephemeralStorageLocalSsdConfig?: ContainerClusterSpecNodeConfigEphemeralStorageLocalSsdConfig;

  /**
   * Immutable. GCFS configuration for this node.
   *
   * @schema ContainerClusterSpecNodeConfig#gcfsConfig
   */
  readonly gcfsConfig?: ContainerClusterSpecNodeConfigGcfsConfig;

  /**
   * Immutable. List of the type and count of accelerator cards attached to the instance.
   *
   * @schema ContainerClusterSpecNodeConfig#guestAccelerator
   */
  readonly guestAccelerator?: ContainerClusterSpecNodeConfigGuestAccelerator[];

  /**
   * Immutable. Enable or disable gvnic in the node pool.
   *
   * @schema ContainerClusterSpecNodeConfig#gvnic
   */
  readonly gvnic?: ContainerClusterSpecNodeConfigGvnic;

  /**
   * The image type to use for this node. Note that for a given image type, the latest version of it will be used.
   *
   * @schema ContainerClusterSpecNodeConfig#imageType
   */
  readonly imageType?: string;

  /**
   * Node kubelet configs.
   *
   * @schema ContainerClusterSpecNodeConfig#kubeletConfig
   */
  readonly kubeletConfig?: ContainerClusterSpecNodeConfigKubeletConfig;

  /**
   * Immutable. The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node.
   *
   * @schema ContainerClusterSpecNodeConfig#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Parameters that can be configured on Linux nodes.
   *
   * @schema ContainerClusterSpecNodeConfig#linuxNodeConfig
   */
  readonly linuxNodeConfig?: ContainerClusterSpecNodeConfigLinuxNodeConfig;

  /**
   * Immutable. Parameters for raw-block local NVMe SSDs.
   *
   * @schema ContainerClusterSpecNodeConfig#localNvmeSsdBlockConfig
   */
  readonly localNvmeSsdBlockConfig?: ContainerClusterSpecNodeConfigLocalNvmeSsdBlockConfig;

  /**
   * Immutable. The number of local SSD disks to be attached to the node.
   *
   * @schema ContainerClusterSpecNodeConfig#localSsdCount
   */
  readonly localSsdCount?: number;

  /**
   * Type of logging agent that is used as the default value for node pools in the cluster. Valid values include DEFAULT and MAX_THROUGHPUT.
   *
   * @schema ContainerClusterSpecNodeConfig#loggingVariant
   */
  readonly loggingVariant?: string;

  /**
   * Immutable. The name of a Google Compute Engine machine type.
   *
   * @schema ContainerClusterSpecNodeConfig#machineType
   */
  readonly machineType?: string;

  /**
   * Immutable. The metadata key/value pairs assigned to instances in the cluster.
   *
   * @schema ContainerClusterSpecNodeConfig#metadata
   */
  readonly metadata?: { [key: string]: string };

  /**
   * Immutable. Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform.
   *
   * @schema ContainerClusterSpecNodeConfig#minCpuPlatform
   */
  readonly minCpuPlatform?: string;

  /**
   * Immutable. Setting this field will assign instances
   * of this pool to run on the specified node group. This is useful
   * for running workloads on sole tenant nodes.
   *
   * @schema ContainerClusterSpecNodeConfig#nodeGroupRef
   */
  readonly nodeGroupRef?: ContainerClusterSpecNodeConfigNodeGroupRef;

  /**
   * Immutable. The set of Google API scopes to be made available on all of the node VMs.
   *
   * @schema ContainerClusterSpecNodeConfig#oauthScopes
   */
  readonly oauthScopes?: string[];

  /**
   * Immutable. Whether the nodes are created as preemptible VM instances.
   *
   * @schema ContainerClusterSpecNodeConfig#preemptible
   */
  readonly preemptible?: boolean;

  /**
   * Immutable. The reservation affinity configuration for the node pool.
   *
   * @schema ContainerClusterSpecNodeConfig#reservationAffinity
   */
  readonly reservationAffinity?: ContainerClusterSpecNodeConfigReservationAffinity;

  /**
   * The GCE resource labels (a map of key/value pairs) to be applied to the node pool.
   *
   * @schema ContainerClusterSpecNodeConfig#resourceLabels
   */
  readonly resourceLabels?: { [key: string]: string };

  /**
   * Immutable. Sandbox configuration for this node.
   *
   * @schema ContainerClusterSpecNodeConfig#sandboxConfig
   */
  readonly sandboxConfig?: ContainerClusterSpecNodeConfigSandboxConfig;

  /**
   * @schema ContainerClusterSpecNodeConfig#serviceAccountRef
   */
  readonly serviceAccountRef?: ContainerClusterSpecNodeConfigServiceAccountRef;

  /**
   * Immutable. Shielded Instance options.
   *
   * @schema ContainerClusterSpecNodeConfig#shieldedInstanceConfig
   */
  readonly shieldedInstanceConfig?: ContainerClusterSpecNodeConfigShieldedInstanceConfig;

  /**
   * Immutable. Node affinity options for sole tenant node pools.
   *
   * @schema ContainerClusterSpecNodeConfig#soleTenantConfig
   */
  readonly soleTenantConfig?: ContainerClusterSpecNodeConfigSoleTenantConfig;

  /**
   * Immutable. Whether the nodes are created as spot VM instances.
   *
   * @schema ContainerClusterSpecNodeConfig#spot
   */
  readonly spot?: boolean;

  /**
   * The list of instance tags applied to all nodes.
   *
   * @schema ContainerClusterSpecNodeConfig#tags
   */
  readonly tags?: string[];

  /**
   * Immutable. List of Kubernetes taints to be applied to each node.
   *
   * @schema ContainerClusterSpecNodeConfig#taint
   */
  readonly taint?: ContainerClusterSpecNodeConfigTaint[];

  /**
   * Immutable. The workload metadata configuration for this node.
   *
   * @schema ContainerClusterSpecNodeConfig#workloadMetadataConfig
   */
  readonly workloadMetadataConfig?: ContainerClusterSpecNodeConfigWorkloadMetadataConfig;

}

/**
 * Converts an object of type 'ContainerClusterSpecNodeConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecNodeConfig(obj: ContainerClusterSpecNodeConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'advancedMachineFeatures': toJson_ContainerClusterSpecNodeConfigAdvancedMachineFeatures(obj.advancedMachineFeatures),
    'bootDiskKMSCryptoKeyRef': toJson_ContainerClusterSpecNodeConfigBootDiskKmsCryptoKeyRef(obj.bootDiskKmsCryptoKeyRef),
    'diskSizeGb': obj.diskSizeGb,
    'diskType': obj.diskType,
    'ephemeralStorageConfig': toJson_ContainerClusterSpecNodeConfigEphemeralStorageConfig(obj.ephemeralStorageConfig),
    'ephemeralStorageLocalSsdConfig': toJson_ContainerClusterSpecNodeConfigEphemeralStorageLocalSsdConfig(obj.ephemeralStorageLocalSsdConfig),
    'gcfsConfig': toJson_ContainerClusterSpecNodeConfigGcfsConfig(obj.gcfsConfig),
    'guestAccelerator': obj.guestAccelerator?.map(y => toJson_ContainerClusterSpecNodeConfigGuestAccelerator(y)),
    'gvnic': toJson_ContainerClusterSpecNodeConfigGvnic(obj.gvnic),
    'imageType': obj.imageType,
    'kubeletConfig': toJson_ContainerClusterSpecNodeConfigKubeletConfig(obj.kubeletConfig),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'linuxNodeConfig': toJson_ContainerClusterSpecNodeConfigLinuxNodeConfig(obj.linuxNodeConfig),
    'localNvmeSsdBlockConfig': toJson_ContainerClusterSpecNodeConfigLocalNvmeSsdBlockConfig(obj.localNvmeSsdBlockConfig),
    'localSsdCount': obj.localSsdCount,
    'loggingVariant': obj.loggingVariant,
    'machineType': obj.machineType,
    'metadata': ((obj.metadata) === undefined) ? undefined : (Object.entries(obj.metadata).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'minCpuPlatform': obj.minCpuPlatform,
    'nodeGroupRef': toJson_ContainerClusterSpecNodeConfigNodeGroupRef(obj.nodeGroupRef),
    'oauthScopes': obj.oauthScopes?.map(y => y),
    'preemptible': obj.preemptible,
    'reservationAffinity': toJson_ContainerClusterSpecNodeConfigReservationAffinity(obj.reservationAffinity),
    'resourceLabels': ((obj.resourceLabels) === undefined) ? undefined : (Object.entries(obj.resourceLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'sandboxConfig': toJson_ContainerClusterSpecNodeConfigSandboxConfig(obj.sandboxConfig),
    'serviceAccountRef': toJson_ContainerClusterSpecNodeConfigServiceAccountRef(obj.serviceAccountRef),
    'shieldedInstanceConfig': toJson_ContainerClusterSpecNodeConfigShieldedInstanceConfig(obj.shieldedInstanceConfig),
    'soleTenantConfig': toJson_ContainerClusterSpecNodeConfigSoleTenantConfig(obj.soleTenantConfig),
    'spot': obj.spot,
    'tags': obj.tags?.map(y => y),
    'taint': obj.taint?.map(y => toJson_ContainerClusterSpecNodeConfigTaint(y)),
    'workloadMetadataConfig': toJson_ContainerClusterSpecNodeConfigWorkloadMetadataConfig(obj.workloadMetadataConfig),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Node pool configs that apply to all auto-provisioned node pools in autopilot clusters and node auto-provisioning enabled clusters.
 *
 * @schema ContainerClusterSpecNodePoolAutoConfig
 */
export interface ContainerClusterSpecNodePoolAutoConfig {
  /**
   * Collection of Compute Engine network tags that can be applied to a node's underlying VM instance.
   *
   * @schema ContainerClusterSpecNodePoolAutoConfig#networkTags
   */
  readonly networkTags?: ContainerClusterSpecNodePoolAutoConfigNetworkTags;

}

/**
 * Converts an object of type 'ContainerClusterSpecNodePoolAutoConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecNodePoolAutoConfig(obj: ContainerClusterSpecNodePoolAutoConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'networkTags': toJson_ContainerClusterSpecNodePoolAutoConfigNetworkTags(obj.networkTags),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The default nodel pool settings for the entire cluster.
 *
 * @schema ContainerClusterSpecNodePoolDefaults
 */
export interface ContainerClusterSpecNodePoolDefaults {
  /**
   * Subset of NodeConfig message that has defaults.
   *
   * @schema ContainerClusterSpecNodePoolDefaults#nodeConfigDefaults
   */
  readonly nodeConfigDefaults?: ContainerClusterSpecNodePoolDefaultsNodeConfigDefaults;

}

/**
 * Converts an object of type 'ContainerClusterSpecNodePoolDefaults' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecNodePoolDefaults(obj: ContainerClusterSpecNodePoolDefaults | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'nodeConfigDefaults': toJson_ContainerClusterSpecNodePoolDefaultsNodeConfigDefaults(obj.nodeConfigDefaults),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The notification config for sending cluster upgrade notifications.
 *
 * @schema ContainerClusterSpecNotificationConfig
 */
export interface ContainerClusterSpecNotificationConfig {
  /**
   * Notification config for Cloud Pub/Sub.
   *
   * @schema ContainerClusterSpecNotificationConfig#pubsub
   */
  readonly pubsub: ContainerClusterSpecNotificationConfigPubsub;

}

/**
 * Converts an object of type 'ContainerClusterSpecNotificationConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecNotificationConfig(obj: ContainerClusterSpecNotificationConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'pubsub': toJson_ContainerClusterSpecNotificationConfigPubsub(obj.pubsub),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration for the PodSecurityPolicy feature.
 *
 * @schema ContainerClusterSpecPodSecurityPolicyConfig
 */
export interface ContainerClusterSpecPodSecurityPolicyConfig {
  /**
   * Enable the PodSecurityPolicy controller for this cluster. If enabled, pods must be valid under a PodSecurityPolicy to be created.
   *
   * @schema ContainerClusterSpecPodSecurityPolicyConfig#enabled
   */
  readonly enabled: boolean;

}

/**
 * Converts an object of type 'ContainerClusterSpecPodSecurityPolicyConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecPodSecurityPolicyConfig(obj: ContainerClusterSpecPodSecurityPolicyConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration for private clusters, clusters with private nodes.
 *
 * @schema ContainerClusterSpecPrivateClusterConfig
 */
export interface ContainerClusterSpecPrivateClusterConfig {
  /**
   * When true, the cluster's private endpoint is used as the cluster endpoint and access through the public endpoint is disabled. When false, either endpoint can be used. This field only applies to private clusters, when enable_private_nodes is true.
   *
   * @schema ContainerClusterSpecPrivateClusterConfig#enablePrivateEndpoint
   */
  readonly enablePrivateEndpoint?: boolean;

  /**
   * Immutable. Enables the private cluster feature, creating a private endpoint on the cluster. In a private cluster, nodes only have RFC 1918 private addresses and communicate with the master's private endpoint via private networking.
   *
   * @schema ContainerClusterSpecPrivateClusterConfig#enablePrivateNodes
   */
  readonly enablePrivateNodes?: boolean;

  /**
   * Controls cluster master global access settings.
   *
   * @schema ContainerClusterSpecPrivateClusterConfig#masterGlobalAccessConfig
   */
  readonly masterGlobalAccessConfig?: ContainerClusterSpecPrivateClusterConfigMasterGlobalAccessConfig;

  /**
   * Immutable. The IP range in CIDR notation to use for the hosted master network. This range will be used for assigning private IP addresses to the cluster master(s) and the ILB VIP. This range must not overlap with any other ranges in use within the cluster's network, and it must be a /28 subnet. See Private Cluster Limitations for more details. This field only applies to private clusters, when enable_private_nodes is true.
   *
   * @schema ContainerClusterSpecPrivateClusterConfig#masterIpv4CidrBlock
   */
  readonly masterIpv4CidrBlock?: string;

  /**
   * The name of the peering between this cluster and the Google owned VPC.
   *
   * @schema ContainerClusterSpecPrivateClusterConfig#peeringName
   */
  readonly peeringName?: string;

  /**
   * The internal IP address of this cluster's master endpoint.
   *
   * @schema ContainerClusterSpecPrivateClusterConfig#privateEndpoint
   */
  readonly privateEndpoint?: string;

  /**
   * Immutable. Subnetwork in cluster's network where master's endpoint
   * will be provisioned.
   *
   * @schema ContainerClusterSpecPrivateClusterConfig#privateEndpointSubnetworkRef
   */
  readonly privateEndpointSubnetworkRef?: ContainerClusterSpecPrivateClusterConfigPrivateEndpointSubnetworkRef;

  /**
   * The external IP address of this cluster's master endpoint.
   *
   * @schema ContainerClusterSpecPrivateClusterConfig#publicEndpoint
   */
  readonly publicEndpoint?: string;

}

/**
 * Converts an object of type 'ContainerClusterSpecPrivateClusterConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecPrivateClusterConfig(obj: ContainerClusterSpecPrivateClusterConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enablePrivateEndpoint': obj.enablePrivateEndpoint,
    'enablePrivateNodes': obj.enablePrivateNodes,
    'masterGlobalAccessConfig': toJson_ContainerClusterSpecPrivateClusterConfigMasterGlobalAccessConfig(obj.masterGlobalAccessConfig),
    'masterIpv4CidrBlock': obj.masterIpv4CidrBlock,
    'peeringName': obj.peeringName,
    'privateEndpoint': obj.privateEndpoint,
    'privateEndpointSubnetworkRef': toJson_ContainerClusterSpecPrivateClusterConfigPrivateEndpointSubnetworkRef(obj.privateEndpointSubnetworkRef),
    'publicEndpoint': obj.publicEndpoint,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Enable/Disable Protect API features for the cluster.
 *
 * @schema ContainerClusterSpecProtectConfig
 */
export interface ContainerClusterSpecProtectConfig {
  /**
   * WorkloadConfig defines which actions are enabled for a cluster's workload configurations.
   *
   * @schema ContainerClusterSpecProtectConfig#workloadConfig
   */
  readonly workloadConfig?: ContainerClusterSpecProtectConfigWorkloadConfig;

  /**
   * Sets which mode to use for Protect workload vulnerability scanning feature. Accepted values are DISABLED, BASIC.
   *
   * @schema ContainerClusterSpecProtectConfig#workloadVulnerabilityMode
   */
  readonly workloadVulnerabilityMode?: string;

}

/**
 * Converts an object of type 'ContainerClusterSpecProtectConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecProtectConfig(obj: ContainerClusterSpecProtectConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'workloadConfig': toJson_ContainerClusterSpecProtectConfigWorkloadConfig(obj.workloadConfig),
    'workloadVulnerabilityMode': obj.workloadVulnerabilityMode,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration options for the Release channel feature, which provide more control over automatic upgrades of your GKE clusters. Note that removing this field from your config will not unenroll it. Instead, use the "UNSPECIFIED" channel.
 *
 * @schema ContainerClusterSpecReleaseChannel
 */
export interface ContainerClusterSpecReleaseChannel {
  /**
   * The selected release channel. Accepted values are:
   * * UNSPECIFIED: Not set.
   * * RAPID: Weekly upgrade cadence; Early testers and developers who requires new features.
   * * REGULAR: Multiple per month upgrade cadence; Production users who need features not yet offered in the Stable channel.
   * * STABLE: Every few months upgrade cadence; Production users who need stability above all else, and for whom frequent upgrades are too risky.
   *
   * @schema ContainerClusterSpecReleaseChannel#channel
   */
  readonly channel: string;

}

/**
 * Converts an object of type 'ContainerClusterSpecReleaseChannel' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecReleaseChannel(obj: ContainerClusterSpecReleaseChannel | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'channel': obj.channel,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration for the ResourceUsageExportConfig feature.
 *
 * @schema ContainerClusterSpecResourceUsageExportConfig
 */
export interface ContainerClusterSpecResourceUsageExportConfig {
  /**
   * Parameters for using BigQuery as the destination of resource usage export.
   *
   * @schema ContainerClusterSpecResourceUsageExportConfig#bigqueryDestination
   */
  readonly bigqueryDestination: ContainerClusterSpecResourceUsageExportConfigBigqueryDestination;

  /**
   * Whether to enable network egress metering for this cluster. If enabled, a daemonset will be created in the cluster to meter network egress traffic.
   *
   * @schema ContainerClusterSpecResourceUsageExportConfig#enableNetworkEgressMetering
   */
  readonly enableNetworkEgressMetering?: boolean;

  /**
   * Whether to enable resource consumption metering on this cluster. When enabled, a table will be created in the resource export BigQuery dataset to store resource consumption data. The resulting table can be joined with the resource usage table or with BigQuery billing export. Defaults to true.
   *
   * @default true.
   * @schema ContainerClusterSpecResourceUsageExportConfig#enableResourceConsumptionMetering
   */
  readonly enableResourceConsumptionMetering?: boolean;

}

/**
 * Converts an object of type 'ContainerClusterSpecResourceUsageExportConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecResourceUsageExportConfig(obj: ContainerClusterSpecResourceUsageExportConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bigqueryDestination': toJson_ContainerClusterSpecResourceUsageExportConfigBigqueryDestination(obj.bigqueryDestination),
    'enableNetworkEgressMetering': obj.enableNetworkEgressMetering,
    'enableResourceConsumptionMetering': obj.enableResourceConsumptionMetering,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Defines the config needed to enable/disable features for the Security Posture API.
 *
 * @schema ContainerClusterSpecSecurityPostureConfig
 */
export interface ContainerClusterSpecSecurityPostureConfig {
  /**
   * Sets the mode of the Kubernetes security posture API's off-cluster features. Available options include DISABLED and BASIC.
   *
   * @schema ContainerClusterSpecSecurityPostureConfig#mode
   */
  readonly mode?: string;

  /**
   * Sets the mode of the Kubernetes security posture API's workload vulnerability scanning. Available options include VULNERABILITY_DISABLED and VULNERABILITY_BASIC.
   *
   * @schema ContainerClusterSpecSecurityPostureConfig#vulnerabilityMode
   */
  readonly vulnerabilityMode?: string;

}

/**
 * Converts an object of type 'ContainerClusterSpecSecurityPostureConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecSecurityPostureConfig(obj: ContainerClusterSpecSecurityPostureConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'mode': obj.mode,
    'vulnerabilityMode': obj.vulnerabilityMode,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * If set, and enabled=true, services with external ips field will not be blocked.
 *
 * @schema ContainerClusterSpecServiceExternalIpsConfig
 */
export interface ContainerClusterSpecServiceExternalIpsConfig {
  /**
   * When enabled, services with exterenal ips specified will be allowed.
   *
   * @schema ContainerClusterSpecServiceExternalIpsConfig#enabled
   */
  readonly enabled: boolean;

}

/**
 * Converts an object of type 'ContainerClusterSpecServiceExternalIpsConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecServiceExternalIpsConfig(obj: ContainerClusterSpecServiceExternalIpsConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ContainerClusterSpecSubnetworkRef
 */
export interface ContainerClusterSpecSubnetworkRef {
  /**
   * Allowed value: The `selfLink` field of a `ComputeSubnetwork` resource.
   *
   * @schema ContainerClusterSpecSubnetworkRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ContainerClusterSpecSubnetworkRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema ContainerClusterSpecSubnetworkRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ContainerClusterSpecSubnetworkRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecSubnetworkRef(obj: ContainerClusterSpecSubnetworkRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Vertical Pod Autoscaling automatically adjusts the resources of pods controlled by it.
 *
 * @schema ContainerClusterSpecVerticalPodAutoscaling
 */
export interface ContainerClusterSpecVerticalPodAutoscaling {
  /**
   * Enables vertical pod autoscaling.
   *
   * @schema ContainerClusterSpecVerticalPodAutoscaling#enabled
   */
  readonly enabled: boolean;

}

/**
 * Converts an object of type 'ContainerClusterSpecVerticalPodAutoscaling' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecVerticalPodAutoscaling(obj: ContainerClusterSpecVerticalPodAutoscaling | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration for the use of Kubernetes Service Accounts in GCP IAM policies.
 *
 * @schema ContainerClusterSpecWorkloadIdentityConfig
 */
export interface ContainerClusterSpecWorkloadIdentityConfig {
  /**
   * DEPRECATED. This field will be removed in a future major release as it has been deprecated in the API. Use `workloadPool` instead; `workloadPool` field will supersede this field.
   * Enables workload identity.
   *
   * @schema ContainerClusterSpecWorkloadIdentityConfig#identityNamespace
   */
  readonly identityNamespace?: string;

  /**
   * The workload pool to attach all Kubernetes service accounts to.
   *
   * @schema ContainerClusterSpecWorkloadIdentityConfig#workloadPool
   */
  readonly workloadPool?: string;

}

/**
 * Converts an object of type 'ContainerClusterSpecWorkloadIdentityConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecWorkloadIdentityConfig(obj: ContainerClusterSpecWorkloadIdentityConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'identityNamespace': obj.identityNamespace,
    'workloadPool': obj.workloadPool,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The status of the CloudRun addon. It is disabled by default. Set disabled = false to enable.
 *
 * @schema ContainerClusterSpecAddonsConfigCloudrunConfig
 */
export interface ContainerClusterSpecAddonsConfigCloudrunConfig {
  /**
   * @schema ContainerClusterSpecAddonsConfigCloudrunConfig#disabled
   */
  readonly disabled: boolean;

  /**
   * @schema ContainerClusterSpecAddonsConfigCloudrunConfig#loadBalancerType
   */
  readonly loadBalancerType?: string;

}

/**
 * Converts an object of type 'ContainerClusterSpecAddonsConfigCloudrunConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecAddonsConfigCloudrunConfig(obj: ContainerClusterSpecAddonsConfigCloudrunConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'disabled': obj.disabled,
    'loadBalancerType': obj.loadBalancerType,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The of the Config Connector addon.
 *
 * @schema ContainerClusterSpecAddonsConfigConfigConnectorConfig
 */
export interface ContainerClusterSpecAddonsConfigConfigConnectorConfig {
  /**
   * @schema ContainerClusterSpecAddonsConfigConfigConnectorConfig#enabled
   */
  readonly enabled: boolean;

}

/**
 * Converts an object of type 'ContainerClusterSpecAddonsConfigConfigConnectorConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecAddonsConfigConfigConnectorConfig(obj: ContainerClusterSpecAddonsConfigConfigConnectorConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The status of the NodeLocal DNSCache addon. It is disabled by default. Set enabled = true to enable.
 *
 * @schema ContainerClusterSpecAddonsConfigDnsCacheConfig
 */
export interface ContainerClusterSpecAddonsConfigDnsCacheConfig {
  /**
   * @schema ContainerClusterSpecAddonsConfigDnsCacheConfig#enabled
   */
  readonly enabled: boolean;

}

/**
 * Converts an object of type 'ContainerClusterSpecAddonsConfigDnsCacheConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecAddonsConfigDnsCacheConfig(obj: ContainerClusterSpecAddonsConfigDnsCacheConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Whether this cluster should enable the Google Compute Engine Persistent Disk Container Storage Interface (CSI) Driver. Defaults to enabled; set disabled = true to disable.
 *
 * @default enabled; set disabled = true to disable.
 * @schema ContainerClusterSpecAddonsConfigGcePersistentDiskCsiDriverConfig
 */
export interface ContainerClusterSpecAddonsConfigGcePersistentDiskCsiDriverConfig {
  /**
   * @schema ContainerClusterSpecAddonsConfigGcePersistentDiskCsiDriverConfig#enabled
   */
  readonly enabled: boolean;

}

/**
 * Converts an object of type 'ContainerClusterSpecAddonsConfigGcePersistentDiskCsiDriverConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecAddonsConfigGcePersistentDiskCsiDriverConfig(obj: ContainerClusterSpecAddonsConfigGcePersistentDiskCsiDriverConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The status of the Filestore CSI driver addon, which allows the usage of filestore instance as volumes. Defaults to disabled; set enabled = true to enable.
 *
 * @default disabled; set enabled = true to enable.
 * @schema ContainerClusterSpecAddonsConfigGcpFilestoreCsiDriverConfig
 */
export interface ContainerClusterSpecAddonsConfigGcpFilestoreCsiDriverConfig {
  /**
   * @schema ContainerClusterSpecAddonsConfigGcpFilestoreCsiDriverConfig#enabled
   */
  readonly enabled: boolean;

}

/**
 * Converts an object of type 'ContainerClusterSpecAddonsConfigGcpFilestoreCsiDriverConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecAddonsConfigGcpFilestoreCsiDriverConfig(obj: ContainerClusterSpecAddonsConfigGcpFilestoreCsiDriverConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The status of the GCS Fuse CSI driver addon, which allows the usage of gcs bucket as volumes. Defaults to disabled; set enabled = true to enable.
 *
 * @default disabled; set enabled = true to enable.
 * @schema ContainerClusterSpecAddonsConfigGcsFuseCsiDriverConfig
 */
export interface ContainerClusterSpecAddonsConfigGcsFuseCsiDriverConfig {
  /**
   * @schema ContainerClusterSpecAddonsConfigGcsFuseCsiDriverConfig#enabled
   */
  readonly enabled: boolean;

}

/**
 * Converts an object of type 'ContainerClusterSpecAddonsConfigGcsFuseCsiDriverConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecAddonsConfigGcsFuseCsiDriverConfig(obj: ContainerClusterSpecAddonsConfigGcsFuseCsiDriverConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The status of the Backup for GKE Agent addon. It is disabled by default. Set enabled = true to enable.
 *
 * @schema ContainerClusterSpecAddonsConfigGkeBackupAgentConfig
 */
export interface ContainerClusterSpecAddonsConfigGkeBackupAgentConfig {
  /**
   * @schema ContainerClusterSpecAddonsConfigGkeBackupAgentConfig#enabled
   */
  readonly enabled: boolean;

}

/**
 * Converts an object of type 'ContainerClusterSpecAddonsConfigGkeBackupAgentConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecAddonsConfigGkeBackupAgentConfig(obj: ContainerClusterSpecAddonsConfigGkeBackupAgentConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The status of the Horizontal Pod Autoscaling addon, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods. It ensures that a Heapster pod is running in the cluster, which is also used by the Cloud Monitoring service. It is enabled by default; set disabled = true to disable.
 *
 * @schema ContainerClusterSpecAddonsConfigHorizontalPodAutoscaling
 */
export interface ContainerClusterSpecAddonsConfigHorizontalPodAutoscaling {
  /**
   * @schema ContainerClusterSpecAddonsConfigHorizontalPodAutoscaling#disabled
   */
  readonly disabled: boolean;

}

/**
 * Converts an object of type 'ContainerClusterSpecAddonsConfigHorizontalPodAutoscaling' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecAddonsConfigHorizontalPodAutoscaling(obj: ContainerClusterSpecAddonsConfigHorizontalPodAutoscaling | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'disabled': obj.disabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The status of the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster. It is enabled by default; set disabled = true to disable.
 *
 * @schema ContainerClusterSpecAddonsConfigHttpLoadBalancing
 */
export interface ContainerClusterSpecAddonsConfigHttpLoadBalancing {
  /**
   * @schema ContainerClusterSpecAddonsConfigHttpLoadBalancing#disabled
   */
  readonly disabled: boolean;

}

/**
 * Converts an object of type 'ContainerClusterSpecAddonsConfigHttpLoadBalancing' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecAddonsConfigHttpLoadBalancing(obj: ContainerClusterSpecAddonsConfigHttpLoadBalancing | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'disabled': obj.disabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The status of the Istio addon.
 *
 * @schema ContainerClusterSpecAddonsConfigIstioConfig
 */
export interface ContainerClusterSpecAddonsConfigIstioConfig {
  /**
   * The authentication type between services in Istio. Available options include AUTH_MUTUAL_TLS.
   *
   * @schema ContainerClusterSpecAddonsConfigIstioConfig#auth
   */
  readonly auth?: string;

  /**
   * The status of the Istio addon, which makes it easy to set up Istio for services in a cluster. It is disabled by default. Set disabled = false to enable.
   *
   * @schema ContainerClusterSpecAddonsConfigIstioConfig#disabled
   */
  readonly disabled: boolean;

}

/**
 * Converts an object of type 'ContainerClusterSpecAddonsConfigIstioConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecAddonsConfigIstioConfig(obj: ContainerClusterSpecAddonsConfigIstioConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'auth': obj.auth,
    'disabled': obj.disabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration for the KALM addon, which manages the lifecycle of k8s. It is disabled by default; Set enabled = true to enable.
 *
 * @schema ContainerClusterSpecAddonsConfigKalmConfig
 */
export interface ContainerClusterSpecAddonsConfigKalmConfig {
  /**
   * @schema ContainerClusterSpecAddonsConfigKalmConfig#enabled
   */
  readonly enabled: boolean;

}

/**
 * Converts an object of type 'ContainerClusterSpecAddonsConfigKalmConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecAddonsConfigKalmConfig(obj: ContainerClusterSpecAddonsConfigKalmConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Whether we should enable the network policy addon for the master. This must be enabled in order to enable network policy for the nodes. To enable this, you must also define a network_policy block, otherwise nothing will happen. It can only be disabled if the nodes already do not have network policies enabled. Defaults to disabled; set disabled = false to enable.
 *
 * @default disabled; set disabled = false to enable.
 * @schema ContainerClusterSpecAddonsConfigNetworkPolicyConfig
 */
export interface ContainerClusterSpecAddonsConfigNetworkPolicyConfig {
  /**
   * @schema ContainerClusterSpecAddonsConfigNetworkPolicyConfig#disabled
   */
  readonly disabled: boolean;

}

/**
 * Converts an object of type 'ContainerClusterSpecAddonsConfigNetworkPolicyConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecAddonsConfigNetworkPolicyConfig(obj: ContainerClusterSpecAddonsConfigNetworkPolicyConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'disabled': obj.disabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Contains defaults for a node pool created by NAP.
 *
 * @schema ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaults
 */
export interface ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaults {
  /**
   * Immutable. The Customer Managed Encryption Key used to encrypt the
   * boot disk attached to each node in the node pool.
   *
   * @schema ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaults#bootDiskKMSKeyRef
   */
  readonly bootDiskKmsKeyRef?: ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsBootDiskKmsKeyRef;

  /**
   * Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB.
   *
   * @schema ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaults#diskSize
   */
  readonly diskSize?: number;

  /**
   * The default image type used by NAP once a new node pool is being created.
   *
   * @schema ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaults#imageType
   */
  readonly imageType?: string;

  /**
   * NodeManagement configuration for this NodePool.
   *
   * @schema ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaults#management
   */
  readonly management?: ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsManagement;

  /**
   * Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as Intel Haswell.
   *
   * @schema ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaults#minCpuPlatform
   */
  readonly minCpuPlatform?: string;

  /**
   * Scopes that are used by NAP when creating node pools.
   *
   * @schema ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaults#oauthScopes
   */
  readonly oauthScopes?: string[];

  /**
   * @schema ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaults#serviceAccountRef
   */
  readonly serviceAccountRef?: ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsServiceAccountRef;

  /**
   * Shielded Instance options.
   *
   * @schema ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaults#shieldedInstanceConfig
   */
  readonly shieldedInstanceConfig?: ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsShieldedInstanceConfig;

  /**
   * Specifies the upgrade settings for NAP created node pools.
   *
   * @schema ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaults#upgradeSettings
   */
  readonly upgradeSettings?: ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsUpgradeSettings;

}

/**
 * Converts an object of type 'ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaults' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaults(obj: ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaults | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bootDiskKMSKeyRef': toJson_ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsBootDiskKmsKeyRef(obj.bootDiskKmsKeyRef),
    'diskSize': obj.diskSize,
    'imageType': obj.imageType,
    'management': toJson_ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsManagement(obj.management),
    'minCpuPlatform': obj.minCpuPlatform,
    'oauthScopes': obj.oauthScopes?.map(y => y),
    'serviceAccountRef': toJson_ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsServiceAccountRef(obj.serviceAccountRef),
    'shieldedInstanceConfig': toJson_ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsShieldedInstanceConfig(obj.shieldedInstanceConfig),
    'upgradeSettings': toJson_ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsUpgradeSettings(obj.upgradeSettings),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ContainerClusterSpecClusterAutoscalingResourceLimits
 */
export interface ContainerClusterSpecClusterAutoscalingResourceLimits {
  /**
   * Maximum amount of the resource in the cluster.
   *
   * @schema ContainerClusterSpecClusterAutoscalingResourceLimits#maximum
   */
  readonly maximum?: number;

  /**
   * Minimum amount of the resource in the cluster.
   *
   * @schema ContainerClusterSpecClusterAutoscalingResourceLimits#minimum
   */
  readonly minimum?: number;

  /**
   * The type of the resource. For example, cpu and memory. See the guide to using Node Auto-Provisioning for a list of types.
   *
   * @schema ContainerClusterSpecClusterAutoscalingResourceLimits#resourceType
   */
  readonly resourceType: string;

}

/**
 * Converts an object of type 'ContainerClusterSpecClusterAutoscalingResourceLimits' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecClusterAutoscalingResourceLimits(obj: ContainerClusterSpecClusterAutoscalingResourceLimits | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'maximum': obj.maximum,
    'minimum': obj.minimum,
    'resourceType': obj.resourceType,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Configuration for cluster level pod cidr overprovision. Default is disabled=false.
 *
 * @default disabled=false.
 * @schema ContainerClusterSpecIpAllocationPolicyPodCidrOverprovisionConfig
 */
export interface ContainerClusterSpecIpAllocationPolicyPodCidrOverprovisionConfig {
  /**
   * @schema ContainerClusterSpecIpAllocationPolicyPodCidrOverprovisionConfig#disabled
   */
  readonly disabled: boolean;

}

/**
 * Converts an object of type 'ContainerClusterSpecIpAllocationPolicyPodCidrOverprovisionConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecIpAllocationPolicyPodCidrOverprovisionConfig(obj: ContainerClusterSpecIpAllocationPolicyPodCidrOverprovisionConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'disabled': obj.disabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Time window specified for daily maintenance operations. Specify start_time in RFC3339 format "HH:MM”, where HH : [00-23] and MM : [00-59] GMT.
 *
 * @schema ContainerClusterSpecMaintenancePolicyDailyMaintenanceWindow
 */
export interface ContainerClusterSpecMaintenancePolicyDailyMaintenanceWindow {
  /**
   * @schema ContainerClusterSpecMaintenancePolicyDailyMaintenanceWindow#duration
   */
  readonly duration?: string;

  /**
   * @schema ContainerClusterSpecMaintenancePolicyDailyMaintenanceWindow#startTime
   */
  readonly startTime: string;

}

/**
 * Converts an object of type 'ContainerClusterSpecMaintenancePolicyDailyMaintenanceWindow' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecMaintenancePolicyDailyMaintenanceWindow(obj: ContainerClusterSpecMaintenancePolicyDailyMaintenanceWindow | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'duration': obj.duration,
    'startTime': obj.startTime,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ContainerClusterSpecMaintenancePolicyMaintenanceExclusion
 */
export interface ContainerClusterSpecMaintenancePolicyMaintenanceExclusion {
  /**
   * @schema ContainerClusterSpecMaintenancePolicyMaintenanceExclusion#endTime
   */
  readonly endTime: string;

  /**
   * @schema ContainerClusterSpecMaintenancePolicyMaintenanceExclusion#exclusionName
   */
  readonly exclusionName: string;

  /**
   * Maintenance exclusion related options.
   *
   * @schema ContainerClusterSpecMaintenancePolicyMaintenanceExclusion#exclusionOptions
   */
  readonly exclusionOptions?: ContainerClusterSpecMaintenancePolicyMaintenanceExclusionExclusionOptions;

  /**
   * @schema ContainerClusterSpecMaintenancePolicyMaintenanceExclusion#startTime
   */
  readonly startTime: string;

}

/**
 * Converts an object of type 'ContainerClusterSpecMaintenancePolicyMaintenanceExclusion' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecMaintenancePolicyMaintenanceExclusion(obj: ContainerClusterSpecMaintenancePolicyMaintenanceExclusion | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'endTime': obj.endTime,
    'exclusionName': obj.exclusionName,
    'exclusionOptions': toJson_ContainerClusterSpecMaintenancePolicyMaintenanceExclusionExclusionOptions(obj.exclusionOptions),
    'startTime': obj.startTime,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Time window for recurring maintenance operations.
 *
 * @schema ContainerClusterSpecMaintenancePolicyRecurringWindow
 */
export interface ContainerClusterSpecMaintenancePolicyRecurringWindow {
  /**
   * @schema ContainerClusterSpecMaintenancePolicyRecurringWindow#endTime
   */
  readonly endTime: string;

  /**
   * @schema ContainerClusterSpecMaintenancePolicyRecurringWindow#recurrence
   */
  readonly recurrence: string;

  /**
   * @schema ContainerClusterSpecMaintenancePolicyRecurringWindow#startTime
   */
  readonly startTime: string;

}

/**
 * Converts an object of type 'ContainerClusterSpecMaintenancePolicyRecurringWindow' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecMaintenancePolicyRecurringWindow(obj: ContainerClusterSpecMaintenancePolicyRecurringWindow | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'endTime': obj.endTime,
    'recurrence': obj.recurrence,
    'startTime': obj.startTime,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Whether client certificate authorization is enabled for this cluster.
 *
 * @schema ContainerClusterSpecMasterAuthClientCertificateConfig
 */
export interface ContainerClusterSpecMasterAuthClientCertificateConfig {
  /**
   * Immutable. Whether client certificate authorization is enabled for this cluster.
   *
   * @schema ContainerClusterSpecMasterAuthClientCertificateConfig#issueClientCertificate
   */
  readonly issueClientCertificate: boolean;

}

/**
 * Converts an object of type 'ContainerClusterSpecMasterAuthClientCertificateConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecMasterAuthClientCertificateConfig(obj: ContainerClusterSpecMasterAuthClientCertificateConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'issueClientCertificate': obj.issueClientCertificate,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The password to use for HTTP basic authentication when accessing the Kubernetes master endpoint.
 *
 * @schema ContainerClusterSpecMasterAuthPassword
 */
export interface ContainerClusterSpecMasterAuthPassword {
  /**
   * Value of the field. Cannot be used if 'valueFrom' is specified.
   *
   * @schema ContainerClusterSpecMasterAuthPassword#value
   */
  readonly value?: string;

  /**
   * Source for the field's value. Cannot be used if 'value' is specified.
   *
   * @schema ContainerClusterSpecMasterAuthPassword#valueFrom
   */
  readonly valueFrom?: ContainerClusterSpecMasterAuthPasswordValueFrom;

}

/**
 * Converts an object of type 'ContainerClusterSpecMasterAuthPassword' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecMasterAuthPassword(obj: ContainerClusterSpecMasterAuthPassword | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'value': obj.value,
    'valueFrom': toJson_ContainerClusterSpecMasterAuthPasswordValueFrom(obj.valueFrom),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ContainerClusterSpecMasterAuthorizedNetworksConfigCidrBlocks
 */
export interface ContainerClusterSpecMasterAuthorizedNetworksConfigCidrBlocks {
  /**
   * External network that can access Kubernetes master through HTTPS. Must be specified in CIDR notation.
   *
   * @schema ContainerClusterSpecMasterAuthorizedNetworksConfigCidrBlocks#cidrBlock
   */
  readonly cidrBlock: string;

  /**
   * Field for users to identify CIDR blocks.
   *
   * @schema ContainerClusterSpecMasterAuthorizedNetworksConfigCidrBlocks#displayName
   */
  readonly displayName?: string;

}

/**
 * Converts an object of type 'ContainerClusterSpecMasterAuthorizedNetworksConfigCidrBlocks' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecMasterAuthorizedNetworksConfigCidrBlocks(obj: ContainerClusterSpecMasterAuthorizedNetworksConfigCidrBlocks | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cidrBlock': obj.cidrBlock,
    'displayName': obj.displayName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration for Google Cloud Managed Services for Prometheus.
 *
 * @schema ContainerClusterSpecMonitoringConfigManagedPrometheus
 */
export interface ContainerClusterSpecMonitoringConfigManagedPrometheus {
  /**
   * Whether or not the managed collection is enabled.
   *
   * @schema ContainerClusterSpecMonitoringConfigManagedPrometheus#enabled
   */
  readonly enabled: boolean;

}

/**
 * Converts an object of type 'ContainerClusterSpecMonitoringConfigManagedPrometheus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecMonitoringConfigManagedPrometheus(obj: ContainerClusterSpecMonitoringConfigManagedPrometheus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Specifies options for controlling advanced machine features.
 *
 * @schema ContainerClusterSpecNodeConfigAdvancedMachineFeatures
 */
export interface ContainerClusterSpecNodeConfigAdvancedMachineFeatures {
  /**
   * Immutable. The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.
   *
   * @schema ContainerClusterSpecNodeConfigAdvancedMachineFeatures#threadsPerCore
   */
  readonly threadsPerCore: number;

}

/**
 * Converts an object of type 'ContainerClusterSpecNodeConfigAdvancedMachineFeatures' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecNodeConfigAdvancedMachineFeatures(obj: ContainerClusterSpecNodeConfigAdvancedMachineFeatures | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'threadsPerCore': obj.threadsPerCore,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ContainerClusterSpecNodeConfigBootDiskKmsCryptoKeyRef
 */
export interface ContainerClusterSpecNodeConfigBootDiskKmsCryptoKeyRef {
  /**
   * Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.
   *
   * @schema ContainerClusterSpecNodeConfigBootDiskKmsCryptoKeyRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ContainerClusterSpecNodeConfigBootDiskKmsCryptoKeyRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema ContainerClusterSpecNodeConfigBootDiskKmsCryptoKeyRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ContainerClusterSpecNodeConfigBootDiskKmsCryptoKeyRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecNodeConfigBootDiskKmsCryptoKeyRef(obj: ContainerClusterSpecNodeConfigBootDiskKmsCryptoKeyRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Parameters for the ephemeral storage filesystem. If unspecified, ephemeral storage is backed by the boot disk.
 *
 * @schema ContainerClusterSpecNodeConfigEphemeralStorageConfig
 */
export interface ContainerClusterSpecNodeConfigEphemeralStorageConfig {
  /**
   * Immutable. Number of local SSDs to use to back ephemeral storage. Uses NVMe interfaces. Each local SSD must be 375 or 3000 GB in size, and all local SSDs must share the same size.
   *
   * @schema ContainerClusterSpecNodeConfigEphemeralStorageConfig#localSsdCount
   */
  readonly localSsdCount: number;

}

/**
 * Converts an object of type 'ContainerClusterSpecNodeConfigEphemeralStorageConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecNodeConfigEphemeralStorageConfig(obj: ContainerClusterSpecNodeConfigEphemeralStorageConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'localSsdCount': obj.localSsdCount,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Parameters for the ephemeral storage filesystem. If unspecified, ephemeral storage is backed by the boot disk.
 *
 * @schema ContainerClusterSpecNodeConfigEphemeralStorageLocalSsdConfig
 */
export interface ContainerClusterSpecNodeConfigEphemeralStorageLocalSsdConfig {
  /**
   * Immutable. Number of local SSDs to use to back ephemeral storage. Uses NVMe interfaces. Each local SSD must be 375 or 3000 GB in size, and all local SSDs must share the same size.
   *
   * @schema ContainerClusterSpecNodeConfigEphemeralStorageLocalSsdConfig#localSsdCount
   */
  readonly localSsdCount: number;

}

/**
 * Converts an object of type 'ContainerClusterSpecNodeConfigEphemeralStorageLocalSsdConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecNodeConfigEphemeralStorageLocalSsdConfig(obj: ContainerClusterSpecNodeConfigEphemeralStorageLocalSsdConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'localSsdCount': obj.localSsdCount,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. GCFS configuration for this node.
 *
 * @schema ContainerClusterSpecNodeConfigGcfsConfig
 */
export interface ContainerClusterSpecNodeConfigGcfsConfig {
  /**
   * Immutable. Whether or not GCFS is enabled.
   *
   * @schema ContainerClusterSpecNodeConfigGcfsConfig#enabled
   */
  readonly enabled: boolean;

}

/**
 * Converts an object of type 'ContainerClusterSpecNodeConfigGcfsConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecNodeConfigGcfsConfig(obj: ContainerClusterSpecNodeConfigGcfsConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ContainerClusterSpecNodeConfigGuestAccelerator
 */
export interface ContainerClusterSpecNodeConfigGuestAccelerator {
  /**
   * Immutable. The number of the accelerator cards exposed to an instance.
   *
   * @schema ContainerClusterSpecNodeConfigGuestAccelerator#count
   */
  readonly count: number;

  /**
   * Immutable. Configuration for auto installation of GPU driver.
   *
   * @schema ContainerClusterSpecNodeConfigGuestAccelerator#gpuDriverInstallationConfig
   */
  readonly gpuDriverInstallationConfig?: ContainerClusterSpecNodeConfigGuestAcceleratorGpuDriverInstallationConfig;

  /**
   * Immutable. Size of partitions to create on the GPU. Valid values are described in the NVIDIA mig user guide (https://docs.nvidia.com/datacenter/tesla/mig-user-guide/#partitioning).
   *
   * @schema ContainerClusterSpecNodeConfigGuestAccelerator#gpuPartitionSize
   */
  readonly gpuPartitionSize?: string;

  /**
   * Immutable. Configuration for GPU sharing.
   *
   * @schema ContainerClusterSpecNodeConfigGuestAccelerator#gpuSharingConfig
   */
  readonly gpuSharingConfig?: ContainerClusterSpecNodeConfigGuestAcceleratorGpuSharingConfig;

  /**
   * Immutable. The accelerator type resource name.
   *
   * @schema ContainerClusterSpecNodeConfigGuestAccelerator#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'ContainerClusterSpecNodeConfigGuestAccelerator' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecNodeConfigGuestAccelerator(obj: ContainerClusterSpecNodeConfigGuestAccelerator | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'count': obj.count,
    'gpuDriverInstallationConfig': toJson_ContainerClusterSpecNodeConfigGuestAcceleratorGpuDriverInstallationConfig(obj.gpuDriverInstallationConfig),
    'gpuPartitionSize': obj.gpuPartitionSize,
    'gpuSharingConfig': toJson_ContainerClusterSpecNodeConfigGuestAcceleratorGpuSharingConfig(obj.gpuSharingConfig),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Enable or disable gvnic in the node pool.
 *
 * @schema ContainerClusterSpecNodeConfigGvnic
 */
export interface ContainerClusterSpecNodeConfigGvnic {
  /**
   * Immutable. Whether or not gvnic is enabled.
   *
   * @schema ContainerClusterSpecNodeConfigGvnic#enabled
   */
  readonly enabled: boolean;

}

/**
 * Converts an object of type 'ContainerClusterSpecNodeConfigGvnic' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecNodeConfigGvnic(obj: ContainerClusterSpecNodeConfigGvnic | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Node kubelet configs.
 *
 * @schema ContainerClusterSpecNodeConfigKubeletConfig
 */
export interface ContainerClusterSpecNodeConfigKubeletConfig {
  /**
   * Enable CPU CFS quota enforcement for containers that specify CPU limits.
   *
   * @schema ContainerClusterSpecNodeConfigKubeletConfig#cpuCfsQuota
   */
  readonly cpuCfsQuota?: boolean;

  /**
   * Set the CPU CFS quota period value 'cpu.cfs_period_us'.
   *
   * @schema ContainerClusterSpecNodeConfigKubeletConfig#cpuCfsQuotaPeriod
   */
  readonly cpuCfsQuotaPeriod?: string;

  /**
   * Control the CPU management policy on the node.
   *
   * @schema ContainerClusterSpecNodeConfigKubeletConfig#cpuManagerPolicy
   */
  readonly cpuManagerPolicy: string;

  /**
   * Controls the maximum number of processes allowed to run in a pod.
   *
   * @schema ContainerClusterSpecNodeConfigKubeletConfig#podPidsLimit
   */
  readonly podPidsLimit?: number;

}

/**
 * Converts an object of type 'ContainerClusterSpecNodeConfigKubeletConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecNodeConfigKubeletConfig(obj: ContainerClusterSpecNodeConfigKubeletConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cpuCfsQuota': obj.cpuCfsQuota,
    'cpuCfsQuotaPeriod': obj.cpuCfsQuotaPeriod,
    'cpuManagerPolicy': obj.cpuManagerPolicy,
    'podPidsLimit': obj.podPidsLimit,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Parameters that can be configured on Linux nodes.
 *
 * @schema ContainerClusterSpecNodeConfigLinuxNodeConfig
 */
export interface ContainerClusterSpecNodeConfigLinuxNodeConfig {
  /**
   * The Linux kernel parameters to be applied to the nodes and all pods running on the nodes.
   *
   * @schema ContainerClusterSpecNodeConfigLinuxNodeConfig#sysctls
   */
  readonly sysctls: { [key: string]: string };

}

/**
 * Converts an object of type 'ContainerClusterSpecNodeConfigLinuxNodeConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecNodeConfigLinuxNodeConfig(obj: ContainerClusterSpecNodeConfigLinuxNodeConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'sysctls': ((obj.sysctls) === undefined) ? undefined : (Object.entries(obj.sysctls).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Parameters for raw-block local NVMe SSDs.
 *
 * @schema ContainerClusterSpecNodeConfigLocalNvmeSsdBlockConfig
 */
export interface ContainerClusterSpecNodeConfigLocalNvmeSsdBlockConfig {
  /**
   * Immutable. Number of raw-block local NVMe SSD disks to be attached to the node. Each local SSD is 375 GB in size.
   *
   * @schema ContainerClusterSpecNodeConfigLocalNvmeSsdBlockConfig#localSsdCount
   */
  readonly localSsdCount: number;

}

/**
 * Converts an object of type 'ContainerClusterSpecNodeConfigLocalNvmeSsdBlockConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecNodeConfigLocalNvmeSsdBlockConfig(obj: ContainerClusterSpecNodeConfigLocalNvmeSsdBlockConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'localSsdCount': obj.localSsdCount,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Setting this field will assign instances
 * of this pool to run on the specified node group. This is useful
 * for running workloads on sole tenant nodes.
 *
 * @schema ContainerClusterSpecNodeConfigNodeGroupRef
 */
export interface ContainerClusterSpecNodeConfigNodeGroupRef {
  /**
   * Allowed value: The `name` field of a `ComputeNodeGroup` resource.
   *
   * @schema ContainerClusterSpecNodeConfigNodeGroupRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ContainerClusterSpecNodeConfigNodeGroupRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema ContainerClusterSpecNodeConfigNodeGroupRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ContainerClusterSpecNodeConfigNodeGroupRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecNodeConfigNodeGroupRef(obj: ContainerClusterSpecNodeConfigNodeGroupRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. The reservation affinity configuration for the node pool.
 *
 * @schema ContainerClusterSpecNodeConfigReservationAffinity
 */
export interface ContainerClusterSpecNodeConfigReservationAffinity {
  /**
   * Immutable. Corresponds to the type of reservation consumption.
   *
   * @schema ContainerClusterSpecNodeConfigReservationAffinity#consumeReservationType
   */
  readonly consumeReservationType: string;

  /**
   * Immutable. The label key of a reservation resource.
   *
   * @schema ContainerClusterSpecNodeConfigReservationAffinity#key
   */
  readonly key?: string;

  /**
   * Immutable. The label values of the reservation resource.
   *
   * @schema ContainerClusterSpecNodeConfigReservationAffinity#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'ContainerClusterSpecNodeConfigReservationAffinity' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecNodeConfigReservationAffinity(obj: ContainerClusterSpecNodeConfigReservationAffinity | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'consumeReservationType': obj.consumeReservationType,
    'key': obj.key,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Sandbox configuration for this node.
 *
 * @schema ContainerClusterSpecNodeConfigSandboxConfig
 */
export interface ContainerClusterSpecNodeConfigSandboxConfig {
  /**
   * Type of the sandbox to use for the node (e.g. 'gvisor').
   *
   * @schema ContainerClusterSpecNodeConfigSandboxConfig#sandboxType
   */
  readonly sandboxType: string;

}

/**
 * Converts an object of type 'ContainerClusterSpecNodeConfigSandboxConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecNodeConfigSandboxConfig(obj: ContainerClusterSpecNodeConfigSandboxConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'sandboxType': obj.sandboxType,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ContainerClusterSpecNodeConfigServiceAccountRef
 */
export interface ContainerClusterSpecNodeConfigServiceAccountRef {
  /**
   * Allowed value: The `email` field of an `IAMServiceAccount` resource.
   *
   * @schema ContainerClusterSpecNodeConfigServiceAccountRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ContainerClusterSpecNodeConfigServiceAccountRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema ContainerClusterSpecNodeConfigServiceAccountRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ContainerClusterSpecNodeConfigServiceAccountRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecNodeConfigServiceAccountRef(obj: ContainerClusterSpecNodeConfigServiceAccountRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Shielded Instance options.
 *
 * @schema ContainerClusterSpecNodeConfigShieldedInstanceConfig
 */
export interface ContainerClusterSpecNodeConfigShieldedInstanceConfig {
  /**
   * Immutable. Defines whether the instance has integrity monitoring enabled.
   *
   * @schema ContainerClusterSpecNodeConfigShieldedInstanceConfig#enableIntegrityMonitoring
   */
  readonly enableIntegrityMonitoring?: boolean;

  /**
   * Immutable. Defines whether the instance has Secure Boot enabled.
   *
   * @schema ContainerClusterSpecNodeConfigShieldedInstanceConfig#enableSecureBoot
   */
  readonly enableSecureBoot?: boolean;

}

/**
 * Converts an object of type 'ContainerClusterSpecNodeConfigShieldedInstanceConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecNodeConfigShieldedInstanceConfig(obj: ContainerClusterSpecNodeConfigShieldedInstanceConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enableIntegrityMonitoring': obj.enableIntegrityMonitoring,
    'enableSecureBoot': obj.enableSecureBoot,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Node affinity options for sole tenant node pools.
 *
 * @schema ContainerClusterSpecNodeConfigSoleTenantConfig
 */
export interface ContainerClusterSpecNodeConfigSoleTenantConfig {
  /**
   * Immutable. .
   *
   * @schema ContainerClusterSpecNodeConfigSoleTenantConfig#nodeAffinity
   */
  readonly nodeAffinity: ContainerClusterSpecNodeConfigSoleTenantConfigNodeAffinity[];

}

/**
 * Converts an object of type 'ContainerClusterSpecNodeConfigSoleTenantConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecNodeConfigSoleTenantConfig(obj: ContainerClusterSpecNodeConfigSoleTenantConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'nodeAffinity': obj.nodeAffinity?.map(y => toJson_ContainerClusterSpecNodeConfigSoleTenantConfigNodeAffinity(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ContainerClusterSpecNodeConfigTaint
 */
export interface ContainerClusterSpecNodeConfigTaint {
  /**
   * Immutable. Effect for taint.
   *
   * @schema ContainerClusterSpecNodeConfigTaint#effect
   */
  readonly effect: string;

  /**
   * Immutable. Key for taint.
   *
   * @schema ContainerClusterSpecNodeConfigTaint#key
   */
  readonly key: string;

  /**
   * Immutable. Value for taint.
   *
   * @schema ContainerClusterSpecNodeConfigTaint#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'ContainerClusterSpecNodeConfigTaint' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecNodeConfigTaint(obj: ContainerClusterSpecNodeConfigTaint | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'effect': obj.effect,
    'key': obj.key,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. The workload metadata configuration for this node.
 *
 * @schema ContainerClusterSpecNodeConfigWorkloadMetadataConfig
 */
export interface ContainerClusterSpecNodeConfigWorkloadMetadataConfig {
  /**
   * Mode is the configuration for how to expose metadata to workloads running on the node.
   *
   * @schema ContainerClusterSpecNodeConfigWorkloadMetadataConfig#mode
   */
  readonly mode?: string;

  /**
   * DEPRECATED. Deprecated in favor of mode. NodeMetadata is the configuration for how to expose metadata to the workloads running on the node.
   *
   * @schema ContainerClusterSpecNodeConfigWorkloadMetadataConfig#nodeMetadata
   */
  readonly nodeMetadata?: string;

}

/**
 * Converts an object of type 'ContainerClusterSpecNodeConfigWorkloadMetadataConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecNodeConfigWorkloadMetadataConfig(obj: ContainerClusterSpecNodeConfigWorkloadMetadataConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'mode': obj.mode,
    'nodeMetadata': obj.nodeMetadata,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Collection of Compute Engine network tags that can be applied to a node's underlying VM instance.
 *
 * @schema ContainerClusterSpecNodePoolAutoConfigNetworkTags
 */
export interface ContainerClusterSpecNodePoolAutoConfigNetworkTags {
  /**
   * List of network tags applied to auto-provisioned node pools.
   *
   * @schema ContainerClusterSpecNodePoolAutoConfigNetworkTags#tags
   */
  readonly tags?: string[];

}

/**
 * Converts an object of type 'ContainerClusterSpecNodePoolAutoConfigNetworkTags' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecNodePoolAutoConfigNetworkTags(obj: ContainerClusterSpecNodePoolAutoConfigNetworkTags | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'tags': obj.tags?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Subset of NodeConfig message that has defaults.
 *
 * @schema ContainerClusterSpecNodePoolDefaultsNodeConfigDefaults
 */
export interface ContainerClusterSpecNodePoolDefaultsNodeConfigDefaults {
  /**
   * GCFS configuration for this node.
   *
   * @schema ContainerClusterSpecNodePoolDefaultsNodeConfigDefaults#gcfsConfig
   */
  readonly gcfsConfig?: ContainerClusterSpecNodePoolDefaultsNodeConfigDefaultsGcfsConfig;

  /**
   * Type of logging agent that is used as the default value for node pools in the cluster. Valid values include DEFAULT and MAX_THROUGHPUT.
   *
   * @schema ContainerClusterSpecNodePoolDefaultsNodeConfigDefaults#loggingVariant
   */
  readonly loggingVariant?: string;

}

/**
 * Converts an object of type 'ContainerClusterSpecNodePoolDefaultsNodeConfigDefaults' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecNodePoolDefaultsNodeConfigDefaults(obj: ContainerClusterSpecNodePoolDefaultsNodeConfigDefaults | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'gcfsConfig': toJson_ContainerClusterSpecNodePoolDefaultsNodeConfigDefaultsGcfsConfig(obj.gcfsConfig),
    'loggingVariant': obj.loggingVariant,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Notification config for Cloud Pub/Sub.
 *
 * @schema ContainerClusterSpecNotificationConfigPubsub
 */
export interface ContainerClusterSpecNotificationConfigPubsub {
  /**
   * Whether or not the notification config is enabled.
   *
   * @schema ContainerClusterSpecNotificationConfigPubsub#enabled
   */
  readonly enabled: boolean;

  /**
   * Allows filtering to one or more specific event types. If event types are present, those and only those event types will be transmitted to the cluster. Other types will be skipped. If no filter is specified, or no event types are present, all event types will be sent.
   *
   * @schema ContainerClusterSpecNotificationConfigPubsub#filter
   */
  readonly filter?: ContainerClusterSpecNotificationConfigPubsubFilter;

  /**
   * The PubSubTopic to send the notification to.
   *
   * @schema ContainerClusterSpecNotificationConfigPubsub#topicRef
   */
  readonly topicRef?: ContainerClusterSpecNotificationConfigPubsubTopicRef;

}

/**
 * Converts an object of type 'ContainerClusterSpecNotificationConfigPubsub' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecNotificationConfigPubsub(obj: ContainerClusterSpecNotificationConfigPubsub | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
    'filter': toJson_ContainerClusterSpecNotificationConfigPubsubFilter(obj.filter),
    'topicRef': toJson_ContainerClusterSpecNotificationConfigPubsubTopicRef(obj.topicRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Controls cluster master global access settings.
 *
 * @schema ContainerClusterSpecPrivateClusterConfigMasterGlobalAccessConfig
 */
export interface ContainerClusterSpecPrivateClusterConfigMasterGlobalAccessConfig {
  /**
   * Whether the cluster master is accessible globally or not.
   *
   * @schema ContainerClusterSpecPrivateClusterConfigMasterGlobalAccessConfig#enabled
   */
  readonly enabled: boolean;

}

/**
 * Converts an object of type 'ContainerClusterSpecPrivateClusterConfigMasterGlobalAccessConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecPrivateClusterConfigMasterGlobalAccessConfig(obj: ContainerClusterSpecPrivateClusterConfigMasterGlobalAccessConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Subnetwork in cluster's network where master's endpoint
 * will be provisioned.
 *
 * @schema ContainerClusterSpecPrivateClusterConfigPrivateEndpointSubnetworkRef
 */
export interface ContainerClusterSpecPrivateClusterConfigPrivateEndpointSubnetworkRef {
  /**
   * Allowed value: The `selfLink` field of a `ComputeSubnetwork` resource.
   *
   * @schema ContainerClusterSpecPrivateClusterConfigPrivateEndpointSubnetworkRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ContainerClusterSpecPrivateClusterConfigPrivateEndpointSubnetworkRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema ContainerClusterSpecPrivateClusterConfigPrivateEndpointSubnetworkRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ContainerClusterSpecPrivateClusterConfigPrivateEndpointSubnetworkRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecPrivateClusterConfigPrivateEndpointSubnetworkRef(obj: ContainerClusterSpecPrivateClusterConfigPrivateEndpointSubnetworkRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WorkloadConfig defines which actions are enabled for a cluster's workload configurations.
 *
 * @schema ContainerClusterSpecProtectConfigWorkloadConfig
 */
export interface ContainerClusterSpecProtectConfigWorkloadConfig {
  /**
   * Sets which mode of auditing should be used for the cluster's workloads. Accepted values are DISABLED, BASIC.
   *
   * @schema ContainerClusterSpecProtectConfigWorkloadConfig#auditMode
   */
  readonly auditMode: string;

}

/**
 * Converts an object of type 'ContainerClusterSpecProtectConfigWorkloadConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecProtectConfigWorkloadConfig(obj: ContainerClusterSpecProtectConfigWorkloadConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'auditMode': obj.auditMode,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Parameters for using BigQuery as the destination of resource usage export.
 *
 * @schema ContainerClusterSpecResourceUsageExportConfigBigqueryDestination
 */
export interface ContainerClusterSpecResourceUsageExportConfigBigqueryDestination {
  /**
   * The ID of a BigQuery Dataset.
   *
   * @schema ContainerClusterSpecResourceUsageExportConfigBigqueryDestination#datasetId
   */
  readonly datasetId: string;

}

/**
 * Converts an object of type 'ContainerClusterSpecResourceUsageExportConfigBigqueryDestination' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecResourceUsageExportConfigBigqueryDestination(obj: ContainerClusterSpecResourceUsageExportConfigBigqueryDestination | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'datasetId': obj.datasetId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. The Customer Managed Encryption Key used to encrypt the
 * boot disk attached to each node in the node pool.
 *
 * @schema ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsBootDiskKmsKeyRef
 */
export interface ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsBootDiskKmsKeyRef {
  /**
   * Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.
   *
   * @schema ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsBootDiskKmsKeyRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsBootDiskKmsKeyRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsBootDiskKmsKeyRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsBootDiskKmsKeyRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsBootDiskKmsKeyRef(obj: ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsBootDiskKmsKeyRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * NodeManagement configuration for this NodePool.
 *
 * @schema ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsManagement
 */
export interface ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsManagement {
  /**
   * Specifies whether the node auto-repair is enabled for the node pool. If enabled, the nodes in this node pool will be monitored and, if they fail health checks too many times, an automatic repair action will be triggered.
   *
   * @schema ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsManagement#autoRepair
   */
  readonly autoRepair?: boolean;

  /**
   * Specifies whether node auto-upgrade is enabled for the node pool. If enabled, node auto-upgrade helps keep the nodes in your node pool up to date with the latest release version of Kubernetes.
   *
   * @schema ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsManagement#autoUpgrade
   */
  readonly autoUpgrade?: boolean;

  /**
   * Specifies the Auto Upgrade knobs for the node pool.
   *
   * @schema ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsManagement#upgradeOptions
   */
  readonly upgradeOptions?: ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsManagementUpgradeOptions[];

}

/**
 * Converts an object of type 'ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsManagement' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsManagement(obj: ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsManagement | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'autoRepair': obj.autoRepair,
    'autoUpgrade': obj.autoUpgrade,
    'upgradeOptions': obj.upgradeOptions?.map(y => toJson_ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsManagementUpgradeOptions(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsServiceAccountRef
 */
export interface ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsServiceAccountRef {
  /**
   * Allowed value: The `email` field of an `IAMServiceAccount` resource.
   *
   * @schema ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsServiceAccountRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsServiceAccountRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsServiceAccountRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsServiceAccountRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsServiceAccountRef(obj: ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsServiceAccountRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Shielded Instance options.
 *
 * @schema ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsShieldedInstanceConfig
 */
export interface ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsShieldedInstanceConfig {
  /**
   * Defines whether the instance has integrity monitoring enabled.
   *
   * @schema ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsShieldedInstanceConfig#enableIntegrityMonitoring
   */
  readonly enableIntegrityMonitoring?: boolean;

  /**
   * Defines whether the instance has Secure Boot enabled.
   *
   * @schema ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsShieldedInstanceConfig#enableSecureBoot
   */
  readonly enableSecureBoot?: boolean;

}

/**
 * Converts an object of type 'ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsShieldedInstanceConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsShieldedInstanceConfig(obj: ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsShieldedInstanceConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enableIntegrityMonitoring': obj.enableIntegrityMonitoring,
    'enableSecureBoot': obj.enableSecureBoot,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specifies the upgrade settings for NAP created node pools.
 *
 * @schema ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsUpgradeSettings
 */
export interface ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsUpgradeSettings {
  /**
   * Settings for blue-green upgrade strategy.
   *
   * @schema ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsUpgradeSettings#blueGreenSettings
   */
  readonly blueGreenSettings?: ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettings;

  /**
   * The maximum number of nodes that can be created beyond the current size of the node pool during the upgrade process.
   *
   * @schema ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsUpgradeSettings#maxSurge
   */
  readonly maxSurge?: number;

  /**
   * The maximum number of nodes that can be simultaneously unavailable during the upgrade process.
   *
   * @schema ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsUpgradeSettings#maxUnavailable
   */
  readonly maxUnavailable?: number;

  /**
   * Update strategy of the node pool.
   *
   * @schema ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsUpgradeSettings#strategy
   */
  readonly strategy?: string;

}

/**
 * Converts an object of type 'ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsUpgradeSettings' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsUpgradeSettings(obj: ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsUpgradeSettings | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'blueGreenSettings': toJson_ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettings(obj.blueGreenSettings),
    'maxSurge': obj.maxSurge,
    'maxUnavailable': obj.maxUnavailable,
    'strategy': obj.strategy,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Maintenance exclusion related options.
 *
 * @schema ContainerClusterSpecMaintenancePolicyMaintenanceExclusionExclusionOptions
 */
export interface ContainerClusterSpecMaintenancePolicyMaintenanceExclusionExclusionOptions {
  /**
   * The scope of automatic upgrades to restrict in the exclusion window.
   *
   * @schema ContainerClusterSpecMaintenancePolicyMaintenanceExclusionExclusionOptions#scope
   */
  readonly scope: string;

}

/**
 * Converts an object of type 'ContainerClusterSpecMaintenancePolicyMaintenanceExclusionExclusionOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecMaintenancePolicyMaintenanceExclusionExclusionOptions(obj: ContainerClusterSpecMaintenancePolicyMaintenanceExclusionExclusionOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'scope': obj.scope,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Source for the field's value. Cannot be used if 'value' is specified.
 *
 * @schema ContainerClusterSpecMasterAuthPasswordValueFrom
 */
export interface ContainerClusterSpecMasterAuthPasswordValueFrom {
  /**
   * Reference to a value with the given key in the given Secret in the resource's namespace.
   *
   * @schema ContainerClusterSpecMasterAuthPasswordValueFrom#secretKeyRef
   */
  readonly secretKeyRef?: ContainerClusterSpecMasterAuthPasswordValueFromSecretKeyRef;

}

/**
 * Converts an object of type 'ContainerClusterSpecMasterAuthPasswordValueFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecMasterAuthPasswordValueFrom(obj: ContainerClusterSpecMasterAuthPasswordValueFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'secretKeyRef': toJson_ContainerClusterSpecMasterAuthPasswordValueFromSecretKeyRef(obj.secretKeyRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Configuration for auto installation of GPU driver.
 *
 * @schema ContainerClusterSpecNodeConfigGuestAcceleratorGpuDriverInstallationConfig
 */
export interface ContainerClusterSpecNodeConfigGuestAcceleratorGpuDriverInstallationConfig {
  /**
   * Immutable. Mode for how the GPU driver is installed.
   *
   * @schema ContainerClusterSpecNodeConfigGuestAcceleratorGpuDriverInstallationConfig#gpuDriverVersion
   */
  readonly gpuDriverVersion: string;

}

/**
 * Converts an object of type 'ContainerClusterSpecNodeConfigGuestAcceleratorGpuDriverInstallationConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecNodeConfigGuestAcceleratorGpuDriverInstallationConfig(obj: ContainerClusterSpecNodeConfigGuestAcceleratorGpuDriverInstallationConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'gpuDriverVersion': obj.gpuDriverVersion,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Configuration for GPU sharing.
 *
 * @schema ContainerClusterSpecNodeConfigGuestAcceleratorGpuSharingConfig
 */
export interface ContainerClusterSpecNodeConfigGuestAcceleratorGpuSharingConfig {
  /**
   * Immutable. The type of GPU sharing strategy to enable on the GPU node. Possible values are described in the API package (https://pkg.go.dev/google.golang.org/api/container/v1#GPUSharingConfig).
   *
   * @schema ContainerClusterSpecNodeConfigGuestAcceleratorGpuSharingConfig#gpuSharingStrategy
   */
  readonly gpuSharingStrategy: string;

  /**
   * Immutable. The maximum number of containers that can share a GPU.
   *
   * @schema ContainerClusterSpecNodeConfigGuestAcceleratorGpuSharingConfig#maxSharedClientsPerGpu
   */
  readonly maxSharedClientsPerGpu: number;

}

/**
 * Converts an object of type 'ContainerClusterSpecNodeConfigGuestAcceleratorGpuSharingConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecNodeConfigGuestAcceleratorGpuSharingConfig(obj: ContainerClusterSpecNodeConfigGuestAcceleratorGpuSharingConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'gpuSharingStrategy': obj.gpuSharingStrategy,
    'maxSharedClientsPerGpu': obj.maxSharedClientsPerGpu,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ContainerClusterSpecNodeConfigSoleTenantConfigNodeAffinity
 */
export interface ContainerClusterSpecNodeConfigSoleTenantConfigNodeAffinity {
  /**
   * Immutable. .
   *
   * @schema ContainerClusterSpecNodeConfigSoleTenantConfigNodeAffinity#key
   */
  readonly key: string;

  /**
   * Immutable. .
   *
   * @schema ContainerClusterSpecNodeConfigSoleTenantConfigNodeAffinity#operator
   */
  readonly operator: string;

  /**
   * Immutable. .
   *
   * @schema ContainerClusterSpecNodeConfigSoleTenantConfigNodeAffinity#values
   */
  readonly values: string[];

}

/**
 * Converts an object of type 'ContainerClusterSpecNodeConfigSoleTenantConfigNodeAffinity' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecNodeConfigSoleTenantConfigNodeAffinity(obj: ContainerClusterSpecNodeConfigSoleTenantConfigNodeAffinity | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * GCFS configuration for this node.
 *
 * @schema ContainerClusterSpecNodePoolDefaultsNodeConfigDefaultsGcfsConfig
 */
export interface ContainerClusterSpecNodePoolDefaultsNodeConfigDefaultsGcfsConfig {
  /**
   * Whether or not GCFS is enabled.
   *
   * @schema ContainerClusterSpecNodePoolDefaultsNodeConfigDefaultsGcfsConfig#enabled
   */
  readonly enabled: boolean;

}

/**
 * Converts an object of type 'ContainerClusterSpecNodePoolDefaultsNodeConfigDefaultsGcfsConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecNodePoolDefaultsNodeConfigDefaultsGcfsConfig(obj: ContainerClusterSpecNodePoolDefaultsNodeConfigDefaultsGcfsConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Allows filtering to one or more specific event types. If event types are present, those and only those event types will be transmitted to the cluster. Other types will be skipped. If no filter is specified, or no event types are present, all event types will be sent.
 *
 * @schema ContainerClusterSpecNotificationConfigPubsubFilter
 */
export interface ContainerClusterSpecNotificationConfigPubsubFilter {
  /**
   * Can be used to filter what notifications are sent. Valid values include include UPGRADE_AVAILABLE_EVENT, UPGRADE_EVENT and SECURITY_BULLETIN_EVENT.
   *
   * @schema ContainerClusterSpecNotificationConfigPubsubFilter#eventType
   */
  readonly eventType: string[];

}

/**
 * Converts an object of type 'ContainerClusterSpecNotificationConfigPubsubFilter' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecNotificationConfigPubsubFilter(obj: ContainerClusterSpecNotificationConfigPubsubFilter | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'eventType': obj.eventType?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The PubSubTopic to send the notification to.
 *
 * @schema ContainerClusterSpecNotificationConfigPubsubTopicRef
 */
export interface ContainerClusterSpecNotificationConfigPubsubTopicRef {
  /**
   * Allowed value: string of the format `projects/{{project}}/topics/{{value}}`, where {{value}} is the `name` field of a `PubSubTopic` resource.
   *
   * @schema ContainerClusterSpecNotificationConfigPubsubTopicRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ContainerClusterSpecNotificationConfigPubsubTopicRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema ContainerClusterSpecNotificationConfigPubsubTopicRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ContainerClusterSpecNotificationConfigPubsubTopicRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecNotificationConfigPubsubTopicRef(obj: ContainerClusterSpecNotificationConfigPubsubTopicRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsManagementUpgradeOptions
 */
export interface ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsManagementUpgradeOptions {
  /**
   * This field is set when upgrades are about to commence with the approximate start time for the upgrades, in RFC3339 text format.
   *
   * @schema ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsManagementUpgradeOptions#autoUpgradeStartTime
   */
  readonly autoUpgradeStartTime?: string;

  /**
   * This field is set when upgrades are about to commence with the description of the upgrade.
   *
   * @schema ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsManagementUpgradeOptions#description
   */
  readonly description?: string;

}

/**
 * Converts an object of type 'ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsManagementUpgradeOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsManagementUpgradeOptions(obj: ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsManagementUpgradeOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'autoUpgradeStartTime': obj.autoUpgradeStartTime,
    'description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Settings for blue-green upgrade strategy.
 *
 * @schema ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettings
 */
export interface ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettings {
  /**
   * Time needed after draining entire blue pool. After this period, blue pool will be cleaned up.
   *
   * A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
   *
   * @schema ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettings#nodePoolSoakDuration
   */
  readonly nodePoolSoakDuration?: string;

  /**
   * Standard policy for the blue-green upgrade.
   *
   * @schema ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettings#standardRolloutPolicy
   */
  readonly standardRolloutPolicy?: ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy;

}

/**
 * Converts an object of type 'ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettings' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettings(obj: ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettings | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'nodePoolSoakDuration': obj.nodePoolSoakDuration,
    'standardRolloutPolicy': toJson_ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy(obj.standardRolloutPolicy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to a value with the given key in the given Secret in the resource's namespace.
 *
 * @schema ContainerClusterSpecMasterAuthPasswordValueFromSecretKeyRef
 */
export interface ContainerClusterSpecMasterAuthPasswordValueFromSecretKeyRef {
  /**
   * Key that identifies the value to be extracted.
   *
   * @schema ContainerClusterSpecMasterAuthPasswordValueFromSecretKeyRef#key
   */
  readonly key: string;

  /**
   * Name of the Secret to extract a value from.
   *
   * @schema ContainerClusterSpecMasterAuthPasswordValueFromSecretKeyRef#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'ContainerClusterSpecMasterAuthPasswordValueFromSecretKeyRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecMasterAuthPasswordValueFromSecretKeyRef(obj: ContainerClusterSpecMasterAuthPasswordValueFromSecretKeyRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Standard policy for the blue-green upgrade.
 *
 * @schema ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy
 */
export interface ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy {
  /**
   * Number of blue nodes to drain in a batch.
   *
   * @schema ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy#batchNodeCount
   */
  readonly batchNodeCount?: number;

  /**
   * Percentage of the bool pool nodes to drain in a batch. The range of this field should be (0.0, 1.0].
   *
   * @schema ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy#batchPercentage
   */
  readonly batchPercentage?: number;

  /**
   * Soak time after each batch gets drained.
   *
   * A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
   *
   * @schema ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy#batchSoakDuration
   */
  readonly batchSoakDuration?: string;

}

/**
 * Converts an object of type 'ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy(obj: ContainerClusterSpecClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'batchNodeCount': obj.batchNodeCount,
    'batchPercentage': obj.batchPercentage,
    'batchSoakDuration': obj.batchSoakDuration,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema ContainerNodePool
 */
export class ContainerNodePool extends ApiObject {
  /**
   * Returns the apiVersion and kind for "ContainerNodePool"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'container.cnrm.cloud.google.com/v1beta1',
    kind: 'ContainerNodePool',
  }

  /**
   * Renders a Kubernetes manifest for "ContainerNodePool".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ContainerNodePoolProps): any {
    return {
      ...ContainerNodePool.GVK,
      ...toJson_ContainerNodePoolProps(props),
    };
  }

  /**
   * Defines a "ContainerNodePool" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ContainerNodePoolProps) {
    super(scope, id, {
      ...ContainerNodePool.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...ContainerNodePool.GVK,
      ...toJson_ContainerNodePoolProps(resolved),
    };
  }
}

/**
 * @schema ContainerNodePool
 */
export interface ContainerNodePoolProps {
  /**
   * @schema ContainerNodePool#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema ContainerNodePool#spec
   */
  readonly spec: ContainerNodePoolSpec;

}

/**
 * Converts an object of type 'ContainerNodePoolProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerNodePoolProps(obj: ContainerNodePoolProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ContainerNodePoolSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ContainerNodePoolSpec
 */
export interface ContainerNodePoolSpec {
  /**
   * Configuration required by cluster autoscaler to adjust the size of the node pool to the current cluster usage. To disable autoscaling, set minNodeCount and maxNodeCount to 0.
   *
   * @schema ContainerNodePoolSpec#autoscaling
   */
  readonly autoscaling?: ContainerNodePoolSpecAutoscaling;

  /**
   * @schema ContainerNodePoolSpec#clusterRef
   */
  readonly clusterRef: ContainerNodePoolSpecClusterRef;

  /**
   * Immutable. The initial number of nodes for the pool. In regional or multi-zonal clusters, this is the number of nodes per zone. Changing this will force recreation of the resource.
   *
   * @schema ContainerNodePoolSpec#initialNodeCount
   */
  readonly initialNodeCount?: number;

  /**
   * Immutable. The location (region or zone) of the cluster.
   *
   * @schema ContainerNodePoolSpec#location
   */
  readonly location: string;

  /**
   * Node management configuration, wherein auto-repair and auto-upgrade is configured.
   *
   * @schema ContainerNodePoolSpec#management
   */
  readonly management?: ContainerNodePoolSpecManagement;

  /**
   * Immutable. The maximum number of pods per node in this node pool. Note that this does not work on node pools which are "route-based" - that is, node pools belonging to clusters that do not have IP Aliasing enabled.
   *
   * @schema ContainerNodePoolSpec#maxPodsPerNode
   */
  readonly maxPodsPerNode?: number;

  /**
   * Immutable. Creates a unique name for the node pool beginning with the specified prefix. Conflicts with name.
   *
   * @schema ContainerNodePoolSpec#namePrefix
   */
  readonly namePrefix?: string;

  /**
   * Networking configuration for this NodePool. If specified, it overrides the cluster-level defaults.
   *
   * @schema ContainerNodePoolSpec#networkConfig
   */
  readonly networkConfig?: ContainerNodePoolSpecNetworkConfig;

  /**
   * Immutable. The configuration of the nodepool.
   *
   * @schema ContainerNodePoolSpec#nodeConfig
   */
  readonly nodeConfig?: ContainerNodePoolSpecNodeConfig;

  /**
   * The number of nodes per instance group. This field can be used to update the number of nodes per instance group but should not be used alongside autoscaling.
   *
   * @schema ContainerNodePoolSpec#nodeCount
   */
  readonly nodeCount?: number;

  /**
   * The list of zones in which the node pool's nodes should be located. Nodes must be in the region of their regional cluster or in the same region as their cluster's zone for zonal clusters. If unspecified, the cluster-level node_locations will be used.
   *
   * @schema ContainerNodePoolSpec#nodeLocations
   */
  readonly nodeLocations?: string[];

  /**
   * Immutable. Specifies the node placement policy.
   *
   * @schema ContainerNodePoolSpec#placementPolicy
   */
  readonly placementPolicy?: ContainerNodePoolSpecPlacementPolicy;

  /**
   * Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
   *
   * @schema ContainerNodePoolSpec#resourceID
   */
  readonly resourceId?: string;

  /**
   * Specify node upgrade settings to change how many nodes GKE attempts to upgrade at once. The number of nodes upgraded simultaneously is the sum of max_surge and max_unavailable. The maximum number of nodes upgraded simultaneously is limited to 20.
   *
   * @schema ContainerNodePoolSpec#upgradeSettings
   */
  readonly upgradeSettings?: ContainerNodePoolSpecUpgradeSettings;

  /**
   * @schema ContainerNodePoolSpec#version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'ContainerNodePoolSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerNodePoolSpec(obj: ContainerNodePoolSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'autoscaling': toJson_ContainerNodePoolSpecAutoscaling(obj.autoscaling),
    'clusterRef': toJson_ContainerNodePoolSpecClusterRef(obj.clusterRef),
    'initialNodeCount': obj.initialNodeCount,
    'location': obj.location,
    'management': toJson_ContainerNodePoolSpecManagement(obj.management),
    'maxPodsPerNode': obj.maxPodsPerNode,
    'namePrefix': obj.namePrefix,
    'networkConfig': toJson_ContainerNodePoolSpecNetworkConfig(obj.networkConfig),
    'nodeConfig': toJson_ContainerNodePoolSpecNodeConfig(obj.nodeConfig),
    'nodeCount': obj.nodeCount,
    'nodeLocations': obj.nodeLocations?.map(y => y),
    'placementPolicy': toJson_ContainerNodePoolSpecPlacementPolicy(obj.placementPolicy),
    'resourceID': obj.resourceId,
    'upgradeSettings': toJson_ContainerNodePoolSpecUpgradeSettings(obj.upgradeSettings),
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration required by cluster autoscaler to adjust the size of the node pool to the current cluster usage. To disable autoscaling, set minNodeCount and maxNodeCount to 0.
 *
 * @schema ContainerNodePoolSpecAutoscaling
 */
export interface ContainerNodePoolSpecAutoscaling {
  /**
   * Location policy specifies the algorithm used when scaling-up the node pool. "BALANCED" - Is a best effort policy that aims to balance the sizes of available zones. "ANY" - Instructs the cluster autoscaler to prioritize utilization of unused reservations, and reduces preemption risk for Spot VMs.
   *
   * @schema ContainerNodePoolSpecAutoscaling#locationPolicy
   */
  readonly locationPolicy?: string;

  /**
   * Maximum number of nodes per zone in the node pool. Must be >= min_node_count. Cannot be used with total limits.
   *
   * @schema ContainerNodePoolSpecAutoscaling#maxNodeCount
   */
  readonly maxNodeCount?: number;

  /**
   * Minimum number of nodes per zone in the node pool. Must be >=0 and <= max_node_count. Cannot be used with total limits.
   *
   * @schema ContainerNodePoolSpecAutoscaling#minNodeCount
   */
  readonly minNodeCount?: number;

  /**
   * Maximum number of all nodes in the node pool. Must be >= total_min_node_count. Cannot be used with per zone limits.
   *
   * @schema ContainerNodePoolSpecAutoscaling#totalMaxNodeCount
   */
  readonly totalMaxNodeCount?: number;

  /**
   * Minimum number of all nodes in the node pool. Must be >=0 and <= total_max_node_count. Cannot be used with per zone limits.
   *
   * @schema ContainerNodePoolSpecAutoscaling#totalMinNodeCount
   */
  readonly totalMinNodeCount?: number;

}

/**
 * Converts an object of type 'ContainerNodePoolSpecAutoscaling' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerNodePoolSpecAutoscaling(obj: ContainerNodePoolSpecAutoscaling | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'locationPolicy': obj.locationPolicy,
    'maxNodeCount': obj.maxNodeCount,
    'minNodeCount': obj.minNodeCount,
    'totalMaxNodeCount': obj.totalMaxNodeCount,
    'totalMinNodeCount': obj.totalMinNodeCount,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ContainerNodePoolSpecClusterRef
 */
export interface ContainerNodePoolSpecClusterRef {
  /**
   * Allowed value: The `name` field of a `ContainerCluster` resource.
   *
   * @schema ContainerNodePoolSpecClusterRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ContainerNodePoolSpecClusterRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema ContainerNodePoolSpecClusterRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ContainerNodePoolSpecClusterRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerNodePoolSpecClusterRef(obj: ContainerNodePoolSpecClusterRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Node management configuration, wherein auto-repair and auto-upgrade is configured.
 *
 * @schema ContainerNodePoolSpecManagement
 */
export interface ContainerNodePoolSpecManagement {
  /**
   * Whether the nodes will be automatically repaired.
   *
   * @schema ContainerNodePoolSpecManagement#autoRepair
   */
  readonly autoRepair?: boolean;

  /**
   * Whether the nodes will be automatically upgraded.
   *
   * @schema ContainerNodePoolSpecManagement#autoUpgrade
   */
  readonly autoUpgrade?: boolean;

}

/**
 * Converts an object of type 'ContainerNodePoolSpecManagement' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerNodePoolSpecManagement(obj: ContainerNodePoolSpecManagement | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'autoRepair': obj.autoRepair,
    'autoUpgrade': obj.autoUpgrade,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Networking configuration for this NodePool. If specified, it overrides the cluster-level defaults.
 *
 * @schema ContainerNodePoolSpecNetworkConfig
 */
export interface ContainerNodePoolSpecNetworkConfig {
  /**
   * Immutable. Whether to create a new range for pod IPs in this node pool. Defaults are provided for pod_range and pod_ipv4_cidr_block if they are not specified.
   *
   * @schema ContainerNodePoolSpecNetworkConfig#createPodRange
   */
  readonly createPodRange?: boolean;

  /**
   * Whether nodes have internal IP addresses only.
   *
   * @schema ContainerNodePoolSpecNetworkConfig#enablePrivateNodes
   */
  readonly enablePrivateNodes?: boolean;

  /**
   * Immutable. Configuration for node-pool level pod cidr overprovision. If not set, the cluster level setting will be inherited.
   *
   * @schema ContainerNodePoolSpecNetworkConfig#podCidrOverprovisionConfig
   */
  readonly podCidrOverprovisionConfig?: ContainerNodePoolSpecNetworkConfigPodCidrOverprovisionConfig;

  /**
   * Immutable. The IP address range for pod IPs in this node pool. Only applicable if create_pod_range is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. /14) to have a range chosen with a specific netmask. Set to a CIDR notation (e.g. 10.96.0.0/14) to pick a specific range to use.
   *
   * @schema ContainerNodePoolSpecNetworkConfig#podIpv4CidrBlock
   */
  readonly podIpv4CidrBlock?: string;

  /**
   * Immutable. The ID of the secondary range for pod IPs. If create_pod_range is true, this ID is used for the new range. If create_pod_range is false, uses an existing secondary range with this ID.
   *
   * @schema ContainerNodePoolSpecNetworkConfig#podRange
   */
  readonly podRange?: string;

}

/**
 * Converts an object of type 'ContainerNodePoolSpecNetworkConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerNodePoolSpecNetworkConfig(obj: ContainerNodePoolSpecNetworkConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'createPodRange': obj.createPodRange,
    'enablePrivateNodes': obj.enablePrivateNodes,
    'podCidrOverprovisionConfig': toJson_ContainerNodePoolSpecNetworkConfigPodCidrOverprovisionConfig(obj.podCidrOverprovisionConfig),
    'podIpv4CidrBlock': obj.podIpv4CidrBlock,
    'podRange': obj.podRange,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. The configuration of the nodepool.
 *
 * @schema ContainerNodePoolSpecNodeConfig
 */
export interface ContainerNodePoolSpecNodeConfig {
  /**
   * Immutable. Specifies options for controlling advanced machine features.
   *
   * @schema ContainerNodePoolSpecNodeConfig#advancedMachineFeatures
   */
  readonly advancedMachineFeatures?: ContainerNodePoolSpecNodeConfigAdvancedMachineFeatures;

  /**
   * @schema ContainerNodePoolSpecNodeConfig#bootDiskKMSCryptoKeyRef
   */
  readonly bootDiskKmsCryptoKeyRef?: ContainerNodePoolSpecNodeConfigBootDiskKmsCryptoKeyRef;

  /**
   * Immutable. Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB.
   *
   * @schema ContainerNodePoolSpecNodeConfig#diskSizeGb
   */
  readonly diskSizeGb?: number;

  /**
   * Immutable. Type of the disk attached to each node. Such as pd-standard, pd-balanced or pd-ssd.
   *
   * @schema ContainerNodePoolSpecNodeConfig#diskType
   */
  readonly diskType?: string;

  /**
   * Immutable. Parameters for the ephemeral storage filesystem. If unspecified, ephemeral storage is backed by the boot disk.
   *
   * @schema ContainerNodePoolSpecNodeConfig#ephemeralStorageConfig
   */
  readonly ephemeralStorageConfig?: ContainerNodePoolSpecNodeConfigEphemeralStorageConfig;

  /**
   * Immutable. Parameters for the ephemeral storage filesystem. If unspecified, ephemeral storage is backed by the boot disk.
   *
   * @schema ContainerNodePoolSpecNodeConfig#ephemeralStorageLocalSsdConfig
   */
  readonly ephemeralStorageLocalSsdConfig?: ContainerNodePoolSpecNodeConfigEphemeralStorageLocalSsdConfig;

  /**
   * Immutable. GCFS configuration for this node.
   *
   * @schema ContainerNodePoolSpecNodeConfig#gcfsConfig
   */
  readonly gcfsConfig?: ContainerNodePoolSpecNodeConfigGcfsConfig;

  /**
   * Immutable. List of the type and count of accelerator cards attached to the instance.
   *
   * @schema ContainerNodePoolSpecNodeConfig#guestAccelerator
   */
  readonly guestAccelerator?: ContainerNodePoolSpecNodeConfigGuestAccelerator[];

  /**
   * Immutable. Enable or disable gvnic in the node pool.
   *
   * @schema ContainerNodePoolSpecNodeConfig#gvnic
   */
  readonly gvnic?: ContainerNodePoolSpecNodeConfigGvnic;

  /**
   * The image type to use for this node. Note that for a given image type, the latest version of it will be used.
   *
   * @schema ContainerNodePoolSpecNodeConfig#imageType
   */
  readonly imageType?: string;

  /**
   * Node kubelet configs.
   *
   * @schema ContainerNodePoolSpecNodeConfig#kubeletConfig
   */
  readonly kubeletConfig?: ContainerNodePoolSpecNodeConfigKubeletConfig;

  /**
   * The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node.
   *
   * @schema ContainerNodePoolSpecNodeConfig#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Parameters that can be configured on Linux nodes.
   *
   * @schema ContainerNodePoolSpecNodeConfig#linuxNodeConfig
   */
  readonly linuxNodeConfig?: ContainerNodePoolSpecNodeConfigLinuxNodeConfig;

  /**
   * Immutable. Parameters for raw-block local NVMe SSDs.
   *
   * @schema ContainerNodePoolSpecNodeConfig#localNvmeSsdBlockConfig
   */
  readonly localNvmeSsdBlockConfig?: ContainerNodePoolSpecNodeConfigLocalNvmeSsdBlockConfig;

  /**
   * Immutable. The number of local SSD disks to be attached to the node.
   *
   * @schema ContainerNodePoolSpecNodeConfig#localSsdCount
   */
  readonly localSsdCount?: number;

  /**
   * Type of logging agent that is used as the default value for node pools in the cluster. Valid values include DEFAULT and MAX_THROUGHPUT.
   *
   * @schema ContainerNodePoolSpecNodeConfig#loggingVariant
   */
  readonly loggingVariant?: string;

  /**
   * Immutable. The name of a Google Compute Engine machine type.
   *
   * @schema ContainerNodePoolSpecNodeConfig#machineType
   */
  readonly machineType?: string;

  /**
   * Immutable. The metadata key/value pairs assigned to instances in the cluster.
   *
   * @schema ContainerNodePoolSpecNodeConfig#metadata
   */
  readonly metadata?: { [key: string]: string };

  /**
   * Immutable. Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform.
   *
   * @schema ContainerNodePoolSpecNodeConfig#minCpuPlatform
   */
  readonly minCpuPlatform?: string;

  /**
   * Immutable. Setting this field will assign instances
   * of this pool to run on the specified node group. This is useful
   * for running workloads on sole tenant nodes.
   *
   * @schema ContainerNodePoolSpecNodeConfig#nodeGroupRef
   */
  readonly nodeGroupRef?: ContainerNodePoolSpecNodeConfigNodeGroupRef;

  /**
   * Immutable. The set of Google API scopes to be made available on all of the node VMs.
   *
   * @schema ContainerNodePoolSpecNodeConfig#oauthScopes
   */
  readonly oauthScopes?: string[];

  /**
   * Immutable. Whether the nodes are created as preemptible VM instances.
   *
   * @schema ContainerNodePoolSpecNodeConfig#preemptible
   */
  readonly preemptible?: boolean;

  /**
   * Immutable. The reservation affinity configuration for the node pool.
   *
   * @schema ContainerNodePoolSpecNodeConfig#reservationAffinity
   */
  readonly reservationAffinity?: ContainerNodePoolSpecNodeConfigReservationAffinity;

  /**
   * The GCE resource labels (a map of key/value pairs) to be applied to the node pool.
   *
   * @schema ContainerNodePoolSpecNodeConfig#resourceLabels
   */
  readonly resourceLabels?: { [key: string]: string };

  /**
   * Immutable. Sandbox configuration for this node.
   *
   * @schema ContainerNodePoolSpecNodeConfig#sandboxConfig
   */
  readonly sandboxConfig?: ContainerNodePoolSpecNodeConfigSandboxConfig;

  /**
   * @schema ContainerNodePoolSpecNodeConfig#serviceAccountRef
   */
  readonly serviceAccountRef?: ContainerNodePoolSpecNodeConfigServiceAccountRef;

  /**
   * Immutable. Shielded Instance options.
   *
   * @schema ContainerNodePoolSpecNodeConfig#shieldedInstanceConfig
   */
  readonly shieldedInstanceConfig?: ContainerNodePoolSpecNodeConfigShieldedInstanceConfig;

  /**
   * Immutable. Node affinity options for sole tenant node pools.
   *
   * @schema ContainerNodePoolSpecNodeConfig#soleTenantConfig
   */
  readonly soleTenantConfig?: ContainerNodePoolSpecNodeConfigSoleTenantConfig;

  /**
   * Immutable. Whether the nodes are created as spot VM instances.
   *
   * @schema ContainerNodePoolSpecNodeConfig#spot
   */
  readonly spot?: boolean;

  /**
   * The list of instance tags applied to all nodes.
   *
   * @schema ContainerNodePoolSpecNodeConfig#tags
   */
  readonly tags?: string[];

  /**
   * Immutable. List of Kubernetes taints to be applied to each node.
   *
   * @schema ContainerNodePoolSpecNodeConfig#taint
   */
  readonly taint?: ContainerNodePoolSpecNodeConfigTaint[];

  /**
   * The workload metadata configuration for this node.
   *
   * @schema ContainerNodePoolSpecNodeConfig#workloadMetadataConfig
   */
  readonly workloadMetadataConfig?: ContainerNodePoolSpecNodeConfigWorkloadMetadataConfig;

}

/**
 * Converts an object of type 'ContainerNodePoolSpecNodeConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerNodePoolSpecNodeConfig(obj: ContainerNodePoolSpecNodeConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'advancedMachineFeatures': toJson_ContainerNodePoolSpecNodeConfigAdvancedMachineFeatures(obj.advancedMachineFeatures),
    'bootDiskKMSCryptoKeyRef': toJson_ContainerNodePoolSpecNodeConfigBootDiskKmsCryptoKeyRef(obj.bootDiskKmsCryptoKeyRef),
    'diskSizeGb': obj.diskSizeGb,
    'diskType': obj.diskType,
    'ephemeralStorageConfig': toJson_ContainerNodePoolSpecNodeConfigEphemeralStorageConfig(obj.ephemeralStorageConfig),
    'ephemeralStorageLocalSsdConfig': toJson_ContainerNodePoolSpecNodeConfigEphemeralStorageLocalSsdConfig(obj.ephemeralStorageLocalSsdConfig),
    'gcfsConfig': toJson_ContainerNodePoolSpecNodeConfigGcfsConfig(obj.gcfsConfig),
    'guestAccelerator': obj.guestAccelerator?.map(y => toJson_ContainerNodePoolSpecNodeConfigGuestAccelerator(y)),
    'gvnic': toJson_ContainerNodePoolSpecNodeConfigGvnic(obj.gvnic),
    'imageType': obj.imageType,
    'kubeletConfig': toJson_ContainerNodePoolSpecNodeConfigKubeletConfig(obj.kubeletConfig),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'linuxNodeConfig': toJson_ContainerNodePoolSpecNodeConfigLinuxNodeConfig(obj.linuxNodeConfig),
    'localNvmeSsdBlockConfig': toJson_ContainerNodePoolSpecNodeConfigLocalNvmeSsdBlockConfig(obj.localNvmeSsdBlockConfig),
    'localSsdCount': obj.localSsdCount,
    'loggingVariant': obj.loggingVariant,
    'machineType': obj.machineType,
    'metadata': ((obj.metadata) === undefined) ? undefined : (Object.entries(obj.metadata).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'minCpuPlatform': obj.minCpuPlatform,
    'nodeGroupRef': toJson_ContainerNodePoolSpecNodeConfigNodeGroupRef(obj.nodeGroupRef),
    'oauthScopes': obj.oauthScopes?.map(y => y),
    'preemptible': obj.preemptible,
    'reservationAffinity': toJson_ContainerNodePoolSpecNodeConfigReservationAffinity(obj.reservationAffinity),
    'resourceLabels': ((obj.resourceLabels) === undefined) ? undefined : (Object.entries(obj.resourceLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'sandboxConfig': toJson_ContainerNodePoolSpecNodeConfigSandboxConfig(obj.sandboxConfig),
    'serviceAccountRef': toJson_ContainerNodePoolSpecNodeConfigServiceAccountRef(obj.serviceAccountRef),
    'shieldedInstanceConfig': toJson_ContainerNodePoolSpecNodeConfigShieldedInstanceConfig(obj.shieldedInstanceConfig),
    'soleTenantConfig': toJson_ContainerNodePoolSpecNodeConfigSoleTenantConfig(obj.soleTenantConfig),
    'spot': obj.spot,
    'tags': obj.tags?.map(y => y),
    'taint': obj.taint?.map(y => toJson_ContainerNodePoolSpecNodeConfigTaint(y)),
    'workloadMetadataConfig': toJson_ContainerNodePoolSpecNodeConfigWorkloadMetadataConfig(obj.workloadMetadataConfig),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Specifies the node placement policy.
 *
 * @schema ContainerNodePoolSpecPlacementPolicy
 */
export interface ContainerNodePoolSpecPlacementPolicy {
  /**
   * TPU placement topology for pod slice node pool. https://cloud.google.com/tpu/docs/types-topologies#tpu_topologies.
   *
   * @schema ContainerNodePoolSpecPlacementPolicy#tpuTopology
   */
  readonly tpuTopology?: string;

  /**
   * Type defines the type of placement policy.
   *
   * @schema ContainerNodePoolSpecPlacementPolicy#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'ContainerNodePoolSpecPlacementPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerNodePoolSpecPlacementPolicy(obj: ContainerNodePoolSpecPlacementPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'tpuTopology': obj.tpuTopology,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specify node upgrade settings to change how many nodes GKE attempts to upgrade at once. The number of nodes upgraded simultaneously is the sum of max_surge and max_unavailable. The maximum number of nodes upgraded simultaneously is limited to 20.
 *
 * @schema ContainerNodePoolSpecUpgradeSettings
 */
export interface ContainerNodePoolSpecUpgradeSettings {
  /**
   * Settings for BlueGreen node pool upgrade.
   *
   * @schema ContainerNodePoolSpecUpgradeSettings#blueGreenSettings
   */
  readonly blueGreenSettings?: ContainerNodePoolSpecUpgradeSettingsBlueGreenSettings;

  /**
   * The number of additional nodes that can be added to the node pool during an upgrade. Increasing max_surge raises the number of nodes that can be upgraded simultaneously. Can be set to 0 or greater.
   *
   * @schema ContainerNodePoolSpecUpgradeSettings#maxSurge
   */
  readonly maxSurge?: number;

  /**
   * The number of nodes that can be simultaneously unavailable during an upgrade. Increasing max_unavailable raises the number of nodes that can be upgraded in parallel. Can be set to 0 or greater.
   *
   * @schema ContainerNodePoolSpecUpgradeSettings#maxUnavailable
   */
  readonly maxUnavailable?: number;

  /**
   * Update strategy for the given nodepool.
   *
   * @schema ContainerNodePoolSpecUpgradeSettings#strategy
   */
  readonly strategy?: string;

}

/**
 * Converts an object of type 'ContainerNodePoolSpecUpgradeSettings' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerNodePoolSpecUpgradeSettings(obj: ContainerNodePoolSpecUpgradeSettings | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'blueGreenSettings': toJson_ContainerNodePoolSpecUpgradeSettingsBlueGreenSettings(obj.blueGreenSettings),
    'maxSurge': obj.maxSurge,
    'maxUnavailable': obj.maxUnavailable,
    'strategy': obj.strategy,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Configuration for node-pool level pod cidr overprovision. If not set, the cluster level setting will be inherited.
 *
 * @schema ContainerNodePoolSpecNetworkConfigPodCidrOverprovisionConfig
 */
export interface ContainerNodePoolSpecNetworkConfigPodCidrOverprovisionConfig {
  /**
   * @schema ContainerNodePoolSpecNetworkConfigPodCidrOverprovisionConfig#disabled
   */
  readonly disabled: boolean;

}

/**
 * Converts an object of type 'ContainerNodePoolSpecNetworkConfigPodCidrOverprovisionConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerNodePoolSpecNetworkConfigPodCidrOverprovisionConfig(obj: ContainerNodePoolSpecNetworkConfigPodCidrOverprovisionConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'disabled': obj.disabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Specifies options for controlling advanced machine features.
 *
 * @schema ContainerNodePoolSpecNodeConfigAdvancedMachineFeatures
 */
export interface ContainerNodePoolSpecNodeConfigAdvancedMachineFeatures {
  /**
   * Immutable. The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.
   *
   * @schema ContainerNodePoolSpecNodeConfigAdvancedMachineFeatures#threadsPerCore
   */
  readonly threadsPerCore: number;

}

/**
 * Converts an object of type 'ContainerNodePoolSpecNodeConfigAdvancedMachineFeatures' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerNodePoolSpecNodeConfigAdvancedMachineFeatures(obj: ContainerNodePoolSpecNodeConfigAdvancedMachineFeatures | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'threadsPerCore': obj.threadsPerCore,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ContainerNodePoolSpecNodeConfigBootDiskKmsCryptoKeyRef
 */
export interface ContainerNodePoolSpecNodeConfigBootDiskKmsCryptoKeyRef {
  /**
   * Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.
   *
   * @schema ContainerNodePoolSpecNodeConfigBootDiskKmsCryptoKeyRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ContainerNodePoolSpecNodeConfigBootDiskKmsCryptoKeyRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema ContainerNodePoolSpecNodeConfigBootDiskKmsCryptoKeyRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ContainerNodePoolSpecNodeConfigBootDiskKmsCryptoKeyRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerNodePoolSpecNodeConfigBootDiskKmsCryptoKeyRef(obj: ContainerNodePoolSpecNodeConfigBootDiskKmsCryptoKeyRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Parameters for the ephemeral storage filesystem. If unspecified, ephemeral storage is backed by the boot disk.
 *
 * @schema ContainerNodePoolSpecNodeConfigEphemeralStorageConfig
 */
export interface ContainerNodePoolSpecNodeConfigEphemeralStorageConfig {
  /**
   * Immutable. Number of local SSDs to use to back ephemeral storage. Uses NVMe interfaces. Each local SSD must be 375 or 3000 GB in size, and all local SSDs must share the same size.
   *
   * @schema ContainerNodePoolSpecNodeConfigEphemeralStorageConfig#localSsdCount
   */
  readonly localSsdCount: number;

}

/**
 * Converts an object of type 'ContainerNodePoolSpecNodeConfigEphemeralStorageConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerNodePoolSpecNodeConfigEphemeralStorageConfig(obj: ContainerNodePoolSpecNodeConfigEphemeralStorageConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'localSsdCount': obj.localSsdCount,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Parameters for the ephemeral storage filesystem. If unspecified, ephemeral storage is backed by the boot disk.
 *
 * @schema ContainerNodePoolSpecNodeConfigEphemeralStorageLocalSsdConfig
 */
export interface ContainerNodePoolSpecNodeConfigEphemeralStorageLocalSsdConfig {
  /**
   * Immutable. Number of local SSDs to use to back ephemeral storage. Uses NVMe interfaces. Each local SSD must be 375 or 3000 GB in size, and all local SSDs must share the same size.
   *
   * @schema ContainerNodePoolSpecNodeConfigEphemeralStorageLocalSsdConfig#localSsdCount
   */
  readonly localSsdCount: number;

}

/**
 * Converts an object of type 'ContainerNodePoolSpecNodeConfigEphemeralStorageLocalSsdConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerNodePoolSpecNodeConfigEphemeralStorageLocalSsdConfig(obj: ContainerNodePoolSpecNodeConfigEphemeralStorageLocalSsdConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'localSsdCount': obj.localSsdCount,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. GCFS configuration for this node.
 *
 * @schema ContainerNodePoolSpecNodeConfigGcfsConfig
 */
export interface ContainerNodePoolSpecNodeConfigGcfsConfig {
  /**
   * Immutable. Whether or not GCFS is enabled.
   *
   * @schema ContainerNodePoolSpecNodeConfigGcfsConfig#enabled
   */
  readonly enabled: boolean;

}

/**
 * Converts an object of type 'ContainerNodePoolSpecNodeConfigGcfsConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerNodePoolSpecNodeConfigGcfsConfig(obj: ContainerNodePoolSpecNodeConfigGcfsConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ContainerNodePoolSpecNodeConfigGuestAccelerator
 */
export interface ContainerNodePoolSpecNodeConfigGuestAccelerator {
  /**
   * Immutable. The number of the accelerator cards exposed to an instance.
   *
   * @schema ContainerNodePoolSpecNodeConfigGuestAccelerator#count
   */
  readonly count: number;

  /**
   * Immutable. Configuration for auto installation of GPU driver.
   *
   * @schema ContainerNodePoolSpecNodeConfigGuestAccelerator#gpuDriverInstallationConfig
   */
  readonly gpuDriverInstallationConfig?: ContainerNodePoolSpecNodeConfigGuestAcceleratorGpuDriverInstallationConfig;

  /**
   * Immutable. Size of partitions to create on the GPU. Valid values are described in the NVIDIA mig user guide (https://docs.nvidia.com/datacenter/tesla/mig-user-guide/#partitioning).
   *
   * @schema ContainerNodePoolSpecNodeConfigGuestAccelerator#gpuPartitionSize
   */
  readonly gpuPartitionSize?: string;

  /**
   * Immutable. Configuration for GPU sharing.
   *
   * @schema ContainerNodePoolSpecNodeConfigGuestAccelerator#gpuSharingConfig
   */
  readonly gpuSharingConfig?: ContainerNodePoolSpecNodeConfigGuestAcceleratorGpuSharingConfig;

  /**
   * Immutable. The accelerator type resource name.
   *
   * @schema ContainerNodePoolSpecNodeConfigGuestAccelerator#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'ContainerNodePoolSpecNodeConfigGuestAccelerator' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerNodePoolSpecNodeConfigGuestAccelerator(obj: ContainerNodePoolSpecNodeConfigGuestAccelerator | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'count': obj.count,
    'gpuDriverInstallationConfig': toJson_ContainerNodePoolSpecNodeConfigGuestAcceleratorGpuDriverInstallationConfig(obj.gpuDriverInstallationConfig),
    'gpuPartitionSize': obj.gpuPartitionSize,
    'gpuSharingConfig': toJson_ContainerNodePoolSpecNodeConfigGuestAcceleratorGpuSharingConfig(obj.gpuSharingConfig),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Enable or disable gvnic in the node pool.
 *
 * @schema ContainerNodePoolSpecNodeConfigGvnic
 */
export interface ContainerNodePoolSpecNodeConfigGvnic {
  /**
   * Immutable. Whether or not gvnic is enabled.
   *
   * @schema ContainerNodePoolSpecNodeConfigGvnic#enabled
   */
  readonly enabled: boolean;

}

/**
 * Converts an object of type 'ContainerNodePoolSpecNodeConfigGvnic' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerNodePoolSpecNodeConfigGvnic(obj: ContainerNodePoolSpecNodeConfigGvnic | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Node kubelet configs.
 *
 * @schema ContainerNodePoolSpecNodeConfigKubeletConfig
 */
export interface ContainerNodePoolSpecNodeConfigKubeletConfig {
  /**
   * Enable CPU CFS quota enforcement for containers that specify CPU limits.
   *
   * @schema ContainerNodePoolSpecNodeConfigKubeletConfig#cpuCfsQuota
   */
  readonly cpuCfsQuota?: boolean;

  /**
   * Set the CPU CFS quota period value 'cpu.cfs_period_us'.
   *
   * @schema ContainerNodePoolSpecNodeConfigKubeletConfig#cpuCfsQuotaPeriod
   */
  readonly cpuCfsQuotaPeriod?: string;

  /**
   * Control the CPU management policy on the node.
   *
   * @schema ContainerNodePoolSpecNodeConfigKubeletConfig#cpuManagerPolicy
   */
  readonly cpuManagerPolicy: string;

  /**
   * Controls the maximum number of processes allowed to run in a pod.
   *
   * @schema ContainerNodePoolSpecNodeConfigKubeletConfig#podPidsLimit
   */
  readonly podPidsLimit?: number;

}

/**
 * Converts an object of type 'ContainerNodePoolSpecNodeConfigKubeletConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerNodePoolSpecNodeConfigKubeletConfig(obj: ContainerNodePoolSpecNodeConfigKubeletConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cpuCfsQuota': obj.cpuCfsQuota,
    'cpuCfsQuotaPeriod': obj.cpuCfsQuotaPeriod,
    'cpuManagerPolicy': obj.cpuManagerPolicy,
    'podPidsLimit': obj.podPidsLimit,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Parameters that can be configured on Linux nodes.
 *
 * @schema ContainerNodePoolSpecNodeConfigLinuxNodeConfig
 */
export interface ContainerNodePoolSpecNodeConfigLinuxNodeConfig {
  /**
   * The Linux kernel parameters to be applied to the nodes and all pods running on the nodes.
   *
   * @schema ContainerNodePoolSpecNodeConfigLinuxNodeConfig#sysctls
   */
  readonly sysctls: { [key: string]: string };

}

/**
 * Converts an object of type 'ContainerNodePoolSpecNodeConfigLinuxNodeConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerNodePoolSpecNodeConfigLinuxNodeConfig(obj: ContainerNodePoolSpecNodeConfigLinuxNodeConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'sysctls': ((obj.sysctls) === undefined) ? undefined : (Object.entries(obj.sysctls).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Parameters for raw-block local NVMe SSDs.
 *
 * @schema ContainerNodePoolSpecNodeConfigLocalNvmeSsdBlockConfig
 */
export interface ContainerNodePoolSpecNodeConfigLocalNvmeSsdBlockConfig {
  /**
   * Immutable. Number of raw-block local NVMe SSD disks to be attached to the node. Each local SSD is 375 GB in size.
   *
   * @schema ContainerNodePoolSpecNodeConfigLocalNvmeSsdBlockConfig#localSsdCount
   */
  readonly localSsdCount: number;

}

/**
 * Converts an object of type 'ContainerNodePoolSpecNodeConfigLocalNvmeSsdBlockConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerNodePoolSpecNodeConfigLocalNvmeSsdBlockConfig(obj: ContainerNodePoolSpecNodeConfigLocalNvmeSsdBlockConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'localSsdCount': obj.localSsdCount,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Setting this field will assign instances
 * of this pool to run on the specified node group. This is useful
 * for running workloads on sole tenant nodes.
 *
 * @schema ContainerNodePoolSpecNodeConfigNodeGroupRef
 */
export interface ContainerNodePoolSpecNodeConfigNodeGroupRef {
  /**
   * Allowed value: The `name` field of a `ComputeNodeGroup` resource.
   *
   * @schema ContainerNodePoolSpecNodeConfigNodeGroupRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ContainerNodePoolSpecNodeConfigNodeGroupRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema ContainerNodePoolSpecNodeConfigNodeGroupRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ContainerNodePoolSpecNodeConfigNodeGroupRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerNodePoolSpecNodeConfigNodeGroupRef(obj: ContainerNodePoolSpecNodeConfigNodeGroupRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. The reservation affinity configuration for the node pool.
 *
 * @schema ContainerNodePoolSpecNodeConfigReservationAffinity
 */
export interface ContainerNodePoolSpecNodeConfigReservationAffinity {
  /**
   * Immutable. Corresponds to the type of reservation consumption.
   *
   * @schema ContainerNodePoolSpecNodeConfigReservationAffinity#consumeReservationType
   */
  readonly consumeReservationType: string;

  /**
   * Immutable. The label key of a reservation resource.
   *
   * @schema ContainerNodePoolSpecNodeConfigReservationAffinity#key
   */
  readonly key?: string;

  /**
   * Immutable. The label values of the reservation resource.
   *
   * @schema ContainerNodePoolSpecNodeConfigReservationAffinity#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'ContainerNodePoolSpecNodeConfigReservationAffinity' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerNodePoolSpecNodeConfigReservationAffinity(obj: ContainerNodePoolSpecNodeConfigReservationAffinity | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'consumeReservationType': obj.consumeReservationType,
    'key': obj.key,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Sandbox configuration for this node.
 *
 * @schema ContainerNodePoolSpecNodeConfigSandboxConfig
 */
export interface ContainerNodePoolSpecNodeConfigSandboxConfig {
  /**
   * Type of the sandbox to use for the node (e.g. 'gvisor').
   *
   * @schema ContainerNodePoolSpecNodeConfigSandboxConfig#sandboxType
   */
  readonly sandboxType: string;

}

/**
 * Converts an object of type 'ContainerNodePoolSpecNodeConfigSandboxConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerNodePoolSpecNodeConfigSandboxConfig(obj: ContainerNodePoolSpecNodeConfigSandboxConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'sandboxType': obj.sandboxType,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ContainerNodePoolSpecNodeConfigServiceAccountRef
 */
export interface ContainerNodePoolSpecNodeConfigServiceAccountRef {
  /**
   * Allowed value: The `email` field of an `IAMServiceAccount` resource.
   *
   * @schema ContainerNodePoolSpecNodeConfigServiceAccountRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ContainerNodePoolSpecNodeConfigServiceAccountRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema ContainerNodePoolSpecNodeConfigServiceAccountRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ContainerNodePoolSpecNodeConfigServiceAccountRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerNodePoolSpecNodeConfigServiceAccountRef(obj: ContainerNodePoolSpecNodeConfigServiceAccountRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Shielded Instance options.
 *
 * @schema ContainerNodePoolSpecNodeConfigShieldedInstanceConfig
 */
export interface ContainerNodePoolSpecNodeConfigShieldedInstanceConfig {
  /**
   * Immutable. Defines whether the instance has integrity monitoring enabled.
   *
   * @schema ContainerNodePoolSpecNodeConfigShieldedInstanceConfig#enableIntegrityMonitoring
   */
  readonly enableIntegrityMonitoring?: boolean;

  /**
   * Immutable. Defines whether the instance has Secure Boot enabled.
   *
   * @schema ContainerNodePoolSpecNodeConfigShieldedInstanceConfig#enableSecureBoot
   */
  readonly enableSecureBoot?: boolean;

}

/**
 * Converts an object of type 'ContainerNodePoolSpecNodeConfigShieldedInstanceConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerNodePoolSpecNodeConfigShieldedInstanceConfig(obj: ContainerNodePoolSpecNodeConfigShieldedInstanceConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enableIntegrityMonitoring': obj.enableIntegrityMonitoring,
    'enableSecureBoot': obj.enableSecureBoot,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Node affinity options for sole tenant node pools.
 *
 * @schema ContainerNodePoolSpecNodeConfigSoleTenantConfig
 */
export interface ContainerNodePoolSpecNodeConfigSoleTenantConfig {
  /**
   * Immutable. .
   *
   * @schema ContainerNodePoolSpecNodeConfigSoleTenantConfig#nodeAffinity
   */
  readonly nodeAffinity: ContainerNodePoolSpecNodeConfigSoleTenantConfigNodeAffinity[];

}

/**
 * Converts an object of type 'ContainerNodePoolSpecNodeConfigSoleTenantConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerNodePoolSpecNodeConfigSoleTenantConfig(obj: ContainerNodePoolSpecNodeConfigSoleTenantConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'nodeAffinity': obj.nodeAffinity?.map(y => toJson_ContainerNodePoolSpecNodeConfigSoleTenantConfigNodeAffinity(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ContainerNodePoolSpecNodeConfigTaint
 */
export interface ContainerNodePoolSpecNodeConfigTaint {
  /**
   * Immutable. Effect for taint.
   *
   * @schema ContainerNodePoolSpecNodeConfigTaint#effect
   */
  readonly effect: string;

  /**
   * Immutable. Key for taint.
   *
   * @schema ContainerNodePoolSpecNodeConfigTaint#key
   */
  readonly key: string;

  /**
   * Immutable. Value for taint.
   *
   * @schema ContainerNodePoolSpecNodeConfigTaint#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'ContainerNodePoolSpecNodeConfigTaint' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerNodePoolSpecNodeConfigTaint(obj: ContainerNodePoolSpecNodeConfigTaint | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'effect': obj.effect,
    'key': obj.key,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The workload metadata configuration for this node.
 *
 * @schema ContainerNodePoolSpecNodeConfigWorkloadMetadataConfig
 */
export interface ContainerNodePoolSpecNodeConfigWorkloadMetadataConfig {
  /**
   * Mode is the configuration for how to expose metadata to workloads running on the node.
   *
   * @schema ContainerNodePoolSpecNodeConfigWorkloadMetadataConfig#mode
   */
  readonly mode?: string;

  /**
   * DEPRECATED. Deprecated in favor of mode. NodeMetadata is the configuration for how to expose metadata to the workloads running on the node.
   *
   * @schema ContainerNodePoolSpecNodeConfigWorkloadMetadataConfig#nodeMetadata
   */
  readonly nodeMetadata?: string;

}

/**
 * Converts an object of type 'ContainerNodePoolSpecNodeConfigWorkloadMetadataConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerNodePoolSpecNodeConfigWorkloadMetadataConfig(obj: ContainerNodePoolSpecNodeConfigWorkloadMetadataConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'mode': obj.mode,
    'nodeMetadata': obj.nodeMetadata,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Settings for BlueGreen node pool upgrade.
 *
 * @schema ContainerNodePoolSpecUpgradeSettingsBlueGreenSettings
 */
export interface ContainerNodePoolSpecUpgradeSettingsBlueGreenSettings {
  /**
   * Time needed after draining entire blue pool. After this period, blue pool will be cleaned up.
   *
   * @schema ContainerNodePoolSpecUpgradeSettingsBlueGreenSettings#nodePoolSoakDuration
   */
  readonly nodePoolSoakDuration?: string;

  /**
   * Standard rollout policy is the default policy for blue-green.
   *
   * @schema ContainerNodePoolSpecUpgradeSettingsBlueGreenSettings#standardRolloutPolicy
   */
  readonly standardRolloutPolicy: ContainerNodePoolSpecUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy;

}

/**
 * Converts an object of type 'ContainerNodePoolSpecUpgradeSettingsBlueGreenSettings' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerNodePoolSpecUpgradeSettingsBlueGreenSettings(obj: ContainerNodePoolSpecUpgradeSettingsBlueGreenSettings | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'nodePoolSoakDuration': obj.nodePoolSoakDuration,
    'standardRolloutPolicy': toJson_ContainerNodePoolSpecUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy(obj.standardRolloutPolicy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Configuration for auto installation of GPU driver.
 *
 * @schema ContainerNodePoolSpecNodeConfigGuestAcceleratorGpuDriverInstallationConfig
 */
export interface ContainerNodePoolSpecNodeConfigGuestAcceleratorGpuDriverInstallationConfig {
  /**
   * Immutable. Mode for how the GPU driver is installed.
   *
   * @schema ContainerNodePoolSpecNodeConfigGuestAcceleratorGpuDriverInstallationConfig#gpuDriverVersion
   */
  readonly gpuDriverVersion: string;

}

/**
 * Converts an object of type 'ContainerNodePoolSpecNodeConfigGuestAcceleratorGpuDriverInstallationConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerNodePoolSpecNodeConfigGuestAcceleratorGpuDriverInstallationConfig(obj: ContainerNodePoolSpecNodeConfigGuestAcceleratorGpuDriverInstallationConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'gpuDriverVersion': obj.gpuDriverVersion,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Configuration for GPU sharing.
 *
 * @schema ContainerNodePoolSpecNodeConfigGuestAcceleratorGpuSharingConfig
 */
export interface ContainerNodePoolSpecNodeConfigGuestAcceleratorGpuSharingConfig {
  /**
   * Immutable. The type of GPU sharing strategy to enable on the GPU node. Possible values are described in the API package (https://pkg.go.dev/google.golang.org/api/container/v1#GPUSharingConfig).
   *
   * @schema ContainerNodePoolSpecNodeConfigGuestAcceleratorGpuSharingConfig#gpuSharingStrategy
   */
  readonly gpuSharingStrategy: string;

  /**
   * Immutable. The maximum number of containers that can share a GPU.
   *
   * @schema ContainerNodePoolSpecNodeConfigGuestAcceleratorGpuSharingConfig#maxSharedClientsPerGpu
   */
  readonly maxSharedClientsPerGpu: number;

}

/**
 * Converts an object of type 'ContainerNodePoolSpecNodeConfigGuestAcceleratorGpuSharingConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerNodePoolSpecNodeConfigGuestAcceleratorGpuSharingConfig(obj: ContainerNodePoolSpecNodeConfigGuestAcceleratorGpuSharingConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'gpuSharingStrategy': obj.gpuSharingStrategy,
    'maxSharedClientsPerGpu': obj.maxSharedClientsPerGpu,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ContainerNodePoolSpecNodeConfigSoleTenantConfigNodeAffinity
 */
export interface ContainerNodePoolSpecNodeConfigSoleTenantConfigNodeAffinity {
  /**
   * Immutable. .
   *
   * @schema ContainerNodePoolSpecNodeConfigSoleTenantConfigNodeAffinity#key
   */
  readonly key: string;

  /**
   * Immutable. .
   *
   * @schema ContainerNodePoolSpecNodeConfigSoleTenantConfigNodeAffinity#operator
   */
  readonly operator: string;

  /**
   * Immutable. .
   *
   * @schema ContainerNodePoolSpecNodeConfigSoleTenantConfigNodeAffinity#values
   */
  readonly values: string[];

}

/**
 * Converts an object of type 'ContainerNodePoolSpecNodeConfigSoleTenantConfigNodeAffinity' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerNodePoolSpecNodeConfigSoleTenantConfigNodeAffinity(obj: ContainerNodePoolSpecNodeConfigSoleTenantConfigNodeAffinity | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Standard rollout policy is the default policy for blue-green.
 *
 * @schema ContainerNodePoolSpecUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy
 */
export interface ContainerNodePoolSpecUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy {
  /**
   * Number of blue nodes to drain in a batch.
   *
   * @schema ContainerNodePoolSpecUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy#batchNodeCount
   */
  readonly batchNodeCount?: number;

  /**
   * Percentage of the blue pool nodes to drain in a batch.
   *
   * @schema ContainerNodePoolSpecUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy#batchPercentage
   */
  readonly batchPercentage?: number;

  /**
   * Soak time after each batch gets drained.
   *
   * @schema ContainerNodePoolSpecUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy#batchSoakDuration
   */
  readonly batchSoakDuration?: string;

}

/**
 * Converts an object of type 'ContainerNodePoolSpecUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ContainerNodePoolSpecUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy(obj: ContainerNodePoolSpecUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'batchNodeCount': obj.batchNodeCount,
    'batchPercentage': obj.batchPercentage,
    'batchSoakDuration': obj.batchSoakDuration,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

