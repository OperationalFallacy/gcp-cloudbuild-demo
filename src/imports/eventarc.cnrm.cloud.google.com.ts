// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 *
 *
 * @schema EventarcTrigger
 */
export class EventarcTrigger extends ApiObject {
  /**
   * Returns the apiVersion and kind for "EventarcTrigger"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'eventarc.cnrm.cloud.google.com/v1beta1',
    kind: 'EventarcTrigger',
  }

  /**
   * Renders a Kubernetes manifest for "EventarcTrigger".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: EventarcTriggerProps): any {
    return {
      ...EventarcTrigger.GVK,
      ...toJson_EventarcTriggerProps(props),
    };
  }

  /**
   * Defines a "EventarcTrigger" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: EventarcTriggerProps) {
    super(scope, id, {
      ...EventarcTrigger.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...EventarcTrigger.GVK,
      ...toJson_EventarcTriggerProps(resolved),
    };
  }
}

/**
 * @schema EventarcTrigger
 */
export interface EventarcTriggerProps {
  /**
   * @schema EventarcTrigger#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema EventarcTrigger#spec
   */
  readonly spec: EventarcTriggerSpec;

}

/**
 * Converts an object of type 'EventarcTriggerProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EventarcTriggerProps(obj: EventarcTriggerProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_EventarcTriggerSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema EventarcTriggerSpec
 */
export interface EventarcTriggerSpec {
  /**
   * Immutable.
   *
   * @schema EventarcTriggerSpec#channelRef
   */
  readonly channelRef?: EventarcTriggerSpecChannelRef;

  /**
   * Required. Destination specifies where the events should be sent to.
   *
   * @schema EventarcTriggerSpec#destination
   */
  readonly destination: EventarcTriggerSpecDestination;

  /**
   * Immutable. The location for the resource
   *
   * @schema EventarcTriggerSpec#location
   */
  readonly location: string;

  /**
   * Required. null The list of filters that applies to event attributes. Only events that match all the provided filters will be sent to the destination.
   *
   * @schema EventarcTriggerSpec#matchingCriteria
   */
  readonly matchingCriteria: EventarcTriggerSpecMatchingCriteria[];

  /**
   * Immutable. The Project that this resource belongs to.
   *
   * @schema EventarcTriggerSpec#projectRef
   */
  readonly projectRef: EventarcTriggerSpecProjectRef;

  /**
   * Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
   *
   * @schema EventarcTriggerSpec#resourceID
   */
  readonly resourceId?: string;

  /**
   * @schema EventarcTriggerSpec#serviceAccountRef
   */
  readonly serviceAccountRef?: EventarcTriggerSpecServiceAccountRef;

  /**
   * Immutable. Optional. In order to deliver messages, Eventarc may use other GCP products as transport intermediary. This field contains a reference to that transport intermediary. This information can be used for debugging purposes.
   *
   * @schema EventarcTriggerSpec#transport
   */
  readonly transport?: EventarcTriggerSpecTransport;

}

/**
 * Converts an object of type 'EventarcTriggerSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EventarcTriggerSpec(obj: EventarcTriggerSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'channelRef': toJson_EventarcTriggerSpecChannelRef(obj.channelRef),
    'destination': toJson_EventarcTriggerSpecDestination(obj.destination),
    'location': obj.location,
    'matchingCriteria': obj.matchingCriteria?.map(y => toJson_EventarcTriggerSpecMatchingCriteria(y)),
    'projectRef': toJson_EventarcTriggerSpecProjectRef(obj.projectRef),
    'resourceID': obj.resourceId,
    'serviceAccountRef': toJson_EventarcTriggerSpecServiceAccountRef(obj.serviceAccountRef),
    'transport': toJson_EventarcTriggerSpecTransport(obj.transport),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable.
 *
 * @schema EventarcTriggerSpecChannelRef
 */
export interface EventarcTriggerSpecChannelRef {
  /**
   * Optional. The name of the channel associated with the trigger in `projects/{project}/locations/{location}/channels/{channel}` format. You must provide a channel to receive events from Eventarc SaaS partners.
   *
   * @schema EventarcTriggerSpecChannelRef#external
   */
  readonly external?: string;

  /**
   * [WARNING] EventarcChannel not yet supported in Config Connector, use 'external' field to reference existing resources.
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema EventarcTriggerSpecChannelRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema EventarcTriggerSpecChannelRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'EventarcTriggerSpecChannelRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EventarcTriggerSpecChannelRef(obj: EventarcTriggerSpecChannelRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Required. Destination specifies where the events should be sent to.
 *
 * @schema EventarcTriggerSpecDestination
 */
export interface EventarcTriggerSpecDestination {
  /**
   * @schema EventarcTriggerSpecDestination#cloudFunctionRef
   */
  readonly cloudFunctionRef?: EventarcTriggerSpecDestinationCloudFunctionRef;

  /**
   * Cloud Run fully-managed service that receives the events. The service should be running in the same project of the trigger.
   *
   * @schema EventarcTriggerSpecDestination#cloudRunService
   */
  readonly cloudRunService?: EventarcTriggerSpecDestinationCloudRunService;

  /**
   * A GKE service capable of receiving events. The service should be running in the same project as the trigger.
   *
   * @schema EventarcTriggerSpecDestination#gke
   */
  readonly gke?: EventarcTriggerSpecDestinationGke;

  /**
   * @schema EventarcTriggerSpecDestination#workflowRef
   */
  readonly workflowRef?: EventarcTriggerSpecDestinationWorkflowRef;

}

/**
 * Converts an object of type 'EventarcTriggerSpecDestination' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EventarcTriggerSpecDestination(obj: EventarcTriggerSpecDestination | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cloudFunctionRef': toJson_EventarcTriggerSpecDestinationCloudFunctionRef(obj.cloudFunctionRef),
    'cloudRunService': toJson_EventarcTriggerSpecDestinationCloudRunService(obj.cloudRunService),
    'gke': toJson_EventarcTriggerSpecDestinationGke(obj.gke),
    'workflowRef': toJson_EventarcTriggerSpecDestinationWorkflowRef(obj.workflowRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema EventarcTriggerSpecMatchingCriteria
 */
export interface EventarcTriggerSpecMatchingCriteria {
  /**
   * Required. The name of a CloudEvents attribute. Currently, only a subset of attributes are supported for filtering. All triggers MUST provide a filter for the 'type' attribute.
   *
   * @schema EventarcTriggerSpecMatchingCriteria#attribute
   */
  readonly attribute: string;

  /**
   * Optional. The operator used for matching the events with the value of the filter. If not specified, only events that have an exact key-value pair specified in the filter are matched. The only allowed value is `match-path-pattern`.
   *
   * @schema EventarcTriggerSpecMatchingCriteria#operator
   */
  readonly operator?: string;

  /**
   * Required. The value for the attribute. See https://cloud.google.com/eventarc/docs/creating-triggers#trigger-gcloud for available values.
   *
   * @schema EventarcTriggerSpecMatchingCriteria#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'EventarcTriggerSpecMatchingCriteria' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EventarcTriggerSpecMatchingCriteria(obj: EventarcTriggerSpecMatchingCriteria | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'attribute': obj.attribute,
    'operator': obj.operator,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. The Project that this resource belongs to.
 *
 * @schema EventarcTriggerSpecProjectRef
 */
export interface EventarcTriggerSpecProjectRef {
  /**
   * The project for the resource
   *
   * Allowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).
   *
   * @schema EventarcTriggerSpecProjectRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema EventarcTriggerSpecProjectRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema EventarcTriggerSpecProjectRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'EventarcTriggerSpecProjectRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EventarcTriggerSpecProjectRef(obj: EventarcTriggerSpecProjectRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema EventarcTriggerSpecServiceAccountRef
 */
export interface EventarcTriggerSpecServiceAccountRef {
  /**
   * Optional. The IAM service account email associated with the trigger. The service account represents the identity of the trigger. The principal who calls this API must have `iam.serviceAccounts.actAs` permission in the service account. See https://cloud.google.com/iam/docs/understanding-service-accounts#sa_common for more information. For Cloud Run destinations, this service account is used to generate identity tokens when invoking the service. See https://cloud.google.com/run/docs/triggering/pubsub-push#create-service-account for information on how to invoke authenticated Cloud Run services. In order to create Audit Log triggers, the service account should also have `roles/eventarc.eventReceiver` IAM role.
   *
   * Allowed value: The `email` field of an `IAMServiceAccount` resource.
   *
   * @schema EventarcTriggerSpecServiceAccountRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema EventarcTriggerSpecServiceAccountRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema EventarcTriggerSpecServiceAccountRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'EventarcTriggerSpecServiceAccountRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EventarcTriggerSpecServiceAccountRef(obj: EventarcTriggerSpecServiceAccountRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. Optional. In order to deliver messages, Eventarc may use other GCP products as transport intermediary. This field contains a reference to that transport intermediary. This information can be used for debugging purposes.
 *
 * @schema EventarcTriggerSpecTransport
 */
export interface EventarcTriggerSpecTransport {
  /**
   * Immutable. The Pub/Sub topic and subscription used by Eventarc as delivery intermediary.
   *
   * @schema EventarcTriggerSpecTransport#pubsub
   */
  readonly pubsub?: EventarcTriggerSpecTransportPubsub;

}

/**
 * Converts an object of type 'EventarcTriggerSpecTransport' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EventarcTriggerSpecTransport(obj: EventarcTriggerSpecTransport | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'pubsub': toJson_EventarcTriggerSpecTransportPubsub(obj.pubsub),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema EventarcTriggerSpecDestinationCloudFunctionRef
 */
export interface EventarcTriggerSpecDestinationCloudFunctionRef {
  /**
   * [WARNING] Configuring a Cloud Function in Trigger is not supported as of today. The Cloud Function resource name. Format: projects/{project}/locations/{location}/functions/{function}
   *
   * Allowed value: The Google Cloud resource name of a `CloudFunctionsFunction` resource (format: `projects/{{project}}/locations/{{region}}/functions/{{name}}`).
   *
   * @schema EventarcTriggerSpecDestinationCloudFunctionRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema EventarcTriggerSpecDestinationCloudFunctionRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema EventarcTriggerSpecDestinationCloudFunctionRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'EventarcTriggerSpecDestinationCloudFunctionRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EventarcTriggerSpecDestinationCloudFunctionRef(obj: EventarcTriggerSpecDestinationCloudFunctionRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Cloud Run fully-managed service that receives the events. The service should be running in the same project of the trigger.
 *
 * @schema EventarcTriggerSpecDestinationCloudRunService
 */
export interface EventarcTriggerSpecDestinationCloudRunService {
  /**
   * Optional. The relative path on the Cloud Run service the events should be sent to. The value must conform to the definition of URI path segment (section 3.3 of RFC2396). Examples: "/route", "route", "route/subroute".
   *
   * @schema EventarcTriggerSpecDestinationCloudRunService#path
   */
  readonly path?: string;

  /**
   * Required. The region the Cloud Run service is deployed in.
   *
   * @schema EventarcTriggerSpecDestinationCloudRunService#region
   */
  readonly region: string;

  /**
   * @schema EventarcTriggerSpecDestinationCloudRunService#serviceRef
   */
  readonly serviceRef: EventarcTriggerSpecDestinationCloudRunServiceServiceRef;

}

/**
 * Converts an object of type 'EventarcTriggerSpecDestinationCloudRunService' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EventarcTriggerSpecDestinationCloudRunService(obj: EventarcTriggerSpecDestinationCloudRunService | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'path': obj.path,
    'region': obj.region,
    'serviceRef': toJson_EventarcTriggerSpecDestinationCloudRunServiceServiceRef(obj.serviceRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A GKE service capable of receiving events. The service should be running in the same project as the trigger.
 *
 * @schema EventarcTriggerSpecDestinationGke
 */
export interface EventarcTriggerSpecDestinationGke {
  /**
   * @schema EventarcTriggerSpecDestinationGke#clusterRef
   */
  readonly clusterRef: EventarcTriggerSpecDestinationGkeClusterRef;

  /**
   * Required. The name of the Google Compute Engine in which the cluster resides, which can either be compute zone (for example, us-central1-a) for the zonal clusters or region (for example, us-central1) for regional clusters.
   *
   * @schema EventarcTriggerSpecDestinationGke#location
   */
  readonly location: string;

  /**
   * Required. The namespace the GKE service is running in.
   *
   * @schema EventarcTriggerSpecDestinationGke#namespace
   */
  readonly namespace: string;

  /**
   * Optional. The relative path on the GKE service the events should be sent to. The value must conform to the definition of a URI path segment (section 3.3 of RFC2396). Examples: "/route", "route", "route/subroute".
   *
   * @schema EventarcTriggerSpecDestinationGke#path
   */
  readonly path?: string;

  /**
   * Required. Name of the GKE service.
   *
   * @schema EventarcTriggerSpecDestinationGke#service
   */
  readonly service: string;

}

/**
 * Converts an object of type 'EventarcTriggerSpecDestinationGke' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EventarcTriggerSpecDestinationGke(obj: EventarcTriggerSpecDestinationGke | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'clusterRef': toJson_EventarcTriggerSpecDestinationGkeClusterRef(obj.clusterRef),
    'location': obj.location,
    'namespace': obj.namespace,
    'path': obj.path,
    'service': obj.service,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema EventarcTriggerSpecDestinationWorkflowRef
 */
export interface EventarcTriggerSpecDestinationWorkflowRef {
  /**
   * The resource name of the Workflow whose Executions are triggered by the events. The Workflow resource should be deployed in the same project as the trigger. Format: `projects/{project}/locations/{location}/workflows/{workflow}`
   *
   * @schema EventarcTriggerSpecDestinationWorkflowRef#external
   */
  readonly external?: string;

  /**
   * [WARNING] WorkflowsWorkflow not yet supported in Config Connector, use 'external' field to reference existing resources.
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema EventarcTriggerSpecDestinationWorkflowRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema EventarcTriggerSpecDestinationWorkflowRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'EventarcTriggerSpecDestinationWorkflowRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EventarcTriggerSpecDestinationWorkflowRef(obj: EventarcTriggerSpecDestinationWorkflowRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable. The Pub/Sub topic and subscription used by Eventarc as delivery intermediary.
 *
 * @schema EventarcTriggerSpecTransportPubsub
 */
export interface EventarcTriggerSpecTransportPubsub {
  /**
   * Immutable.
   *
   * @schema EventarcTriggerSpecTransportPubsub#topicRef
   */
  readonly topicRef?: EventarcTriggerSpecTransportPubsubTopicRef;

}

/**
 * Converts an object of type 'EventarcTriggerSpecTransportPubsub' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EventarcTriggerSpecTransportPubsub(obj: EventarcTriggerSpecTransportPubsub | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'topicRef': toJson_EventarcTriggerSpecTransportPubsubTopicRef(obj.topicRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema EventarcTriggerSpecDestinationCloudRunServiceServiceRef
 */
export interface EventarcTriggerSpecDestinationCloudRunServiceServiceRef {
  /**
   * Required. The name of the Cloud Run service being addressed. See https://cloud.google.com/run/docs/reference/rest/v1/namespaces.services. Only services located in the same project of the trigger object can be addressed.
   *
   * Allowed value: The Google Cloud resource name of a `RunService` resource (format: `projects/{{project}}/locations/{{location}}/services/{{name}}`).
   *
   * @schema EventarcTriggerSpecDestinationCloudRunServiceServiceRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema EventarcTriggerSpecDestinationCloudRunServiceServiceRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema EventarcTriggerSpecDestinationCloudRunServiceServiceRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'EventarcTriggerSpecDestinationCloudRunServiceServiceRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EventarcTriggerSpecDestinationCloudRunServiceServiceRef(obj: EventarcTriggerSpecDestinationCloudRunServiceServiceRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema EventarcTriggerSpecDestinationGkeClusterRef
 */
export interface EventarcTriggerSpecDestinationGkeClusterRef {
  /**
   * Required. The name of the cluster the GKE service is running in. The cluster must be running in the same project as the trigger being created.
   *
   * Allowed value: The `selfLink` field of a `ContainerCluster` resource.
   *
   * @schema EventarcTriggerSpecDestinationGkeClusterRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema EventarcTriggerSpecDestinationGkeClusterRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema EventarcTriggerSpecDestinationGkeClusterRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'EventarcTriggerSpecDestinationGkeClusterRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EventarcTriggerSpecDestinationGkeClusterRef(obj: EventarcTriggerSpecDestinationGkeClusterRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Immutable.
 *
 * @schema EventarcTriggerSpecTransportPubsubTopicRef
 */
export interface EventarcTriggerSpecTransportPubsubTopicRef {
  /**
   * Optional. The name of the Pub/Sub topic created and managed by Eventarc system as a transport for the event delivery. Format: `projects/{PROJECT_ID}/topics/{TOPIC_NAME}. You may set an existing topic for triggers of the type google.cloud.pubsub.topic.v1.messagePublished` only. The topic you provide here will not be deleted by Eventarc at trigger deletion.
   *
   * Allowed value: The Google Cloud resource name of a `PubSubTopic` resource (format: `projects/{{project}}/topics/{{name}}`).
   *
   * @schema EventarcTriggerSpecTransportPubsubTopicRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema EventarcTriggerSpecTransportPubsubTopicRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema EventarcTriggerSpecTransportPubsubTopicRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'EventarcTriggerSpecTransportPubsubTopicRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EventarcTriggerSpecTransportPubsubTopicRef(obj: EventarcTriggerSpecTransportPubsubTopicRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

